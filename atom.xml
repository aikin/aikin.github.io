<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[aikin'blog]]></title>
  <subtitle><![CDATA[喜欢coding。喜欢大海。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://aikin.github.io//"/>
  <updated>2015-05-11T05:14:24.000Z</updated>
  <id>http://aikin.github.io//</id>
  
  <author>
    <name><![CDATA[aikin]]></name>
    <email><![CDATA[me@ulaijn.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[了解 Linux 文件和文件夹的操作权限]]></title>
    <link href="http://aikin.github.io/2015/04/03/linux-file-permission-ower/"/>
    <id>http://aikin.github.io/2015/04/03/linux-file-permission-ower/</id>
    <published>2015-04-03T03:18:59.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　由于 linux 是多用户操作系统，所以基于安全的考虑，需要具备保障个人隐私和系统安全的机制。因此在使用 linux 系统的时候，经常会出现权限的问题(比如: 删除文件、安装软件、运行应用等等)，期初遇到这些问题的时候，大部分都使用<code>sudo</code>或者是<code>sudo chmod 777 file</code>(后面会讲解这个命令)来解决的。虽然这种方式可以解决问题，但是这样是不安全的，特别是在服务器上操作的时候，因为不是所有的文件和文件夹都可以被其它用户操作的，不是所有的用户都有<code>root</code>权限的，不是所有的应用都可以用<code>root</code>用户启动的。那么我们要如何正确的处理这些权限问题呢？那就让我们来学习一下 linux 权限相关的知识。</p>
<a id="more"></a>
<h3 id="用户的权限">用户的权限</h3><p>　　要确定一个用户对某个文件或文件夹是否具有相应的操作权限，先要明确该用户与文件或文件夹之间的关系。在 linux 系统中，定义了如下三种关系：</p>
<blockquote>
<ul>
<li><strong> 文件或文件夹的所有者(owner) </strong>: 文件或文件夹的拥有者，开始创建文件或文件夹时为创建者。</li>
<li><strong> 组(group) </strong>: 文件或文件夹所属的组, 开始创建文件或文件夹时为创建者的所属的组。</li>
<li><strong> 其他人(other) </strong>: 除了文件或文件夹的所有者和文件或文件夹所属的组的其他成员，剩下的 linux 的用户。</li>
</ul>
</blockquote>
<p>　　因为在 linux 下的文件和文件夹都有<code>读取(r)</code>、<code>写入(w)</code>、<code>执行(x)</code>的操作，所以上面描述的每种关系的用户分别都可以赋予这些操作权限。操作权限介绍:</p>
<blockquote>
<table>
<thead>
<tr>
<th>权限</th>
<th>简写</th>
<th>对普通文件的作用</th>
<th>对文件夹的作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>读取</td>
<td>r</td>
<td>查看文件内容</td>
<td>列出文件夹中的文件(ls)</td>
</tr>
<tr>
<td>写入</td>
<td>w</td>
<td>修改文件内容</td>
<td>在文件夹中删除、添加或重命名文件(夹)</td>
</tr>
<tr>
<td>执行</td>
<td>x</td>
<td>文件可以作为程序执行</td>
<td>cd 到文件夹</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="文件或文件夹和用户的三种关系的基础操作权限">文件或文件夹和用户的三种关系的基础操作权限</h3><p>　　在 linux 使用<code>ls -la</code>命令可以查看文件夹内文件的属性，下面是我电脑上某个文件夹下文件的属性:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la</span><br><span class="line">drwxr-xr-x <span class="number">14</span> root root     <span class="number">4096</span> Apr  <span class="number">3</span> <span class="number">18</span>:<span class="number">47</span> .</span><br><span class="line">drwxr-xr-x <span class="number">23</span> root root     <span class="number">4096</span> Mar  <span class="number">2</span> <span class="number">05</span>:<span class="number">48</span> ..</span><br><span class="line">drwxr-xr-x  <span class="number">2</span> root root     <span class="number">4096</span> Apr  <span class="number">3</span> <span class="number">07</span>:<span class="number">44</span> backups</span><br><span class="line">drwxr-xr-x <span class="number">17</span> root root     <span class="number">4096</span> Jul <span class="number">22</span>  <span class="number">2014</span> cache</span><br><span class="line">drwxr-xr-x  <span class="number">2</span> root root     <span class="number">4096</span> Mar  <span class="number">2</span> <span class="number">04</span>:<span class="number">26</span> docker-registry</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> root root        <span class="number">9</span> Feb <span class="number">25</span> <span class="number">13</span>:<span class="number">31</span> lock -&gt; /run/lock</span><br><span class="line">drwxrwxr-x <span class="number">15</span> root syslog   <span class="number">4096</span> Apr  <span class="number">3</span> <span class="number">07</span>:<span class="number">44</span> <span class="built_in">log</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root        <span class="number">0</span> Apr  <span class="number">3</span> <span class="number">18</span>:<span class="number">47</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>上面的有九列数据，第一列数据表示和文件或文件夹相应关系用户的操作权限，第二列表示文件夹内文件和文件夹的总数量(包括文件夹本身)，第三列表示文件夹或文件的拥有者，第四列表示文件或文件夹的所属的组，第五列表示文件或文件夹的大小，第六、七、八列表示文件或文件夹最后被修改的时间，第九列文件或文件夹的名字。</p>
</li>
<li><p>接下主要分析第一列的数据，在上面的信息中倒数第二行<code>drwxrwxr-x</code>，从左到右第一个字母表示文件系统对象的类别，这里<code>d</code>表示为目录(文件夹)。其它文件系统对象:</p>
<blockquote>
<p><code>-</code>(常规文件)、<code>d</code>(目录)、<code>l</code>(符号链接)、<code>c</code>(字符特殊设备)、<code>b</code>(模块特殊设备)、<code>p</code>(FIFO)、<code>s</code>(套接字)</p>
</blockquote>
</li>
<li><p><code>drwxrwxr-x</code>除出去第一个字母<code>d</code>后的<code>rwxrwxr-x</code>表示的是三种用户关系对文件或文件夹的操作权限。从左到右每三个一组，依次表示所有者权限、组权限、其他用户权限。每组的顺序均为<code>rwx</code>，如果用户有相应的操作权限就用相应的字母表示，如果不具有相应的操作权限就用<code>-</code>表示。比如: <code>rwxrwxr-x</code>表示文件或文件夹的所有者具有<code>rwx</code>(可读，可写，可执行)的操作权限，组用户也具有<code>rwx</code>(可读，可写，可执行)的权限，其他用户具有<code>r-x</code>(可读，可执行，没有可读)的操作权限。</p>
</li>
</ul>
<h3 id="特殊权限SUID、SGID、Sticky">特殊权限<code>SUID</code>、<code>SGID</code>、<code>Sticky</code></h3><p>　　在 linux 系统中还有三种与用户身份无关的三个文件权限属性。即<code>SUID、SGID和Sticky</code>。</p>
<ul>
<li><p><strong><em> SUID(Set User ID, 4): </em></strong></p>
<blockquote>
<p>该属性只对有执行权限的文件有效，对目录无效。执行具有<code>SUID</code>权限的程序时，引发的进程的所有者是程序文件的所有者，而不是启动程序的用户（除非二者是同一个人）。比如，如果一个程序的所有者是<code>root</code>且具有<code>SUID</code>属性，一个普通用户执行此程序时，如同<code>root</code>执行此程序一样。（请注意该属性对<code>Shell</code>脚本程序无效）该属性为一些特殊程序（如lpr）的启动带来了方便。但有时也带来了安全隐患：比如一个具有<code>SUID</code>属性的程序如果在执行时运行了一个<code>shell</code>，那么用户可以籍此得到系统的最高权限。<code>SUID</code>可用<code>s</code>表示，如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="operator">-l</span> /usr/bin/passwd</span><br><span class="line">-rwsr-xr-x <span class="number">1</span> root root <span class="number">47032</span> Feb <span class="number">16</span>  <span class="number">2014</span> /usr/bin/passwd</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><strong><em> SGID(Set Group ID, 4): </em></strong></p>
<blockquote>
<p>对于可执行文件，<code>SGID</code>与<code>SUID</code>类似，引发的进程的所有组是程序文件所属的组。对于目录，<code>SGID</code>属性会使目录中新建文件的所属组与该目录相同。<code>SGID</code>也可以用s表示，如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="operator">-l</span> /var</span><br><span class="line">drwxrwsr-x  <span class="number">2</span> root staff    <span class="number">4096</span> Apr <span class="number">10</span>  <span class="number">2014</span> <span class="built_in">local</span></span><br><span class="line">drwxrwxr-x <span class="number">15</span> root syslog   <span class="number">4096</span> Apr  <span class="number">4</span> <span class="number">19</span>:<span class="number">57</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><strong><em>Sticky, 1 :</em></strong></p>
<blockquote>
<p>仅对目录有效。带<code>sticky</code>属性的目录下的文件或目录可以被其拥有者删除或改名。常利用<code>sticky</code>属性创建这样的目录：组用户可以在此目录中创建新文件、修改文件内容，但只有文件所有者才能对自己的文件进行删除或改名。如系统中的<code>/tmp</code>文件夹。在属性字符串中，通常用t表示。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="operator">-l</span> /</span><br><span class="line">drwxrwxrwt   <span class="number">8</span> root root  <span class="number">4096</span> Apr  <span class="number">4</span> <span class="number">23</span>:<span class="number">57</span> tmp</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="修改文件或文件夹对应用户的操作权限">修改文件或文件夹对应用户的操作权限</h3><p>　　在 linux 系统中，可以使用<code>chmod</code>命令来修改文件或文件夹对应用户的操作权限，<code>chmod</code>命令也有两种方式修改，一种是使用代表相应操作权限的字母简写表示，另一种是使用代表相应操作权限的数字表示。</p>
<ul>
<li><p><strong><em> 使用简写字母 </em></strong></p>
<blockquote>
<p><code>chmod</code>语法参数格式: [ugoa][[+-=][rwxst]<br>第一个字符是u、g、 o 或 a 中的一个（分别表示用户、组、其他人和所有人）。还可以选择添加（+）、删除（-）或设置（=）各种不同权限。</p>
</blockquote>
<ul>
<li><p>给文件或文件夹<code>try</code>的拥有者加可执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod u+x try</span><br></pre></td></tr></table></figure>
</li>
<li><p>给文件或文件夹<code>try</code>的拥有者和组成员加可读可写权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod ug+rw try</span><br></pre></td></tr></table></figure>
</li>
<li><p>给文件或文件夹<code>try</code>的拥有者和组成员除去可写权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod ug-r try</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong><em> 使用数字表示(八进制数) </em></strong></p>
<blockquote>
<p>为了简化表述，也可使用八进制数来表示权限。即用一个四位八进制数来表示，其中最高位表示特殊权限，随后的三位依次是所有者权限、组权限和其他人权限。每一个八进制位的权限数值是文件具有的相应权限所对应的数值之后，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0755</span>=rwxr-xr-x=<span class="number">0</span>(<span class="number">4</span>+<span class="number">2</span>+<span class="number">1</span>)(<span class="number">4</span>+<span class="number">0</span>+<span class="number">1</span>)(<span class="number">4</span>+<span class="number">0</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>数值权限的算法，比如<code>rw-</code>其实就是<code>110</code>的二进制，也就是<code>0*2^0 + 1*2^1 + 1*2^2 = 6</code>。有相应的权限就用<code>1</code>表示，没有相应的权限就用<code>0</code>表示。不过这种算法特殊权限不包含在内。</p>
</blockquote>
<ul>
<li><p>给文件或文件夹<code>try</code>的拥有者加<code>rwx</code>权限，组用户加<code>r-x</code>权限，其他用户<code>r--</code>权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod <span class="number">0754</span> try</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>chmod</code>命令也可以递归的修改文件夹下所有的文件的权限，如给 try 文件夹下得所有文件加上 0755 权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod -R <span class="number">0755</span> try</span><br></pre></td></tr></table></figure>
</li>
<li><p>批量只修改文件或文件夹权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ find -type d|xargs chmod <span class="number">745</span>     // 只修改文件夹权限</span><br><span class="line">$ find -type f|xargs chmod <span class="number">644</span>     // 只修改文件权限</span><br><span class="line">// 或者</span><br><span class="line">$ chmod <span class="number">745</span> `find 路径 -type d`     // 只修改文件夹权限</span><br><span class="line">$ chmod <span class="number">644</span> `find 路径 -type f`    // 只修改文件权限</span><br></pre></td></tr></table></figure>
</li>
<li><p>相应权限的数值:</p>
<blockquote>
<ul>
<li><code>rwx</code>(7)、<code>rw-</code>(6)、<code>r-x</code>(5)、<code>r--</code>(4)、<code>--wx</code>(3)、<code>-w-</code>(2)、<code>--x</code>(1)、<code>---</code>(0)</li>
<li>suid: 符号<code>s</code>(4)</li>
<li>sgid: 符号<code>s</code>(2)</li>
<li>sticky: 符号<code>t</code>(1)</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="修改文件或文件夹的拥有者和所属的组">修改文件或文件夹的拥有者和所属的组</h3><p>　　使用<code>chown</code>可以修改文件或文件夹的拥有者和所属的组。</p>
<ul>
<li><p>将文件或文件夹<code>try</code>的拥有者修改成<code>aikin</code>，所属的组修改成<code>adm</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown aikin:adm try</span><br></pre></td></tr></table></figure>
</li>
<li><p>和<code>chmod</code>一样，<code>-R</code>参数可以起到递归的作用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R aikin:adm try</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建组和用户">创建组和用户</h3><ul>
<li><p><strong><em>组相关操作: </em></strong></p>
<ul>
<li><p>创建一个<code>try</code>组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd  try</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>try</code>组的名字为<code>rename-try</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd -n rename-try try</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>try</code>组的名字为<code>rename-try</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd -n rename-try try</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除<code>try2</code>组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupdel  try2</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看所有组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat /etc/group</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong><em>用户相关操作: </em></strong></p>
<ul>
<li><p>创建用户<code>test</code></p>
<blockquote>
<p>在 linux 系统上虽然可以使用<code>useradd</code>或<code>adduser</code>来创建用户，但是这两个命令是有区别的。</p>
<ol>
<li>使用<code>useradd</code>时，如果后面不添加任何参数选项，例如：<code>$sudo useradd test</code>创建出来的用户将是默认“三无”用户：一无Home Directory，二无密码，三无系统Shell。</li>
<li>使用<code>adduser</code>时，创建用户的过程更像是一种人机对话，系统会提示你输入各种信息，然后会根据这些信息帮你创建新用户。<br>下面创建用户使用的是<code>adduser</code>命令:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> $ sudo adduser <span class="built_in">test</span></span><br><span class="line"> Adding user `<span class="built_in">test</span><span class="string">' ...</span><br><span class="line"> Adding new group `test'</span> (<span class="number">1002</span>) ...</span><br><span class="line"> Adding new user `<span class="built_in">test</span><span class="string">' (1001) with group `test'</span> ...</span><br><span class="line"> Creating home directory `/home/<span class="built_in">test</span><span class="string">' ...</span><br><span class="line"> Copying files from `/etc/skel'</span> ...</span><br><span class="line"> Enter new UNIX password:</span><br><span class="line"> Retype new UNIX password:</span><br><span class="line"> passwd: password updated successfully</span><br><span class="line"> Changing the user information <span class="keyword">for</span> <span class="built_in">test</span></span><br><span class="line"> Enter the new value, or press ENTER <span class="keyword">for</span> the default</span><br><span class="line">Full Name []: <span class="built_in">test</span></span><br><span class="line">Room Number []:</span><br><span class="line">Work Phone []:</span><br><span class="line">Home Phone []:</span><br><span class="line">Other []:</span><br><span class="line"> Is the information correct? [Y/n] y</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
</li>
<li><p>修改用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo passwd <span class="built_in">test</span>    // 修改用户密码</span><br><span class="line">$ sudo usermod <span class="operator">-d</span> /home/<span class="built_in">test</span> -G try2 <span class="built_in">test</span>   // 将<span class="built_in">test</span>用户的登录目录改成/home/<span class="built_in">test</span>，并加入 try 组，注意这里是大 G。</span><br><span class="line">$ sudo gpasswd <span class="operator">-a</span> <span class="built_in">test</span> try     // 将用户 <span class="built_in">test</span> 加入到 try2 组。</span><br><span class="line">$ sudo gpasswd <span class="operator">-d</span> <span class="built_in">test</span> try2    // 将用户 <span class="built_in">test</span> 从 try 组中移除</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除用户<code>test</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo userdel <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看所有用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cut <span class="operator">-d</span> : <span class="operator">-f</span> <span class="number">1</span> /etc/passwd</span><br><span class="line">// 或者</span><br><span class="line">$ cat /etc/passwd |awk -F \: <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>　　<strong><em>了解 linux 用户操作权限，安全就掌握在手中。</em></strong></p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-104-5/" target="_blank" rel="external">学习 Linux，101: 管理文件权限和所有权</a></li>
<li><a href="http://linux-wiki.cn/wiki/zh-hans/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90" target="_blank" rel="external">文件权限</a></li>
<li><a href="http://blog.51yip.com/linux/1137.html" target="_blank" rel="external">linux下添加，删除，修改，查看用户和用户组</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　由于 linux 是多用户操作系统，所以基于安全的考虑，需要具备保障个人隐私和系统安全的机制。因此在使用 linux 系统的时候，经常会出现权限的问题(比如: 删除文件、安装软件、运行应用等等)，期初遇到这些问题的时候，大部分都使用<code>sudo</code>或者是<code>sudo chmod 777 file</code>(后面会讲解这个命令)来解决的。虽然这种方式可以解决问题，但是这样是不安全的，特别是在服务器上操作的时候，因为不是所有的文件和文件夹都可以被其它用户操作的，不是所有的用户都有<code>root</code>权限的，不是所有的应用都可以用<code>root</code>用户启动的。那么我们要如何正确的处理这些权限问题呢？那就让我们来学习一下 linux 权限相关的知识。</p>]]>
    
    </summary>
    
      <category term="linux" scheme="http://aikin.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu 服务自动启动]]></title>
    <link href="http://aikin.github.io/2014/12/20/ubuntu-auto-startup/"/>
    <id>http://aikin.github.io/2014/12/20/ubuntu-auto-startup/</id>
    <published>2014-12-20T11:26:25.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　有时候，我们希望服务器重启后能够自动的把相关的服务启动起来。在了解如何让服务自动启动前，我们需要先了解一下，linux系统的启动步骤。</p>
<h3 id="linux_系统的启动步骤">linux 系统的启动步骤</h3><blockquote>
<ol>
<li>读取 MBR 的信息，启动 Boot Manager。</li>
<li>加载系统内核，初始化硬件和设备驱动，启动 init 进程， init 进程是 Linux 的根进程，所有的系统进程都是它的子进程，也就是说 init 进程会根据配置文件继续引导过程，启动其它进程。</li>
<li>init 进程读取 /etc/inittab 文件中的信息，并进入预设的运行级别。通常情况下 /etc/rcS.d/ 目录下的启动脚本首先被执行，然后是/etc/rcN.d/ 目录。</li>
<li>根据 /etc/rcS.d/ 文件夹中对应的脚本启动 Xwindow 服务器 xorg，Xwindow 为 Linux 下的图形用户界面系统。</li>
<li>启动登录管理器，等待用户登录。</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="运行级别">运行级别</h3><p>  Ubuntu中的运行级别</p>
<blockquote>
<p>0（关闭系统）<br>1（单用户模式，只允许root用户对系统进行维护。）<br>2 到 5（多用户模式，其中3为字符界面，5为图形界面。）<br>6（重启系统）</p>
</blockquote>
<h3 id="运行级别目录">运行级别目录</h3><p>  在 /etc/rc0.d ~ /etc/rc6.d 和 /etc/rcS.d 目录下，这7个目录中，每个目录分别存放着对应运行级别加载时需要关闭或启动的服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="operator">-l</span> /etc/rc2.d/</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">18</span> Aug  <span class="number">9</span>  <span class="number">2013</span> K01ondemand -&gt; ../init.d/ondemand</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">18</span> Mar <span class="number">13</span> <span class="number">09</span>:<span class="number">44</span> K01pppd-dns -&gt; ../init.d/pppd-dns</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">15</span> Mar <span class="number">13</span> <span class="number">09</span>:<span class="number">44</span> K01rsync -&gt; ../init.d/rsync</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">14</span> Mar <span class="number">13</span> <span class="number">09</span>:<span class="number">44</span> S01acct -&gt; ../init.d/acct</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">15</span> Mar <span class="number">13</span> <span class="number">09</span>:<span class="number">44</span> S01aegis -&gt; ../init.d/aegis</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">14</span> Mar <span class="number">13</span> <span class="number">09</span>:<span class="number">44</span> S01sudo -&gt; ../init.d/sudo</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<ul>
<li>由显示的信息可以知道，其实每个脚本文件都对应着/etc/init.d/目录下具体的服务K开头的脚本文件代表运行级别加载时需要关闭的，S开头的代表需要执行</li>
</ul>
<h3 id="使用软连接设置自动启动">使用软连接设置自动启动</h3><p>  由上面的详细信息可以知道，当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在/etc/init.d目录下，然后在 /etc/rc.d/rc*.d 中建立软链接即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln <span class="operator">-s</span> /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</span><br></pre></td></tr></table></figure></p>
<ul>
<li>此处 sshd 是具体服务的脚本文件，S100ssh 是其软链接，S开头代表加载时自启动</li>
<li>如果需要在多个运行级别下设置自启动，则需建立多个软链接</li>
<li>这种方式比较繁琐，适用于自定义的服务脚本</li>
<li>如果系统中已经存在某些服务（比如安装 apache 时就会有 httpd 服务项），可以使用下面的两种方式。</li>
</ul>
<h3 id="使用_update-rc-d_命令设置自动启动项">使用 update-rc.d 命令设置自动启动项</h3><ul>
<li><p>从所有的运行级别中删除指定启动项</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-rc.d <span class="operator">-f</span> ＜basename＞ remove    // basename 为服务的名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>按指定顺序、在指定运行级别中启动或关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ update-rc.d ＜basename＞ start|stop ＜order＞ ＜runlevels＞</span><br><span class="line">// 实例：update-rc.d apachectl start <span class="number">20</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> . stop <span class="number">20</span> <span class="number">0</span> <span class="number">1</span> <span class="number">6</span> .</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>解析：表示在2、3、4、5这五个运行级别中，由小到大，第20个开始运行apachectl；在 0 1 6这3个运行级别中，第20个关闭apachectl。这是合并起来的写法，注意它有2个点号，效果等于下面方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-rc.d apachectl defaults</span><br></pre></td></tr></table></figure></p>
<ul>
<li>启动和关闭顺序为90，级别默认<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-rc.d ＜basename＞ defaults <span class="number">90</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>A启动后B才能启动，B关闭后A才关闭<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ update-rc.d A defaults <span class="number">80</span> <span class="number">20</span></span><br><span class="line">$ update-rc.d B defaults <span class="number">90</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<h3 id="使用_chkconfig_命令设置自动启动项">使用 chkconfig 命令设置自动启动项</h3><ul>
<li>查看自动启动项</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --list</span><br><span class="line">acct                      <span class="number">0</span>:off  <span class="number">1</span>:off  <span class="number">2</span>:on   <span class="number">3</span>:on   <span class="number">4</span>:on   <span class="number">5</span>:on   <span class="number">6</span>:off</span><br><span class="line">aegis                     <span class="number">0</span>:off  <span class="number">1</span>:off  <span class="number">2</span>:on   <span class="number">3</span>:on   <span class="number">4</span>:on   <span class="number">5</span>:on   <span class="number">6</span>:off</span><br><span class="line">apparmor                  <span class="number">0</span>:off  <span class="number">1</span>:off  <span class="number">2</span>:off  <span class="number">3</span>:off  <span class="number">4</span>:off  <span class="number">5</span>:off  <span class="number">6</span>:off  S:on</span><br><span class="line">atd                       <span class="number">0</span>:off  <span class="number">1</span>:off  <span class="number">2</span>:off  <span class="number">3</span>:off  <span class="number">4</span>:off  <span class="number">5</span>:off  <span class="number">6</span>:off</span><br><span class="line">binfmt-support            <span class="number">0</span>:off  <span class="number">1</span>:off  <span class="number">2</span>:off  <span class="number">3</span>:off  <span class="number">4</span>:off</span><br></pre></td></tr></table></figure>
<ul>
<li>开启自动启动服务</li>
</ul>
<p>　如果需要自启动某些服务，只需使用chkconfig 服务名 on即可，若想关闭，将on改为off<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig sshd on</span><br></pre></td></tr></table></figure></p>
<p>　在默认情况下，chkconfig会自启动2345这四个级别，如果想自定义可以加上 —level 选项。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --level <span class="number">35</span> sshd on</span><br></pre></td></tr></table></figure></p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://wangyan.org/blog/ubuntu-update-rc-d.html" target="_blank" rel="external">Ubuntu 系统 Update-rc.d 命令</a></li>
<li><a href="http://www.cnblogs.com/nerxious/archive/2013/01/18/2866548.html" target="_blank" rel="external">Linux中设置服务自启动的三种方式</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　有时候，我们希望服务器重启后能够自动的把相关的服务启动起来。在了解如何让服务自动启动前，我们需要先了解一下，linux系统的启动步骤。</p>
<h3 id="linux_系统的启动步骤">linux 系统的启动步骤</h3><blockquote>
<ol>
<li>读取 MBR 的信息，启动 Boot Manager。</li>
<li>加载系统内核，初始化硬件和设备驱动，启动 init 进程， init 进程是 Linux 的根进程，所有的系统进程都是它的子进程，也就是说 init 进程会根据配置文件继续引导过程，启动其它进程。</li>
<li>init 进程读取 /etc/inittab 文件中的信息，并进入预设的运行级别。通常情况下 /etc/rcS.d/ 目录下的启动脚本首先被执行，然后是/etc/rcN.d/ 目录。</li>
<li>根据 /etc/rcS.d/ 文件夹中对应的脚本启动 Xwindow 服务器 xorg，Xwindow 为 Linux 下的图形用户界面系统。</li>
<li>启动登录管理器，等待用户登录。</li>
</ol>
</blockquote>]]>
    
    </summary>
    
      <category term="linux" scheme="http://aikin.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[window 对象的“生命周期”事件]]></title>
    <link href="http://aikin.github.io/2014/12/07/window-life-cycle-events/"/>
    <id>http://aikin.github.io/2014/12/07/window-life-cycle-events/</id>
    <published>2014-12-07T06:42:23.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　“生命周期”事件？什么是”生命周期”事件？好吧，我只是想不到标题，于是就想了个“生命周期”名词，个人觉得比较”高大上” (*^__^*)。其实就是网页加载或关闭时触发的事件。</p>
<p>　　访问一个网页时，可能会触发 window 对象的一些事件(onload, onbeforeunload, onunload, onfocus, onblur等)。我们可以在这些事件触发时，实现一些功能，也可以根据这些事件来捕获用户的一些本地行为等等。<br><a id="more"></a><br>  <strong><em> 下面这些事件只是在 chrome 上实践过。</em></strong></p>
<h2 id="window-onload:"><strong> window.onload: </strong></h2><p>onload 事件，会在页面内容包括图片的所有元素加载完毕后才能触发。而<code>jqery</code>的  $(document).ready() 事件，是DOM结构绘制完毕后就触发。同时 window.onload 不能同时编写多个，如果有多个 window.onload 方法，只会触发其中一个。$(document).ready() 可以同时编写多个，并且都可以得到执行。</p>
<blockquote>
<p>支持该事件的 HTML 标签：<br><code>&lt;body&gt;, &lt;frame&gt;, &lt;frameset&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;link&gt;, &lt;script&gt;</code></p>
</blockquote>
<p><strong> eg-1: </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"主君，加载已经完毕!"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="window-onbeforeunload:"><strong> window.onbeforeunload: </strong></h2><p>onbeforeunload 事件，在页面刷新或关闭前触发。可以用来提示用户，是否要离开当前页面。</p>
<p><strong> eg-2: </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'你舍得离开吗？'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="window-onunload:"><strong> window.onunload: </strong></h2><p>onunload 事件，也是在页面刷新或关闭前触发。区别是 onbeforeunload 在 onunload 之前触发，也就是 onbeforeunload 可以阻止 onunload 的触发。不过这个方法在 chrome 时有效时无效。在 safari 正常使用。</p>
<p><strong> eg-3: </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"拜拜啦!"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="下面比较一下_window_和_jQuery_这些事件执行的顺序:">下面比较一下 window 和 jQuery 这些事件执行的顺序:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    post(<span class="string">"document ready!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).unload(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    post(<span class="string">"jquery unload!"</span>);</span><br><span class="line">&#125;).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    post(<span class="string">"jquery load!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    post(<span class="string">"window onload!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    post(<span class="string">"window onbeforeunload!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    post(<span class="string">"window onunload!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url    : <span class="string">"/events_test"</span>,</span><br><span class="line">        method : <span class="string">"POST"</span>,</span><br><span class="line">        data   : &#123; event: event &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行顺序:</span></span><br><span class="line"><span class="comment">// document ready!</span></span><br><span class="line"><span class="comment">// jquery load!</span></span><br><span class="line"><span class="comment">// window onload!</span></span><br><span class="line"><span class="comment">// window onbeforeunload!</span></span><br><span class="line"><span class="comment">// jquery unload!</span></span><br><span class="line"><span class="comment">// window unload!</span></span><br></pre></td></tr></table></figure>
<ul>
<li>jquery doucment ready 先触发，接着是 jquery load，然后是 window onload。</li>
<li>window beforeunload 先触发， 接着是 window onunload，然后 jquery unload。</li>
<li>window onunload 和 jquery unload 事件在 chrome 有时候会触发，有时候不会触发。</li>
</ul>
<p><strong><em> 这些事件还需要在其他浏览器实践一下。</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　“生命周期”事件？什么是”生命周期”事件？好吧，我只是想不到标题，于是就想了个“生命周期”名词，个人觉得比较”高大上” (*^__^*)。其实就是网页加载或关闭时触发的事件。</p>
<p>　　访问一个网页时，可能会触发 window 对象的一些事件(onload, onbeforeunload, onunload, onfocus, onblur等)。我们可以在这些事件触发时，实现一些功能，也可以根据这些事件来捕获用户的一些本地行为等等。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://aikin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《JavaScript 模式》养分]]></title>
    <link href="http://aikin.github.io/2014/11/20/javascript-patterns/"/>
    <id>http://aikin.github.io/2014/11/20/javascript-patterns/</id>
    <published>2014-11-20T13:09:15.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="《JavaScript_模式》作者:_Stoyan_Stefanov_译:_陈新">《JavaScript 模式》作者: Stoyan Stefanov 译: 陈新</h1><h3 id="养分">养分</h3><p><strong><em>1. 自调用构造函数: </em></strong> 实现不使用<code>new</code>关键字，构造出实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Waffle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ((!<span class="keyword">this</span> <span class="keyword">instanceof</span> Waffle)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Waffle();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.tastes = <span class="string">"yummy"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Waffle.prototype.wantAnother = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> first   = <span class="keyword">new</span> Waffle(),</span><br><span class="line">    section = Waffle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(first.tastes);     <span class="comment">// yummy</span></span><br><span class="line"><span class="built_in">console</span>.log(section.tastes);   <span class="comment">// yummy</span></span><br></pre></td></tr></table></figure>
<p><strong><em>2. 备忘模式: </em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cachekey = <span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)),</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!myFunc.cache[cachekey]) &#123;</span><br><span class="line">       result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 开销很大的操作</span></span><br><span class="line">       myFunc.cache[cachekey] = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> myFunc.cache[cachekey];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存存储</span></span><br><span class="line">myFunc.cache = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong><em>3. 配置对象模式: </em></strong>将参数列表封装到一个对象内。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPerson</span>(<span class="params">first, last, dob, gender, address</span>) </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">addPerson(<span class="string">"Bruce"</span>, <span class="string">"Wayne"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"batma"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="keyword">var</span> conf = &#123;</span><br><span class="line">    username : <span class="string">"batman"</span>,</span><br><span class="line">    first    : <span class="string">"Bruce"</span>,</span><br><span class="line">    last     : <span class="string">"Wayne"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addPerson(conf);</span><br></pre></td></tr></table></figure>
<p><strong><em>4. 通用命名空间函数: </em></strong>减少全局变量，避免命名冲突。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MYAPP = MYAPP || &#123;&#125;;</span><br><span class="line">MYAPP.namespace = <span class="function"><span class="keyword">function</span>(<span class="params">ns_string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parts  = ns_string.split(<span class="string">"."</span>),</span><br><span class="line">        parent = MYAPP;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parts[<span class="number">0</span>] === <span class="string">"MYAPP"</span>) &#123;</span><br><span class="line">        parts = parts.splice(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = parts.length; i &lt; max; i += <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> parent[parts[i]] === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">            parent[parts[i]] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        parent = parent[parts[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong><em>5. 模块模式: </em></strong>提供了结构化的思想并且有助于组织日益增长的代码。可以根据所编写的软件的需求(千变万化的需求)添加、替换或删除这些模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">MYAPP.namespace(<span class="string">"MYAPP.utilities.array"</span>).utilities.array = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 依赖</span></span><br><span class="line">    <span class="keyword">var</span> uobj = MYAPP.utilities.object,</span><br><span class="line">        ulang = MYAPP.utilities.lang,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私有属性</span></span><br><span class="line">        array_string = <span class="string">"[object Array]"</span>,</span><br><span class="line">        ops = <span class="built_in">Object</span>.prototype.toStirng;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私有方法</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// var变量定义结束</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可选的一次性初始化过程</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有 API</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        inArray: <span class="function"><span class="keyword">function</span>(<span class="params">needle, haystack</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = haystack.length; i &lt; mas; i += <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (haystack[i] === needle) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 其它操作</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        isArray: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ops.call(a) === array_string;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... 更多方法和属性</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p><strong><em>6. 创建构造函数的模块: </em></strong>使用模块模式返回一个构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">MYAPP.namespace(<span class="string">"MYAPP.utilities.Array"</span>).utilities.Array = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 依赖</span></span><br><span class="line">    <span class="keyword">var</span> uobj = MYAPP.utilities.object,</span><br><span class="line">        ulang = MYAPP.utilities.lang,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私有属性和方法</span></span><br><span class="line">        Constr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// var变量定义结束</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可选的一次性初始化过程</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有 API --- 构造函数</span></span><br><span class="line">    Constr = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements= <span class="keyword">this</span>.toArray(o);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Constr.prototype = &#123;</span><br><span class="line">        constructor: MYAPP.utilities.Array,</span><br><span class="line">        version: <span class="string">"2.0"</span>,</span><br><span class="line">        toArray: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, a = []; len = obj.length; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">                a[i] = obj[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回要分配给新命名空间的构造函数</span></span><br><span class="line">    <span class="keyword">return</span> Constr;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MYAPP.utilities.Array(obj);</span><br></pre></td></tr></table></figure>
<p><strong><em>7. 将全局变量导入到模块中: </em></strong>有助于加速即时函数中的全局符号解析的速度，因为这些导入的变量成为了该函数的局部变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYAPP.utilities.module = (<span class="function"><span class="keyword">function</span>(<span class="params">app, global</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用参数</span></span><br><span class="line">&#125;(MYAPP, <span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>
<p><strong><em>8. 沙箱模式: </em></strong>提供了一个可用于模块运行的环境，且不会对其他模块和个人沙箱造成任何影响。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sandbox 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sandbox</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将参数转换成一个数组</span></span><br><span class="line">	<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一个参数是回调函数</span></span><br><span class="line">    	callback = args.pop(),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模块可以作为一个数组传递，或作为单独的参数传递</span></span><br><span class="line">        modules = (args[<span class="number">0</span>] &amp;&amp; <span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">"string"</span>) ? args : args[<span class="number">0</span>],</span><br><span class="line">        i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保该函数作为构造函数被调用</span></span><br><span class="line">		<span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Sandbox)) &#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">new</span> Sandbox(modules, callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要向 `this` 添加的属性</span></span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 现在向该核心 `this` 对象添加模块</span></span><br><span class="line">        <span class="comment">// 不指定模块名称或指定“*”都表示“使用所有模块”</span></span><br><span class="line">        <span class="keyword">if</span> (!modules || modules === <span class="string">"*"</span>) &#123;</span><br><span class="line">        	modules = [];</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> Sandbox.modules) &#123;</span><br><span class="line">            	<span class="keyword">if</span> (Sandbox.modules.hasOwnProperty(i)) &#123;</span><br><span class="line">                	modules.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化所需的模块</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; modules.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">			Sandbox.modules[modules[i]](<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        callback(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sandbox.prototype = &#123;</span><br><span class="line">	name	: <span class="string">"My Application"</span>,</span><br><span class="line">    version : <span class="string">"1.0"</span>,</span><br><span class="line">    getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sandbox.prototype.constructor = Sandbox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加模块</span></span><br><span class="line">Sandbox.modules = &#123;&#125;;</span><br><span class="line">Sandbox.modules.dom = <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">	box.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    box.getStyle   = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    box.foo 	   = <span class="string">"bar"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sandbox.modules.event = <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 如果需要， 就访问 Sandbox 原型，如:</span></span><br><span class="line">    <span class="comment">// box.constructor.prototype.m = "mmm";</span></span><br><span class="line">	box.attachEvent  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    box.dettachEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sandbox.modules.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">	box.makeRequest  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">	box.makeResponse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ajax 和 event 模块</span></span><br><span class="line">Sandbox([<span class="string">"ajax"</span>, <span class="string">"event"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//console.log(box);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用所有可用模块</span></span><br><span class="line">Sandbox(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line">Sandbox(<span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块嵌套</span></span><br><span class="line">Sandbox(<span class="string">"dom"</span>, <span class="string">"event"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">	Sandbox(<span class="string">"ajax"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong><em>9. 圣杯继承模式</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">C, P</span>) </span>&#123;</span><br><span class="line">    	F.prototype = P.prototype;</span><br><span class="line">        C.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        C.uber = P.prototype;</span><br><span class="line">        C.prototype.constructor = C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong><em>10. 浅拷贝对象</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    child = child || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> parent) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent.hasOwnProperty(i)) &#123;</span><br><span class="line">            child[i] = parent[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dad = &#123;name: <span class="string">"Adam"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> kid = extend(dad);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(kid.name);    <span class="comment">// "Adam"</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>11. 深拷贝对象</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendDeep</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i,</span><br><span class="line">    	toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">        astr = <span class="string">"[object Array]"</span>;</span><br><span class="line"></span><br><span class="line">    child = child || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (parent.hasOwnProperty(i)) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (<span class="keyword">typeof</span> parent[i] === <span class="string">"object"</span>) &#123;</span><br><span class="line">            	child[i] = (toStr.call(parent[i]) === astr) ? [] : &#123;&#125;;</span><br><span class="line">                extendDeep(parent[i], child[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            	child[i] = parent[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dad = &#123;</span><br><span class="line">	counts: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    reads: &#123;paper: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> kid = extendDeep(dad);</span><br><span class="line"></span><br><span class="line">kid.counts.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(kid.counts.toString());    <span class="comment">// "1,2,3,4"</span></span><br><span class="line"><span class="built_in">console</span>.log(dad.counts.toString());    <span class="comment">// "1,2,3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dad.reads === kid.reads);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>12. 混入模式(mix-in)，就是将多个对象组合成一个新的对象。</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> arg,</span><br><span class="line">    	prop,</span><br><span class="line">        child = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">       	<span class="keyword">for</span> (arg = <span class="number">0</span>; arg &lt; <span class="built_in">arguments</span>.length; arg += <span class="number">1</span>) &#123;</span><br><span class="line">        	<span class="keyword">for</span> (prop <span class="keyword">in</span> <span class="built_in">arguments</span>[arg]) &#123;</span><br><span class="line">            	<span class="keyword">if</span> (<span class="built_in">arguments</span>[arg].hasOwnProperty(prop)) &#123;</span><br><span class="line">                	child[prop] = <span class="built_in">arguments</span>[arg][prop];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cake = mix(&#123;</span><br><span class="line">	&#123;eggs: <span class="number">2</span>, large: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;butter: <span class="number">1</span>, salted: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong><em>13. 单例模式(Singleton)，保证一个特定类仅有一个实例。当第二次使用这个特定类创建对象的时候，应该得到与第一次所创建对象完全相同。</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    Universe = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    Universe.prototype = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    instance = <span class="keyword">new</span> Universe();</span><br><span class="line">    instance.constructor = Universe;</span><br><span class="line"></span><br><span class="line">    instance.start_time = <span class="number">0</span>;</span><br><span class="line">    instance.bang = <span class="string">"Big"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><em>14. 迭代器模式(Iterator)，提供一个简单的接口，顺序遍历数据集合中的各个元素。</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> agg = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">    data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    length = data.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> element;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            element = data[index];</span><br><span class="line">            index = index + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> element;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        hasNext: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> index &lt; length;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置指针到初始位置</span></span><br><span class="line">        rewind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回当前元素</span></span><br><span class="line">        current: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">while</span>(agg.hasNext()) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(agg.next());   <span class="comment">// 迭代的结果是：1,3,5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">agg.rewind();   			  <span class="comment">// 重置</span></span><br><span class="line"><span class="built_in">console</span>.log(agg.current());  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><strong><em>15. 装饰者模式，可以在运行时动态添加附加功能到对象中。装饰者模式的一个比较方便的特征在于其预期行为的可定制和可配置特性。可以从仅具有一些基本功能的普通对象开始，然后从可用装饰资源池中选择需要用于增强普通对象的那些功能，并且按照顺序进行装饰，尤其是当装饰顺序很重要的时候。我感觉就是一个普通的材料通过了流水线的加工后产生了一个新的产品。也可说是一个对象进行了升级的过程，改变了自己的功能。</em></strong></p>
<ul>
<li>方法一: 让每个装饰者成为一个对象，并且该对象包含了应该被重载的方法。每个装饰者实际上继承了目前已经被前一个装饰者进行增强后的对象。每个装饰方法在 uber (被继承的对象) 上调用了同样的方法并获取其值，此外它还继续执行了一些其它操作。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.price = price || <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice();</span><br><span class="line">        price += price * <span class="number">5</span> / <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice();</span><br><span class="line">        price += price * <span class="number">7.5</span> / <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators.money = &#123;</span><br><span class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">"$"</span> + <span class="keyword">this</span>.uber.getPrice().toFixed(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators.cdn = &#123;</span><br><span class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">"CDN$"</span> + <span class="keyword">this</span>.uber.getPrice().toFixed(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    	overrides = <span class="keyword">this</span>.constructor.decorators[decorate],</span><br><span class="line">        i, newobj;</span><br><span class="line"></span><br><span class="line">	F.prototype = <span class="keyword">this</span>;</span><br><span class="line">    newobj = <span class="keyword">new</span> F();</span><br><span class="line">    newobj.uber = F.prototype;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> overrides) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (overrides.hasOwnProperty(i)) &#123;</span><br><span class="line">        	newobj[i] = overrides[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newobj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>);           <span class="comment">// 该价格为 100 美元</span></span><br><span class="line">sale = sale.decorate(<span class="string">'fedtax'</span>);     <span class="comment">// 增加联邦税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'quebec'</span>);     <span class="comment">// 增加省级税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'quebec'</span>);     <span class="comment">// 格式化为美元货币形式</span></span><br><span class="line">sale.getPrice();                    <span class="comment">// "$112.88"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方法二: 使用列表实现，将装饰者放在一个列表中，可以很容易的支持反装饰或撤销装饰(就是对装饰者列表进行 push 和 pop 的过程)。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.price = (price &gt; <span class="number">0</span>) || <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.decorators_list = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sale.decorators = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> price + price * <span class="number">5</span> / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price + price * <span class="number">7.5</span> / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.decorators.money = &#123;</span><br><span class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">"$"</span> + price.toFixed(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params">decorator</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.decorators_list.push(decorator);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> price = <span class="keyword">this</span>.price,</span><br><span class="line">    	i,</span><br><span class="line">		max = <span class="keyword">this</span>.decorators_list.length,</span><br><span class="line">		name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i += <span class="number">1</span>) &#123;</span><br><span class="line">        name = <span class="keyword">this</span>.decorators_list[i];</span><br><span class="line">        price = Sale.decorators[name].getPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>);      <span class="comment">// 该价格为 100 美元</span></span><br><span class="line">sale.decorate(<span class="string">'fedtax'</span>);       <span class="comment">// 增加联邦税</span></span><br><span class="line">sale.decorate(<span class="string">'quebec'</span>);       <span class="comment">// 增加省级税</span></span><br><span class="line">sale.decorate(<span class="string">'quebec'</span>);       <span class="comment">// 格式化为美元货币形式</span></span><br><span class="line">sale.getPrice();               <span class="comment">// "$112.88"</span></span><br></pre></td></tr></table></figure>
<p><strong><em>16. 策略模式，策略模式定义了算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。就是先抽象出相同的处理流程(算法调用的过程，或做的事情)，然后根据在流程中获取到的算法策略不同，从而使流程内具体要做的事就不同。感觉像是<code>框架(流程)，数据(需要处理的数据)，算法(算法策略)</code>模式。</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validator = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有可用的检查</span></span><br><span class="line">    types: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在当前验证会话中的错误信息</span></span><br><span class="line">    messages: [],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前需要使用的验证类型</span></span><br><span class="line">    config: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露的公开验证方法</span></span><br><span class="line">    <span class="comment">// 传入的参数是 key =&gt; value，js中的，object类型</span></span><br><span class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i, msg, type, checker, result_ok;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空所有的错误信息</span></span><br><span class="line">        <span class="keyword">this</span>.messages = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.hasOwnProperty(i)) &#123;</span><br><span class="line"></span><br><span class="line">                type = <span class="keyword">this</span>.config[i];         <span class="comment">// 根据key查询是否有存在的验证规则</span></span><br><span class="line">                checker = <span class="keyword">this</span>.types[type];   <span class="comment">// 获取验证规则的验证类</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!type) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;                <span class="comment">// 如果验证规则不存在，则不处理</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!checker) &#123;             <span class="comment">// 如果验证规则类不存在，抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> &#123;</span><br><span class="line">                        name: <span class="string">"ValidationError"</span>,</span><br><span class="line">                        message: <span class="string">"No handler to validate type "</span> + type</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                result_ok = checker.validate(data[i]); <span class="comment">// 使用查到的单个验证类进行验证</span></span><br><span class="line">                <span class="keyword">if</span> (!result_ok) &#123;</span><br><span class="line">                    msg = <span class="string">"Invalid value for *"</span> + i + <span class="string">"*, "</span> + checker.instructions;</span><br><span class="line">                    <span class="keyword">this</span>.messages.push(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hasErrors();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// helper</span></span><br><span class="line">    hasErrors: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.messages.length !== <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>使用</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="comment">// 定义types里存放的各种验证类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证给定的值是否不为空</span></span><br><span class="line">validator.types.isNonEmpty = &#123;</span><br><span class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value !== <span class="string">""</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    instructions: <span class="string">"传入的值不能为空"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证给定的值是否是数字</span></span><br><span class="line">validator.types.isNumber = &#123;</span><br><span class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">isNaN</span>(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    instructions: <span class="string">"传入的值只能是合法的数字，例如：1, 3.14 or 2010"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证给定的值是否只是字母或数字</span></span><br><span class="line">validator.types.isAlphaNum = &#123;</span><br><span class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="regexp">/[^a-z0-9]/i</span>.test(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    instructions: <span class="string">"传入的值只能保护字母和数字，不能包含特殊字符"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义需要验证的数据集合，然后还需要定义每种数据需要验证的规则类型</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    first_name: <span class="string">"Tom"</span>,</span><br><span class="line">    last_name: <span class="string">"Xu"</span>,</span><br><span class="line">    age: <span class="string">"unknown"</span>,</span><br><span class="line">    username: <span class="string">"TomXu"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">validator.config = &#123;</span><br><span class="line">    first_name: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">    age: <span class="string">'isNumber'</span>,</span><br><span class="line">    username: <span class="string">'isAlphaNum'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">validator.validate(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (validator.hasErrors()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(validator.messages.join(<span class="string">"\n"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><em>17. 外观模式，为子系统的<code>一组接口</code>提供一个一致的界面(接口)，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。感觉就是对一些接口的组合(封装)，形成一个高层接口(抽象接口)，以备外界调用。</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myEvent = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    stop: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault();       <span class="comment">// 终止事件以避免其冒泡上升到父节点</span></span><br><span class="line">        e.stopPropagation();      <span class="comment">// 阻止浏览器执行默认动作(例如, 阻止下面的链接或提交表单)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="《JavaScript_模式》作者:_Stoyan_Stefanov_译:_陈新">《JavaScript 模式》作者: Stoyan Stefanov 译: 陈新</h1><h3 id="养分">养分</h3><p><strong><em>1. 自调用构造函数: </em></strong> 实现不使用<code>new</code>关键字，构造出实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Waffle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ((!<span class="keyword">this</span> <span class="keyword">instanceof</span> Waffle)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Waffle();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.tastes = <span class="string">"yummy"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Waffle.prototype.wantAnother = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> first   = <span class="keyword">new</span> Waffle(),</span><br><span class="line">    section = Waffle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(first.tastes);     <span class="comment">// yummy</span></span><br><span class="line"><span class="built_in">console</span>.log(section.tastes);   <span class="comment">// yummy</span></span><br></pre></td></tr></table></figure>
<p><strong><em>2. 备忘模式: </em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cachekey = <span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)),</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!myFunc.cache[cachekey]) &#123;</span><br><span class="line">       result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 开销很大的操作</span></span><br><span class="line">       myFunc.cache[cachekey] = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> myFunc.cache[cachekey];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存存储</span></span><br><span class="line">myFunc.cache = &#123;&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="reading-notes" scheme="http://aikin.github.io/tags/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解 prototype 和 __proto__]]></title>
    <link href="http://aikin.github.io/2014/11/10/prototype-proto/"/>
    <id>http://aikin.github.io/2014/11/10/prototype-proto/</id>
    <published>2014-11-10T12:07:10.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="理解_prototype_和___proto__">理解 prototype 和 __proto__</h2><blockquote>
<p>　　一个对象的真正原型是被对象内部的<code>[[Prototype]]</code>属性所持有。ECMAScript 引入了标准对象原型访问器<code>Object.getPrototype(object)</code>，到目前为止只有 Firefox 和 Chrome 实现了此访问器。除了IE，其他的浏览器支持非标准的访问器<code>__proto__</code></p>
</blockquote>
<a id="more"></a>
<h3 id="什么是_prototype_和___proto___?">什么是 <em><code>prototype</code></em> 和 <em><code>__proto__</code></em> ?</h3><p>　　<strong><code>prototype</code></strong> 为构造器(构造函数)的原型，是一个 javascript 的原生对象，它是通过调用构造函数而创建的那个对象实例的原型对象。 其他的对象可以通过他实现属性继承。</p>
<p>　　<strong><code>__proto__</code></strong> 是对象的内部原型，所有对象的<code>__proto__</code>都指向该对象的构造器的<code>prototype</code>。</p>
<p>　　在调用对象的方法时，会通过该对象<code>__proto__</code>在原型链中查找。而构造器的<code>prototype</code> 会用于创建通过<code>new</code>关键字创建的对象的<code>__proto__</code>。</p>
<ul>
<li><strong><em>所有构造器(函数)的<code>__proto__</code>都指向<code>Function.prototype</code></em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>.__proto__  === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.__proto__    === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">RegExp</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Error</span>.__proto__    === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Date</span>.__proto__     === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>注意: JavaScript中有内置(build-in)构造器/对象共计12个（ES5中新加了JSON），这里列举了可访问的8个构造器。剩下如<code>Global</code>不能直接访问，<code>Arguments</code>仅在函数调用时由JS引擎创建，<code>Math、JSON</code>是以对象形式存在的，无需<code>new</code>。它们的<code>__proto__</code>是<code>Object.prototype</code>。如下:</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.__proto__ === <span class="built_in">Object</span>.prototype;  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">JSON</span>.__proto__ === <span class="built_in">Object</span>.prototype;  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>以上介绍都是原生的 javascript 的构造器(函数)，当然自定义的构造器也满足:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> Man = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Person.__proto__ === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br><span class="line">Man.__proto__    === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://aikin-blog-images.qiniudn.com/js-function-prototype.png" alt="构造函数原型链图"></p>
<ul>
<li><strong><em>所有对象的<code>__proto__</code>都指向其构造函数的<code>prototype</code></em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj  = &#123;name: <span class="string">'aikin'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> arr  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> reg  = <span class="regexp">/hello/g</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"><span class="keyword">var</span> err  = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'exception'</span>);</span><br><span class="line">obj.__proto__  === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br><span class="line">arr.__proto__  === <span class="built_in">Array</span>.prototype;  <span class="comment">// true</span></span><br><span class="line">reg.__proto__  === <span class="built_in">RegExp</span>.prototype; <span class="comment">// true</span></span><br><span class="line">date.__proto__ === <span class="built_in">Date</span>.prototype;  <span class="comment">// true</span></span><br><span class="line">err.__proto__  === <span class="built_in">Error</span>.prototype;  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>自定义构造函数的实例对象也是如此:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'aikin'</span>);</span><br><span class="line">person.__proto__ === Person.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://aikin-blog-images.qiniudn.com/js-object-prototype.png" alt="对象原型链图"></p>
<h3 id="new_关键字做了什么?"><code>new</code> 关键字做了什么?</h3><blockquote>
<p> new 运算符接受一个函数 F 及其参数：<code>new F(arguments...)</code>。这一过程分为三步：</p>
<ol>
<li>创建类的实例。这步是把一个空的对象的<code>__proto__</code>属性设置为<code>F.prototype</code>。</li>
<li>初始化实例。函数 F 被传入参数并调用，关键字<code>this</code>指向该实例。</li>
<li>返回实例 当然你也可以<code>return</code>自定义的对象。</li>
</ol>
</blockquote>
<ul>
<li>new 函数的伪实现:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ins = &#123; <span class="string">'__proto__'</span>: f.prototype &#125;; <span class="comment">/*第一步*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        f.apply(ins, <span class="built_in">arguments</span>);            <span class="comment">/*第二步*/</span></span><br><span class="line">        <span class="keyword">return</span> ins;                         <span class="comment">/*第三步*/</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="干货呈上(来几道_quiz_吧)">干货呈上(来几道 quiz 吧)</h3><ul>
<li><strong> quiz-1 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'aikin'</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">'ulaijn'</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me.name);  <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-2 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'aikin'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ulaijn'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me.name);  <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>quiz-1</code>和<code>quiz-2</code>运行结果分别是:<code>ulaijn</code>和<code>aikin</code>。这两个测试题主要考察的是对<code>new</code>关键字的理解。</li>
<li>在<code>quiz-1</code>中，在调用<code>new Person()</code>时，<code>Person</code>构造函数内的<code>this</code>指向是<code>Person</code>的实例，由于<code>Person</code>构造函数返回了一个对象类型的<code>{ name: &#39;ulaijn&#39; }</code>，导致<code>new Person()</code>返回的不是<code>Person</code>构造函数的实例，而是<code>{name: ulaijn}</code>，因为只要当构造函数自定义<code>return</code>的值是对象类型(不为 <em><code>null</code></em>)时，这样将导致使用<code>new</code>关键字调用构造函数后的返回值，替换掉本该返回的构造函数的实例，所以这里的<code>me</code>为<code>{name: &#39;ulaijn&#39;}</code>。</li>
<li>在<code>quiz-2</code>中，<code>Person</code>构造函数内的<code>this</code>，在调用<code>new Person()</code>时和<code>quiz-1</code>一样都是指向<code>Person</code>的实例，但是由于<code>Person</code>构造函数返回了一个不是对象类型，而是字符串类型的<code>ulaijn</code>，导致<code>new Person()</code>生成的实例无法被替换，所以<code>me.name</code>为<code>aikin</code>。</li>
</ul>
<ul>
<li><strong> quiz-3 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person,</span><br><span class="line">    name : <span class="string">'aikin'</span>,</span><br><span class="line">    age : <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aMe = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> bMe = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">aMe.name = <span class="string">'luna'</span>;</span><br><span class="line">bMe.name = <span class="string">'tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aMe.name);  <span class="comment">// ?</span></span><br><span class="line"><span class="built_in">console</span>.log(bMe.name);  <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-4 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person,</span><br><span class="line">    info : &#123;</span><br><span class="line">        name : <span class="string">'aikin'</span>,</span><br><span class="line">        age  : <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aMe = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> bMe = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">aMe.info.name = <span class="string">'luna'</span>;</span><br><span class="line">bMe.info.name = <span class="string">'tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aMe.info.name);  <span class="comment">// ?</span></span><br><span class="line"><span class="built_in">console</span>.log(bMe.info.name);  <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-5 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.info = &#123;</span><br><span class="line">        name : <span class="string">'aikin'</span>,</span><br><span class="line">        age  : <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aMe = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> bMe = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">aMe.info.name = <span class="string">'luna'</span>;</span><br><span class="line">bMe.info.name = <span class="string">'tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aMe.info.name);  <span class="comment">// ?</span></span><br><span class="line"><span class="built_in">console</span>.log(bMe.info.name);  <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-6 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.info = &#123;</span><br><span class="line">        name : <span class="string">'aikin'</span>,</span><br><span class="line">        age  : <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person,</span><br><span class="line">    info : &#123;</span><br><span class="line">        name : <span class="string">'aikin'</span>,</span><br><span class="line">        age  : <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aMe = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> bMe = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">aMe.info.name = <span class="string">'luna'</span>;</span><br><span class="line">bMe.info.name = <span class="string">'tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aMe.info.name);  <span class="comment">// ?</span></span><br><span class="line"><span class="built_in">console</span>.log(bMe.info.name);  <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>
<ul>
<li><em>quiz-3</em>、<em>quiz-5</em> 和 <em>quiz-6</em> 的运行结果是: <code>luna</code>和<code>tom</code>，而 <em>quiz-4</em> 的运行结果是: <code>tom</code>和<code>tom</code>。这四道题主要考察的是对<code>prototype</code>理解。</li>
<li><em>quiz-3</em> 中<code>aMe.name = &#39;luna&#39;</code>是赋值的过程，会在<code>aMe</code>中创建<code>name</code>属性，不会修改<code>aMe.__proto__.name</code>，当然<code>bMe</code>也一样。</li>
<li>对于 <em>quiz-4</em> 来说，<code>aMe.info.name = &#39;luna&#39;</code>是在对<code>aMe.info</code>赋值的过程，所以要先查找出<code>aMe.info</code>对象，因为<code>aMe</code>对象自己没有<code>info</code>属性，所以会从<code>aMe.__proto__</code> 获取到<code>info</code>对象，并修改掉<code>info</code>的<code>name</code>属性。而<code>bMe.info.name = tom</code>也是这个过程，由于<code>aMe.__proto__ === bMe.__proto__</code>，所以<code>bMe.info.name = tom</code>执行后会修改掉<code>bMe.__proto__.info.name</code>，从而导致<code>aMe.info.name</code>也被修改成<code>tom</code>。</li>
<li><em>quiz-5</em> 和 <em>quiz-6</em> 是考察对原型链查找的规则理解。当实例对象自己有相应的属性，就不会去获取原型链上的属性。就像 <em>quiz-6</em> 里面的<code>aMe</code>实例对象，<code>aMe</code>对象拥有<code>info</code>属性，同时在<code>aMe.__proto__</code>也用拥有<code>info</code>属性，但是<code>aMe.info.name</code>，不会获取<code>aMe.__proto__.info.name</code>，因为在原型链获取相应对象或者函数时，会从对象(实例)本身开始沿着原型链向上查找，只要找到了，就好停止继续查找。</li>
</ul>
<p><strong><em> 使用 <code>console.dir(Function)</code> 打印出你的原型链。</em></strong></p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://www.cnblogs.com/snandy/archive/2012/09/01/2664134.html" target="_blank" rel="external">JavaScript中<strong>proto</strong>与prototype的关系</a></li>
<li><a href="http://blog.jobbole.com/9648/" target="_blank" rel="external">理解JavaScript原型</a></li>
<li><a href="http://www.cnblogs.com/rexy/p/4086186.html" target="_blank" rel="external">这些javascript面试题，你做对了几道？</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="理解_prototype_和___proto__">理解 prototype 和 __proto__</h2><blockquote>
<p>　　一个对象的真正原型是被对象内部的<code>[[Prototype]]</code>属性所持有。ECMAScript 引入了标准对象原型访问器<code>Object.getPrototype(object)</code>，到目前为止只有 Firefox 和 Chrome 实现了此访问器。除了IE，其他的浏览器支持非标准的访问器<code>__proto__</code></p>
</blockquote>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://aikin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Star Repositories On GitHub]]></title>
    <link href="http://aikin.github.io/2014/11/08/star-repos/"/>
    <id>http://aikin.github.io/2014/11/08/star-repos/</id>
    <published>2014-11-08T12:16:35.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　这里记录的是笔者在 <a href="https://github.com/" target="_blank" rel="external">github</a>上 Star 的库，持续更新。</p>
<h2 id="JS_类">JS 类</h2><ul>
<li><a href="https://github.com/getify/LABjs.git" target="_blank" rel="external">LABjs</a></li>
<li><a href="https://github.com/jrburke/requirejs.git" target="_blank" rel="external">requirejs</a></li>
<li><a href="https://github.com/seajs/seajs.git" target="_blank" rel="external">seajs</a><blockquote>
<ul>
<li>LABjs 是一个文件加载器, 核心价值是性能优化</li>
<li>RequireJS 和 SeaJS 则是模块加载器，倡导的是一种模块化开发理念，核心价值是        让 JavaScript 的模块化开发变得更简单自然。</li>
<li>模块加载器一般可降级为文件加载器用，因此使用 RequireJS 和 SeaJS，也可以达        成 LABjs 的性能优化目的。</li>
<li>RequireJS 遵循的是 AMD（异步模块定义）规范，SeaJS 遵循的是 CMD （通用模            块定义）规范。</li>
</ul>
</blockquote>
</li>
</ul>
<a id="more"></a>
<ul>
<li><a href="https://github.com/cujojs/curl.git" target="_blank" rel="external">curl</a> 异步模块加载器，符合AMD规范</li>
<li><a href="https://github.com/ariya/phantomjs.git" target="_blank" rel="external">phantomjs</a><blockquote>
<p>页面自动化测试：希望自动的登陆网站并做一些操作然后检查结果是否正常<br>网页监控：希望定期打开页面，检查网站是否能正常加载，加载结果是否符合预期。加载速度如何等<br>网络爬虫：获取页面中使用js来下载和渲染信息，或者是获取链接处使用js来跳转后的真实地址</p>
</blockquote>
</li>
</ul>
<ul>
<li><a href="https://github.com/cocos2d/cocos2d-html5.git" target="_blank" rel="external">cocos2d-html5</a> cocos2d for Web Browsers</li>
<li><a href="https://github.com/meteor/meteor.git" target="_blank" rel="external">meteor</a> 非常简单的用于构建现代web应用程序的环境。页面操作，直接同步到后台。同时更新其他访问者。</li>
<li><a href="https://github.com/tastejs/todomvc.git" target="_blank" rel="external">todomvc</a> Helping you select an MV* framework</li>
<li><a href="https://github.com/sintaxi/harp.git" target="_blank" rel="external">harp</a> static web server that also serves Jade, Markdown, EJS, Less, Stylus, Sass, and CoffeeScript as HTML, CSS, and JavaScript without any configuration.</li>
</ul>
<ul>
<li><a href="https://github.com/aFarkas/lazysizes.git" target="_blank" rel="external">lazysizes</a> 高性能实现懒加载 images scripts iframes等 从不可见到可见的变化展示</li>
<li><a href="https://github.com/HubSpot/offline.git" target="_blank" rel="external">offline</a> 自动弹出提示框当用户网络连接断开时</li>
<li><a href="https://github.com/evilstreak/markdown-js.git" target="_blank" rel="external">markdown-js</a> 解析 md</li>
<li><a href="https://github.com/coreyti/showdown.git" target="_blank" rel="external">showdown</a> 处理 md</li>
<li><a href="https://github.com/sebmck/6to5.git" target="_blank" rel="external">6to5</a> turns ES6 code into vanilla ES5</li>
<li><a href="https://github.com/madrobby/zepto.git" target="_blank" rel="external">zepto</a> 像 jquery 一样的js库</li>
<li><a href="https://github.com/paulkinzett/toolbar.git" target="_blank" rel="external">toolbar</a> jquery工具箱插件</li>
<li><a href="https://github.com/desandro/masonry.git" target="_blank" rel="external">masonry</a> 瀑布流网格布局</li>
<li><a href="https://github.com/zeroclipboard/zeroclipboard.git" target="_blank" rel="external">zeroclipboard</a> 剪切板</li>
<li><a href="https://github.com/blasten/turn.js.git" target="_blank" rel="external">turn.js</a> HTML5 实现书本的翻页效果</li>
<li><a href="https://github.com/videojs/video.js.git" target="_blank" rel="external">video.js</a> open source  custom HTML5 &amp; Flash video player</li>
<li><a href="https://github.com/hammerjs/hammer.js.git" target="_blank" rel="external">hammer.js</a> 多种手势  multi-touch gestures</li>
<li><a href="https://github.com/hakimel/reveal.js.git" target="_blank" rel="external">reveal.js</a> 多媒体html 展示框架</li>
<li><a href="https://github.com/h5bp/html5-boilerplate.git" target="_blank" rel="external">html5-boilerplate</a> 一个HTML/CSS/JS模板（技巧集合），包含了HTML5以及许多其他最佳实践</li>
<li><a href="https://github.com/mbostock/d3.git" target="_blank" rel="external">d3</a> 针对HTML和SVG的JavaScript可视化库</li>
<li><a href="https://github.com/mrdoob/three.js.git" target="_blank" rel="external">three.js </a> js 3d 库</li>
<li><a href="https://github.com/jquery/jquery-mobile.git" target="_blank" rel="external">jquery-mobile</a> jquery移动版</li>
<li><a href="https://github.com/chriso/validator.js.git" target="_blank" rel="external">validator.js</a> 对数据验证处理， 比例输入的 email 是否规范</li>
<li><a href="https://github.com/isagalaev/highlight.js.git" target="_blank" rel="external">highlight.js</a> 代码高亮</li>
<li><a href="https://github.com/bartaz/impress.js.git" target="_blank" rel="external">impress.js</a> 令人眩目的内容展示效果</li>
<li><a href="https://github.com/Prinzhorn/skrollr.git" target="_blank" rel="external">skrollr</a> 视差滚动js插件,随着滚动来改变Html展示</li>
<li><a href="https://github.com/rsms/node-imagemagick.git" target="_blank" rel="external">imagemagick</a> node第三方库, 关于对图片的处理</li>
<li><a href="https://github.com/shutterstock/rickshaw.git" target="_blank" rel="external">rickshaw</a> 用于创建交互式的实时图形JavaScript工具包</li>
<li><a href="https://github.com/fex-team/fis.git" target="_blank" rel="external">fis</a> FIS是专为解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题的工具框架。</li>
<li><a href="https://github.com/ariya/esprima.git" target="_blank" rel="external">esprima</a> js 语法树分析</li>
<li><a href="https://github.com/globocom/clappr.git" target="_blank" rel="external">clappr</a> 一个可扩展的网页媒体播放器</li>
<li><a href="https://github.com/knsv/mermaid.git" target="_blank" rel="external">mermaid</a> 通过用类似于 markdown 一样的方式，将规定格式的文本内容，生成图表和流程图的工具。</li>
<li><a href="https://github.com/WickyNilliams/headroom.js.git" target="_blank" rel="external">headroom.js</a> 隐藏 Header</li>
<li><a href="https://github.com/wycats/handlebars.js.git" target="_blank" rel="external">handlebars.js</a> JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。</li>
<li><a href="https://github.com/RubaXa/Sortable.git" target="_blank" rel="external">Sortable</a> 可以在现代浏览器和触屏设备上重排列表内容的简约 js 库。</li>
</ul>
<ul>
<li><a href="https://github.com/ciaoca/cxSelect.git" target="_blank" rel="external">jQuery cxSelect</a> 多级联动下拉菜单</li>
<li><a href="https://github.com/nathansearles/Slides.git" target="_blank" rel="external">Slides</a> 图片轮播滑动</li>
<li><a href="https://github.com/ded/klass.git" target="_blank" rel="external">klass</a> 一个实用工具来创建富有表现力的JavaScript类</li>
<li><a href="https://github.com/reworkcss/css.git" target="_blank" rel="external">css</a> css文件解析工具</li>
<li><a href="https://github.com/chjj/term.js.git" target="_blank" rel="external">term.js</a> 一个用JS写的终端</li>
<li><a href="https://github.com/chjj/tty.js.git" target="_blank" rel="external">tty.js</a> 浏览器上的终端， 使用node/express/socket.io</li>
<li><a href="https://github.com/fex-team/webuploader.git" target="_blank" rel="external">webuploader</a> WebUploader是一个简单的以HTML5为主，FLASH为辅的现代文件上传组件。</li>
<li><a href="https://github.com/derobins/wmd.git" target="_blank" rel="external">wmd</a> markdown 编辑器 用于评论</li>
<li><a href="https://github.com/vakata/jstree.git" target="_blank" rel="external">jstree</a> js 生成目录树</li>
<li><a href="https://github.com/codemirror/CodeMirror.git" target="_blank" rel="external">CodeMirror</a> 浏览器代码编辑器</li>
<li><a href="https://github.com/Reactive-Extensions/RxJS.git" target="_blank" rel="external">RxJS</a> 反应性扩展</li>
<li><a href="https://github.com/addyosmani/basket.js.git" target="_blank" rel="external">basket.js</a>  a script and resource loader for caching and loading scripts using localStorage</li>
<li><a href="https://github.com/imakewebthings/deck.js.git" target="_blank" rel="external">deck.js</a> 现代化 html 演示文稿</li>
<li><a href="https://github.com/medialize/URI.js.git" target="_blank" rel="external">URI.js</a> url 处理</li>
<li><a href="https://github.com/defunkt/jquery-pjax.git" target="_blank" rel="external">jquery-pjax</a> 局部刷新页面，同时修改 url</li>
<li><a href="https://github.com/rails/turbolinks.git" target="_blank" rel="external">turbolinks</a> 使加载的 web 的 links 可以缓存。代替让浏览器重新编译每个页面之间的JavaScript和CSS改变,它使当前页面的处于活跃着,只替换 body 和 title。</li>
</ul>
<ul>
<li><a href="https://github.com/tnwinc/htmldiff.js.git" target="_blank" rel="external">htmldiff.js</a> HTML Diffing in JavaScript</li>
<li><a href="https://github.com/HumbleSoftware/js-imagediff.git" target="_blank" rel="external">js-imagediff</a> 比较两张图片的不相同地方。</li>
<li><a href="https://github.com/isaacs/minimatch.git" target="_blank" rel="external">minimatch</a> 小型的匹配器</li>
<li><a href="https://github.com/dominictarr/adiff.git" target="_blank" rel="external">adiff</a> 可以数组进行区别和修补操作</li>
<li><a href="https://github.com/timsavery/node-diff.git" target="_blank" rel="external">node-diff</a> 比较两个字符串的不同</li>
<li><a href="https://github.com/NV/objectDiff.js.git" target="_blank" rel="external">objectDiff.js</a> 判断两个对象的不同</li>
<li><a href="https://github.com/austincheney/jsdifflib.git" target="_blank" rel="external">jsdifflib</a> 判断两个文本的不同，同时生成相应的HTML页面</li>
<li><a href="https://github.com/benjamine/jsondiffpatch.git" target="_blank" rel="external">jsondiffpatch</a> 区别和修补 js 对象</li>
<li><a href="https://github.com/austincheney/Pretty-Diff.git" target="_blank" rel="external">Pretty-Diff</a> 比较代码的不同</li>
<li><a href="https://github.com/substack/difflet.git" target="_blank" rel="external">difflet</a> 比较js对象，展示丰富多彩的结果</li>
<li><a href="https://github.com/kpdecker/firediff.git" target="_blank" rel="external">firediff</a> 追踪 DOM和CSS的改变</li>
<li><a href="https://github.com/kpdecker/jsdiff.git" target="_blank" rel="external">jsdiff</a> 可以比较单词 字母 和行的不同</li>
<li><a href="https://github.com/JexCheng/regulex.git" target="_blank" rel="external">regulex</a> JavaScript正则表达式可视化工具</li>
<li><a href="https://github.com/javallone/regexper.git" target="_blank" rel="external">regexper</a> JavaScript正则表达式可视化工具</li>
</ul>
<h4 id="Node_类"><strong><em>Node 类</em></strong></h4><ul>
<li><a href="https://github.com/tj/node-migrate.git" target="_blank" rel="external">node-migrate</a></li>
<li><a href="https://github.com/coolaj86/node-walk.git" target="_blank" rel="external">node-walk</a> 遍历文件夹 返回文件夹下文件的路径</li>
<li><a href="https://github.com/libgit2/node-gitteh.git" target="_blank" rel="external">node-gitteh</a> 使用 github api 获取git repo 的数据</li>
<li><a href="https://github.com/nodegit/nodegit.git" target="_blank" rel="external">nodegit</a> 调用 git api</li>
<li><a href="https://github.com/felixge/node-mysql.git" target="_blank" rel="external">node-mysql</a> 纯 js 实现的 mysql 客户端代理</li>
<li><a href="https://github.com/senchalabs/connect.git" target="_blank" rel="external">connect</a> 一个可以扩展的 HTTP 服务器框架</li>
<li><a href="https://github.com/cujojs/when.git" target="_blank" rel="external">when</a> node promise</li>
<li><a href="https://github.com/caolan/async.git" target="_blank" rel="external">async</a> 异步处理工具</li>
<li><a href="https://github.com/petkaantonov/bluebird.git" target="_blank" rel="external">bluebird</a> 创新的promise</li>
<li><a href="https://github.com/kriskowal/q.git" target="_blank" rel="external">q</a> js  promise</li>
<li><a href="https://github.com/then/promise.git" target="_blank" rel="external">promise</a> 基础 promise 实现</li>
<li><a href="https://github.com/dtao/lazy.js.git" target="_blank" rel="external">lazy.js</a>like underscore lodash</li>
<li><a href="https://github.com/facebook/immutable-js.git" target="_blank" rel="external">immutable-js</a> 不可变数据集合</li>
<li><a href="https://github.com/remy/nodemon.git" target="_blank" rel="external">nodemon</a>  监听node工程下文件，当改动是重启服务器</li>
<li><a href="https://github.com/node-webot/wechat.git" target="_blank" rel="external">wechat</a> 微信公共平台消息接口服务中间件</li>
<li><a href="https://github.com/sindresorhus/pageres.git" target="_blank" rel="external">pageres</a> 响应网站截图</li>
<li><a href="https://github.com/ncb000gt/node.bcrypt.js.git" target="_blank" rel="external">node.bcrypt.js</a> hash 加密密码</li>
<li><a href="https://github.com/Automattic/node-canvas.git" target="_blank" rel="external">node-canvas</a> 将图片转化成 base64. 可加水印，可验证码，可裁剪图片</li>
<li><a href="https://github.com/duojs/duo.git" target="_blank" rel="external">duo</a> 下一代包管理器，混合了 Component, Browserify and Go 。</li>
<li><a href="https://github.com/broofa/node-uuid.git" target="_blank" rel="external">node-uuid</a> Simple, fast generation of RFC4122 UUIDS.</li>
<li><a href="https://github.com/rogerwang/node-webkit.git" target="_blank" rel="external">node-webkit</a><blockquote>
<p>node-webkit是一个基于chromium和node.js实现的应用程序运行时环境，也即是说我们可以通过HTML，CSS，JavaScript实现一个本地化的应用程序。整个项目最具创意的部分就是将node.js整合进来，使得应用开发者能够直接在DOM里使用node.js模块，大大增强了Web端JavaScript的能力。该项目是由Intel开源项目中心开发与维护的。</p>
</blockquote>
</li>
</ul>
<ul>
<li><a href="https://github.com/GitbookIO/gitbook.git" target="_blank" rel="external">gitbook</a> 使用 git/github 和 markdown 来生产books</li>
<li><a href="https://github.com/mcavage/node-restify.git" target="_blank" rel="external">node-restify</a> resetful apis</li>
<li><a href="https://github.com/substack/node-browserify.git" target="_blank" rel="external">node-browserify</a> 将服务器的 node 包转化到浏览器也可以用</li>
<li><a href="https://github.com/mikeal/request.git" target="_blank" rel="external">request</a> http 请求客户端</li>
<li><a href="https://github.com/nodejitsu/forever.git" target="_blank" rel="external">forever</a> node 进程出错终止后，可以自动启动</li>
<li><a href="https://github.com/node-gh/gh.git" target="_blank" rel="external">gh</a> 简化终端 git 命令</li>
<li><a href="https://github.com/michael/github.git" target="_blank" rel="external">github</a> 一个小的更高层次的关于 github api 的封装</li>
<li><a href="https://github.com/shama/gaze.git" target="_blank" rel="external">gaze</a> 用于监听文件变化</li>
<li><a href="https://github.com/isaacs/minimatch.git" target="_blank" rel="external">minimatch</a> 用于RegExp路径的匹配</li>
<li><a href="https://github.com/cheeriojs/cheerio.git" target="_blank" rel="external">cheerio</a> 服务器版的 jQuery</li>
<li><a href="https://github.com/Marak/faker.js.git" target="_blank" rel="external">faker.js</a> 生成大量的 fake 数据</li>
<li><a href="https://github.com/felixge/node-form-data.git" target="_blank" rel="external">node-form-data</a> 上传文件</li>
<li><a href="https://github.com/tj/dox.git" target="_blank" rel="external">dox</a> js 文档生成器</li>
<li><a href="https://github.com/JacksonTian/eventproxy.git" target="_blank" rel="external">eventproxy</a> 事件代理</li>
<li><a href="https://github.com/ciaranj/node-oauth.git" target="_blank" rel="external">node-oauth</a> 验证第三方</li>
<li><a href="https://github.com/Unitech/PM2.git" target="_blank" rel="external">PM2</a> 生成环境下 管理 node application</li>
<li><a href="https://github.com/3rd-Eden/useragent.git" target="_blank" rel="external">useragent</a> high performance user agent parser for Node.js</li>
<li><a href="https://github.com/biggora/express-useragent.git" target="_blank" rel="external">express-useragent</a> nodejs user-agent middleware</li>
<li><a href="https://github.com/tobie/ua-parser.git" target="_blank" rel="external">ua-parser</a> A multi-language port of Browserscope’s user agent parser</li>
<li><a href="https://github.com/pa7/nude.js.git" target="_blank" rel="external">nude.js</a> Nudity detection with JavaScript and HTMLCanvas</li>
<li><a href="https://github.com/node-inspector/node-inspector.git" target="_blank" rel="external">node-inspector</a> Node.js debugger based on Blink Developer Tools</li>
<li><a href="https://github.com/jhnns/rewire.git" target="_blank" rel="external">rewire</a> 单元测试时可以使用它来给 modules 添加 setter和getter 方法，达到 mock功能。</li>
<li><a href="https://github.com/ConradIrwin/async-profile.git" target="_blank" rel="external">async-profile</a> 分析 node 应用所占用的 CPU</li>
<li><a href="https://github.com/gotwarlost/istanbul.git" target="_blank" rel="external">istanbul</a> 计算测试覆盖率</li>
<li><a href="https://github.com/tj/commander.js.git" target="_blank" rel="external">commander.js</a> node.js command-line interfaces made easy</li>
<li><a href="https://github.com/visionmedia/debug.git" target="_blank" rel="external">debug</a> tiny node.js &amp; browser debugging utility for your libraries and applications</li>
<li><a href="https://github.com/harthur/nomnom.git" target="_blank" rel="external">nomnom</a> Option parser for node with generated usage and commands</li>
<li><a href="https://github.com/arturadib/shelljs.git" target="_blank" rel="external">shelljs</a> Portable Unix shell commands for Node.js</li>
</ul>
<h4 id="Node_Web_框架"><strong><em>Node Web 框架</em></strong></h4><ul>
<li><a href="https://github.com/balderdashy/sails.git" target="_blank" rel="external">sails</a> node 实时 MVC框架</li>
<li><a href="https://github.com/jaredhanson/locomotive.git" target="_blank" rel="external">locomotive</a> MVC框架</li>
<li><a href="https://github.com/flatiron/flatiron.git" target="_blank" rel="external">flatiron</a> nodejs和浏览器 框架组件</li>
<li><a href="https://github.com/techpines/express.io.git" target="_blank" rel="external">express.io</a> 实时 web 框架</li>
<li><a href="https://github.com/socketstream/socketstream.git" target="_blank" rel="external">socketstream</a> 一个实时Web应用程序的框架</li>
<li><a href="https://github.com/geddy/geddy.git" target="_blank" rel="external">geddy</a> 一个简单的、结构化的web框架</li>
<li><a href="https://github.com/totaljs/framework.git" target="_blank" rel="external">total.js</a> web应用程序框架,用于创建一个丰富的web网站和web服务。（有很多例子）</li>
<li><a href="https://github.com/koajs/koa.git" target="_blank" rel="external">koa</a> Express 原班人马打造的 koa，致力于成为一个更小、更健壮、更富有表现力的 Web 框架。</li>
<li><a href="https://github.com/krakenjs/kraken-js.git" target="_blank" rel="external">kraken-js</a> express 中间插件 控制安全 周期事件</li>
<li><a href="https://github.com/derbyjs/derby.git" target="_blank" rel="external">derby</a> MVC framework  run in both Node.js and browsers.</li>
<li><a href="https://github.com/robrighter/node-boilerplate.git" target="_blank" rel="external">node-boilerplate</a> nodejs website with express and socket.IO</li>
</ul>
<h4 id="HTML5_web_app_类"><strong><em>HTML5 web app 类</em></strong></h4><ul>
<li><p><a href="https://github.com/Modernizr/Modernizr.git" target="_blank" rel="external">Modernizr</a>  一个用来检测浏览器功能支持情况的 JavaScript 库</p>
<blockquote>
<p>目前，通过检验浏览器对一系列测试的处理情况，Modernizr 可以检测18项 CSS3 功能以及40多项关于HTML5 的功能。 它比传统检测浏览器名称（浏览器嗅探）的方式更为可靠。 一整套测试的执行时间仅需几微秒。</p>
</blockquote>
</li>
<li><p><a href="https://github.com/brunch/brunch.git" target="_blank" rel="external">brunch</a> 一个超快的HTML5构建工具</p>
<blockquote>
<ul>
<li>编译你的脚本，模板，样式，链接它们，</li>
<li>将脚本和模板封装进common.js/AMD模块里，链接脚本和样式，</li>
<li>为链接文件生成源地图，复制资源和静态文件，</li>
<li>通过缩减代码和优化图片来收缩输出，看管你的文件更改，</li>
<li>并且通过控制台和系统提示通知你错误。</li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li><a href="https://github.com/montagejs/montage.git" target="_blank" rel="external">montage</a> 构建高可扩展性和可维护性的 HTML5 应用</li>
<li><a href="https://github.com/driftyco/ionic.git" target="_blank" rel="external">ionic</a> 手机端的框架，使用HTML5, CSS3(sass)和JavaScript(angular)做出原生应用</li>
<li><a href="https://github.com/verekia/initializr.git" target="_blank" rel="external">initializr</a> HTML5 Boilerplate Custom Builder running on Google App Engine (Java)</li>
<li><a href="https://github.com/sproutcore/sproutcore.git" target="_blank" rel="external">sproutcore</a> JS-MVC framework for building blazing-fast, native-caliber web applications.</li>
</ul>
<h4 id="Angularjs_类"><strong><em>Angularjs 类</em></strong></h4><ul>
<li><a href="https://github.com/joshdmiller/angular-placeholders.git" target="_blank" rel="external">angular-placeholders</a> 图片和文字占位符</li>
<li><a href="https://github.com/passy/angular-masonry.git" target="_blank" rel="external">angular-masonry</a> 瀑布流实现</li>
<li><a href="https://github.com/akoenig/angular-deckgrid.git" target="_blank" rel="external">angular-deckgrid</a>轻量级的网格图片布局和瀑布流布局</li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning.git" target="_blank" rel="external">AngularJS-Learning</a>   angularjs 学习资料库</li>
<li><a href="https://github.com/sroze/ngInfiniteScroll.git" target="_blank" rel="external">ngInfiniteScroll</a> angular 下拉加载更多</li>
<li><a href="https://github.com/kamilkp/angular-vs-repeat.git" target="_blank" rel="external">angular-vs-repeat</a> 替换 ng-repeat 减少 digest</li>
<li><a href="https://github.com/davidchang/ngReact.git" target="_blank" rel="external">ngReact</a> 替换 ng-repeat 提高 render 速度</li>
<li><a href="https://github.com/Pasvaz/bindonce.git" target="_blank" rel="external">Bindonce</a> 高性能 angular 数据绑定</li>
</ul>
<h4 id="js_前端框架"><strong><em>js 前端框架</em></strong></h4><ul>
<li><a href="https://github.com/jashkenas/backbone.git" target="_blank" rel="external">backbone</a></li>
<li><a href="https://github.com/emberjs/ember.js.git" target="_blank" rel="external">ember.js</a> 是个js MVC开发框架</li>
<li><a href="https://github.com/knockout/knockout.git" target="_blank" rel="external">knockout</a> 现代多样化的MVC framework</li>
</ul>
<h4 id="yeoman_generator"><strong><em>yeoman generator</em></strong></h4><ul>
<li><a href="https://github.com/yeoman/generator-ember.git" target="_blank" rel="external">generator-ember</a></li>
<li><a href="https://github.com/yeoman/generator-backbone.git" target="_blank" rel="external">generator-backbone</a></li>
<li><a href="https://github.com/jhipster/generator-jhipster.git" target="_blank" rel="external">generator-jhipster</a></li>
<li><a href="https://github.com/diegonetto/generator-ionic.git" target="_blank" rel="external">generator-ionic</a></li>
</ul>
<h4 id="游戏引擎"><strong><em>游戏引擎</em></strong></h4><ul>
<li><a href="https://github.com/GoodBoyDigital/pixi.js.git" target="_blank" rel="external">pixi.js</a> html5 2d 游戏引擎</li>
<li><a href="https://github.com/photonstorm/phaser.git" target="_blank" rel="external">phaser</a> 2d 游戏框架可以让html5 游戏可以在浏览器 手机浏览器 支持 Canvas and WebGL 渲染。</li>
<li><a href="https://github.com/NetEase/pomelo.git" target="_blank" rel="external">pomelo</a> 网易基于 Nodejs 的网络游戏后台</li>
</ul>
<h2 id="持续集成工具">持续集成工具</h2><ul>
<li><a href="https://github.com/jenkinsci/jenkins.git" target="_blank" rel="external">jenkins</a> java 持续集成</li>
<li><a href="https://github.com/gocd/gocd.git" target="_blank" rel="external">gocd</a> go 持续集成</li>
</ul>
<h2 id="MongoDB">MongoDB</h2><ul>
<li><a href="https://github.com/mongodb/mongo.git" target="_blank" rel="external">mongo</a></li>
<li><a href="https://github.com/kissjs/node-mongoskin.git" target="_blank" rel="external">node-mongoskin</a> The promise wrapper for node-mongodb-native</li>
<li><a href="https://github.com/edwardhotchkiss/mongoose-paginate.git" target="_blank" rel="external">mongoose-paginate</a> 数据分页</li>
<li><a href="https://github.com/hacksparrow/mongoose-pages.git" target="_blank" rel="external">mongoose-pages</a> 数据分页</li>
<li><a href="https://github.com/florianholzapfel/express-restify-mongoose.git" target="_blank" rel="external">express-restify-mongoose</a> restful interface for mongoose database models</li>
<li><a href="https://github.com/mongodb/node-mongodb-native.git" target="_blank" rel="external">node-mongodb-native</a> Mongo DB Native NodeJS Driver</li>
</ul>
<h4 id="GUI"><strong><em>GUI</em></strong></h4><ul>
<li><a href="https://github.com/agirbal/umongo.git" target="_blank" rel="external">umongo</a></li>
<li><a href="https://github.com/hacksparrow/mongoose-pages.git" target="_blank" rel="external">robomongod</a></li>
<li><a href="https://github.com/bobthecow/genghis.git" target="_blank" rel="external">genghis</a> MongoDB admin app</li>
</ul>
<h4 id="Driver"><strong><em>Driver</em></strong></h4><ul>
<li><a href="https://github.com/mongodb/mongo-java-driver.git" target="_blank" rel="external">mongo-java-driver</a></li>
<li><a href="https://github.com/mongodb/mongo-ruby-driver.git" target="_blank" rel="external">mongo-ruby-driver</a></li>
</ul>
<h2 id="测试类">测试类</h2><ul>
<li><a href="https://github.com/mhevery/jasmine-node.git" target="_blank" rel="external">jasmine-node</a> node jasmine 集成测试</li>
<li><a href="https://github.com/flatiron/vows.git" target="_blank" rel="external">vows</a> node BDD 异步测试框架</li>
<li><a href="https://github.com/visionmedia/should.js.git" target="_blank" rel="external">should.js</a> node BDD 测试断言</li>
<li><a href="https://github.com/flatiron/api-easy.git" target="_blank" rel="external">api-easy</a> node 测试 RESTful API</li>
<li><a href="https://github.com/vlucas/frisby.git" target="_blank" rel="external">frisby</a> node api 测试框架</li>
<li><a href="https://github.com/chaijs/chai.git" target="_blank" rel="external">chai</a> BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework.</li>
<li><a href="https://github.com/assaf/zombie.git" target="_blank" rel="external">zombie</a> 模拟浏览器行为的测试</li>
<li><a href="https://github.com/winsonwq/viff.git" target="_blank" rel="external">viff</a> 在不同的环境中找到网页视觉差异</li>
<li><a href="https://github.com/karma-runner/karma.git" target="_blank" rel="external">karma</a> 壮观的JavaScript测试运行器</li>
<li><a href="https://github.com/philsquared/Catch.git" target="_blank" rel="external">Catch</a> C++ 和 Obj-C自动化测试框架</li>
<li><a href="https://github.com/gh-unit/gh-unit.git" target="_blank" rel="external">gh-unit</a> object-c 测试框架</li>
<li><a href="https://github.com/kiwi-bdd/Kiwi.git" target="_blank" rel="external">Kiwi</a> BDD for iOS</li>
<li><a href="https://github.com/kif-framework/KIF.git" target="_blank" rel="external">KIF</a> iOS 集成测试框架</li>
<li><a href="https://github.com/cucumber/cucumber.git" target="_blank" rel="external">cucumber</a> BDD that talks to domain experts first and code second</li>
<li><a href="https://github.com/cucumber/cucumber-js.git" target="_blank" rel="external">cucumber-js</a> 纯 js 实现的 cucunber</li>
<li><a href="https://github.com/larrymyers/jasmine-reporters.git" target="_blank" rel="external">jasmine-reporters</a> custom jasmin reporters</li>
<li><a href="https://github.com/velesin/jasmine-jquery.git" target="_blank" rel="external">jasmine-jquery</a> 一组定制匹配器的jQuery框架, 处理HTML、CSS和JSON夹具在你的测试。</li>
<li><a href="https://github.com/cjohansen/Sinon.JS.git" target="_blank" rel="external">Sinon.JS</a> 前端单元测试工具</li>
<li><a href="https://github.com/gatling/gatling.git" target="_blank" rel="external">gatling</a> 并发测试工具</li>
</ul>
<h2 id="包管理">包管理</h2><ul>
<li><a href="https://github.com/creationix/nvm.git" target="_blank" rel="external">nvm</a> node 和 iojs 版本管理工具</li>
<li><a href="https://github.com/visionmedia/n.git" target="_blank" rel="external">n</a> node 版本管理工具</li>
<li><a href="https://github.com/CocoaPods/Specs.git" target="_blank" rel="external">Specs</a> ios 包管理</li>
<li><a href="https://github.com/Homebrew/homebrew.git" target="_blank" rel="external">homebrew</a> mac 软件管理</li>
<li><a href="https://github.com/wayneeseguin/rvm.git" target="_blank" rel="external">rvm</a> ruby 版本管理工具</li>
</ul>
<h2 id="Obj-C_类">Obj-C 类</h2><ul>
<li><a href="https://github.com/TooTallNate/NodObjC.git" target="_blank" rel="external">NodObjC</a> The Node.js ⇆ Objective-C bridge</li>
<li><a href="https://github.com/robb/Underscore.m.git" target="_blank" rel="external">Underscore.m</a> A DSL for Data Manipulation</li>
<li><a href="https://github.com/AFNetworking/AFNetworking.git" target="_blank" rel="external">AFNetworking</a> iOS and OS X networking framework</li>
<li><a href="https://github.com/Grouper/FlatUIKit.git" target="_blank" rel="external">FlatUIKit</a> iOS UI 库</li>
<li><a href="https://github.com/objccn/articles.git" target="_blank" rel="external">articles</a> objc.io 技术进阶网站翻译</li>
<li><a href="https://github.com/BradLarson/GPUImage.git" target="_blank" rel="external">GPUImage</a> GPU-based image and video processing</li>
<li><a href="https://github.com/RestKit/RestKit.git" target="_blank" rel="external">RestKit</a> RestKit是一个Obj-C框架在iOS和Mac OS X实现RESTful风格的Web服务客户端</li>
<li><a href="https://github.com/facebook/facebook-ios-sdk.git" target="_blank" rel="external">facebook-ios-sdk</a></li>
<li><a href="https://github.com/mxcl/PromiseKit.git" target="_blank" rel="external">PromiseKit</a> Promises for iOS and OS X</li>
<li><a href="https://github.com/kevinzhow/PNChart.git" target="_blank" rel="external">PNChart</a> </li>
</ul>
<h2 id="CSS_类">CSS 类</h2><ul>
<li><a href="https://github.com/FortAwesome/Font-Awesome.git" target="_blank" rel="external">Font-Awesome</a>The iconic font and CSS toolkit</li>
<li><a href="https://github.com/zurb/foundation.git" target="_blank" rel="external">foundation</a>可自定义的前端框架,  移动终端优先的一个前端开发框架, 和 bootstrap 类似</li>
<li><a href="https://github.com/dhg/Skeleton.git" target="_blank" rel="external">Skeleton</a>超小的CSS文件, 快速开发任何尺寸的网站, 无论是17寸的笔记本屏幕或者是iphone</li>
<li><a href="https://github.com/Semantic-Org/Semantic-UI.git" target="_blank" rel="external">Semantic-UI</a>用自然语言使用惯例来组织使得开发过程更加的具有创新</li>
<li><a href="https://github.com/uikit/uikit.git" target="_blank" rel="external">uikit</a> 轻量级 模块化的 UI库</li>
<li><a href="https://github.com/viljamis/responsive-nav.js.git" target="_blank" rel="external">responsive-nav.js</a> 响应式导航栏</li>
<li><a href="https://github.com/daneden/animate.css.git" target="_blank" rel="external">animate.css</a> 动画效果</li>
<li><a href="https://github.com/daniel-lundin/snabbt.js.git" target="_blank" rel="external">snabbt.js</a> Fast animations with javascript and CSS transforms</li>
<li><a href="https://github.com/allmobilize/amazeui.git" target="_blank" rel="external">amazeui</a> 跨屏前端框架</li>
<li><a href="https://github.com/joshuaclayton/blueprint-css.git" target="_blank" rel="external">blueprint-css</a> A CSS framework that aims to cut down on your CSS development time</li>
<li><a href="https://github.com/GumbyFramework/Gumby.git" target="_blank" rel="external">Gumby</a> 灵活的， 响应式的 CSS 框架</li>
<li><a href="https://github.com/ericam/susy.git" target="_blank" rel="external">susy</a> 响应布局Sass的工具包</li>
<li><a href="https://github.com/yahoo/pure.git" target="_blank" rel="external">pure</a> 一系列可以在任意 Web 使用的 小型的，响应式的 CSS 模块</li>
<li><a href="https://github.com/groundworkcss/groundwork.git" target="_blank" rel="external">groundwork</a> Say hello to responsive design made easy.</li>
<li><a href="https://github.com/Semantic-Org/Semantic-UI.git" target="_blank" rel="external">Semantic-UI</a> Semantic is a UI component framework based around useful principles from natural language.</li>
</ul>
<h2 id="Ruby_On_Rails_类">Ruby On Rails 类</h2><ul>
<li><a href="https://github.com/rails/rails.git" target="_blank" rel="external">rails</a> Ruby on Rails</li>
<li><a href="https://github.com/mongoid/mongoid.git" target="_blank" rel="external">mongoid</a> Ruby ODM framework for MongoDB</li>
<li><a href="https://github.com/sinatra/sinatra.git" target="_blank" rel="external">sinatra</a> Classy web-development dressed in a DSL</li>
<li><a href="https://github.com/JoeWoo/nlpir.git" target="_blank" rel="external">nlpir</a> 中文分词</li>
<li><a href="https://github.com/louismullie/treat.git" target="_blank" rel="external">treat</a> Natural language processing framework for Ruby.</li>
<li><a href="https://github.com/carrierwaveuploader/carrierwave.git" target="_blank" rel="external">carrierwave</a> rails 文件上传插件</li>
<li><a href="https://github.com/thoughtbot/paperclip.git" target="_blank" rel="external">paperclip</a> rails 文件上传插件</li>
<li><a href="https://github.com/phusion/passenger.git" target="_blank" rel="external">passenger</a>A fast and robust web server and application server for Ruby, Python and Node.js</li>
<li><a href="https://github.com/guard/guard.git" target="_blank" rel="external">guard</a> 一个命令行工具可以轻松地处理文件系统的修改事件。</li>
<li><a href="https://github.com/faye/faye.git" target="_blank" rel="external">faye</a> Simple pub/sub messaging for the web</li>
<li><a href="https://github.com/jch/html-pipeline.git" target="_blank" rel="external">html-pipeline</a> HTML processing filters and utilities</li>
</ul>
<h2 id="Docker_类">Docker 类</h2><ul>
<li><a href="https://github.com/phusion/passenger-docker.git" target="_blank" rel="external">passenger-docker</a> A Docker base image for Ruby, Python, Node.js and Meteor web apps</li>
<li><a href="https://github.com/eugeneware/docker-wordpress-nginx.git" target="_blank" rel="external">docker-wordpress-nginx</a> A Dockerfile that installs the latest wordpress, nginx and php-fpm.</li>
<li><a href="https://github.com/yahoojapan/docker-continuous-integration-workflow.git" target="_blank" rel="external">docker-continuous-integration-workflow</a> 使用 docker 做持续集成</li>
<li><a href="https://github.com/rrader/docker-jenkins-slave.git" target="_blank" rel="external">docker-jenkins-slave</a> jenkins-slave dockerfile 生成工具</li>
<li><a href="https://github.com/jwilder/nginx-proxy.git" target="_blank" rel="external">nginx-proxy</a> Automated nginx proxy for Docker containers using docker-gen</li>
<li><a href="https://github.com/jpetazzo/nsenter.git" target="_blank" rel="external">nsenter</a> 进入 docker container 工具</li>
<li><a href="https://github.com/zettio/weave.git" target="_blank" rel="external">weave</a> The Docker Network</li>
<li><a href="https://github.com/docker/fig.git" target="_blank" rel="external">fig</a> Fast, isolated development environments using Docker</li>
<li><a href="https://github.com/google/cadvisor.git" target="_blank" rel="external">cadvisor</a> cAdvisor (Container Advisor) provides container users an understanding of the resource usage and performance characteristics of their running containers.就是用于监测 docker 其他 containers 使用情况</li>
</ul>
<h2 id="Go_类">Go 类</h2><ul>
<li><a href="https://github.com/spf13/hugo.git" target="_blank" rel="external">hugo</a> A Fast and Flexible Static Site Generator built with love by spf13 in GoLang</li>
<li><a href="https://github.com/coreos/rocket.git" target="_blank" rel="external">rocket</a> App Container runtime</li>
<li><a href="https://github.com/go-martini/martini.git" target="_blank" rel="external">martini</a> Martini是一个强大为了编写模块化Web应用而生的GO语言框架.</li>
<li><a href="https://github.com/revel/revel.git" target="_blank" rel="external">revel</a> A high productivity, full-stack web framework for the Go language.</li>
<li><a href="https://github.com/astaxie/beego.git" target="_blank" rel="external">beego</a> 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。</li>
<li><a href="https://github.com/zenazn/goji.git" target="_blank" rel="external">goji</a> 小型 web 框架</li>
</ul>
<h2 id="Java_类">Java 类</h2><ul>
<li><a href="https://github.com/playframework/playframework.git" target="_blank" rel="external">playframework</a></li>
<li><a href="https://github.com/alibaba/druid.git" target="_blank" rel="external">druid</a> Java语言中最好的数据库连接池</li>
<li><a href="https://github.com/alibaba/dubbo.git" target="_blank" rel="external">dubbo</a> 分布式服务架构</li>
<li><a href="https://github.com/alibaba/fastjson.git" target="_blank" rel="external">fastjson</a> 是一个Java语言编写的高性能功能完善的JSON库</li>
</ul>
<h2 id="open-source_project">open-source project</h2><ul>
<li><a href="https://github.com/spree/spree.git" target="_blank" rel="external">spree</a> 基于Ruby on Rails的开源电子商务解决方案</li>
<li><a href="https://github.com/diaspora/diaspora.git" target="_blank" rel="external">diaspora</a> 分布式社交网络开源项目 (rails</li>
<li><a href="https://github.com/spree/spree.git" target="_blank" rel="external">spree</a> Spree is a complete open source e-commerce solution for Ruby on Rails.</li>
<li><a href="https://github.com/TryGhost/Ghost.git" target="_blank" rel="external">Ghost</a> blog 搭建平台</li>
<li><a href="https://github.com/adobe/brackets.git" target="_blank" rel="external">brackets</a> adobe html css js code editor</li>
<li><a href="https://github.com/cnpm/cnpmjs.org.git" target="_blank" rel="external">cnpmjs.org</a> cnpm</li>
<li><a href="https://github.com/angular-app/angular-app.git" target="_blank" rel="external">angular-app</a> Reference application for AngularJS</li>
<li><a href="https://github.com/gitlabhq/gitlabhq.git" target="_blank" rel="external">gitlabhq</a> 类似于 github 代码合作开发</li>
<li><a href="https://github.com/happypeter/happycasts.git" target="_blank" rel="external">happycasts</a> happycasts 网站 是一个视频网站，讲解 rails 和 web 开发等。</li>
<li><a href="https://github.com/assemblymade/coderwall.git" target="_blank" rel="external">coderwall</a> Professional network for software engineers</li>
<li><a href="https://github.com/ether/etherpad-lite.git" target="_blank" rel="external">etherpad-lite</a> 在线协同同时编辑器。</li>
</ul>
<h2 id="code_style">code style</h2><ul>
<li><a href="https://github.com/felixge/node-style-guide.git" target="_blank" rel="external">node-style-guide</a></li>
<li><a href="https://github.com/bbatsov/ruby-style-guide.git" target="_blank" rel="external">ruby-style-guide</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide.git" target="_blank" rel="external">rails-style-guide</a></li>
<li><a href="https://github.com/airbnb/javascript.git" target="_blank" rel="external">javascript</a></li>
</ul>
<h2 id="study-resouce">study-resouce</h2><ul>
<li><a href="https://github.com/dominictarr/stream-spec.git" target="_blank" rel="external">es6features</a> es6</li>
<li><a href="https://github.com/ruanyf/es6tutorial.git" target="_blank" rel="external">es6tutorial</a> 全面介绍ECMAScript 6新增的语法特性。</li>
<li><a href="https://github.com/JacksonTian/fks.git" target="_blank" rel="external">fks</a> 前端技能汇总</li>
<li><a href="https://github.com/shichuan/javascript-patterns.git" target="_blank" rel="external">javascript-patterns</a> javascript 模式</li>
<li><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions.git" target="_blank" rel="external">Front-end-Developer-Interview-Questions</a> 前端工作面试问题</li>
<li><a href="https://github.com/sindresorhus/awesome-nodejs.git" target="_blank" rel="external">awesome-nodejs</a> Node 包列表</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS.git" target="_blank" rel="external">You-Dont-Know-JS</a> js book</li>
<li><a href="https://github.com/yeasy/docker_practice.git" target="_blank" rel="external">docker_practice</a> docker 从入门到实践</li>
<li><a href="https://github.com/geekcompany/ResumeSample.git" target="_blank" rel="external">ResumeSample</a> 程序员简历模板</li>
<li><a href="https://github.com/DeathKing/Learning-SICP.git" target="_blank" rel="external">Learning-SICP</a> 《计算机程序的构造和解释》公开课中文化项目</li>
<li><a href="https://github.com/Aufree/trip-to-iOS.git" target="_blank" rel="external">trip-to-iOS</a> iOS 学习资料整理</li>
<li><a href="https://github.com/sindresorhus/awesome.git" target="_blank" rel="external">awesome</a> A curated list of awesome lists</li>
<li><a href="https://github.com/huangz1990/SICP-answers.git" target="_blank" rel="external">SICP-answers</a> SICP 解题集</li>
</ul>
<h2 id="其它">其它</h2><ul>
<li><a href="https://github.com/gmarik/Vundle.vim.git" target="_blank" rel="external">Vundle.vim</a> vim plugin manager</li>
<li><a href="https://github.com/nbs-system/naxsi.git" target="_blank" rel="external">naxsi</a> nginx 安全维护库</li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh.git" target="_blank" rel="external">oh-my-zh</a>  管理Zsh</li>
<li><a href="https://github.com/dominictarr/JSON.sh.git" target="_blank" rel="external">JSON.sh</a> json shell parse</li>
<li><a href="https://github.com/zettio/weave.git" target="_blank" rel="external">weave</a> 创建一个虚拟网络连接 docker 容器跨多个主机部署。</li>
<li><a href="https://github.com/alibaba/tengine.git" target="_blank" rel="external">tengine</a> 基于 nginx 的 Web 服务器。</li>
<li><a href="https://github.com/cloudwu/skynet.git" target="_blank" rel="external">skynet</a> 轻量级的为在线游戏服务器打造的框架。</li>
<li><a href="https://github.com/Itseez/opencv.git" target="_blank" rel="external">opencv</a> 开源的计算机视觉库</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　这里记录的是笔者在 <a href="https://github.com/">github</a>上 Star 的库，持续更新。</p>
<h2 id="JS_类">JS 类</h2><ul>
<li><a href="https://github.com/getify/LABjs.git">LABjs</a></li>
<li><a href="https://github.com/jrburke/requirejs.git">requirejs</a></li>
<li><a href="https://github.com/seajs/seajs.git">seajs</a><blockquote>
<ul>
<li>LABjs 是一个文件加载器, 核心价值是性能优化</li>
<li>RequireJS 和 SeaJS 则是模块加载器，倡导的是一种模块化开发理念，核心价值是        让 JavaScript 的模块化开发变得更简单自然。</li>
<li>模块加载器一般可降级为文件加载器用，因此使用 RequireJS 和 SeaJS，也可以达        成 LABjs 的性能优化目的。</li>
<li>RequireJS 遵循的是 AMD（异步模块定义）规范，SeaJS 遵循的是 CMD （通用模            块定义）规范。</li>
</ul>
</blockquote>
</li>
</ul>]]>
    
    </summary>
    
      <category term="github" scheme="http://aikin.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mongoose 使用 Population 填充'关联表'数据]]></title>
    <link href="http://aikin.github.io/2014/11/02/mongoose-population/"/>
    <id>http://aikin.github.io/2014/11/02/mongoose-population/</id>
    <published>2014-11-02T13:30:17.000Z</published>
    <updated>2015-07-10T14:31:02.000Z</updated>
    <content type="html"><![CDATA[<p>  <a href="http://mongoosejs.com/index.html" target="_blank" rel="external">Mongoose</a> 是 <a href="http://www.mongodb.org/" target="_blank" rel="external">MongoDB</a> 的 <strong>ODM(Object Document Mapper)</strong>。</p>
<p><img src="/images/mongoose.png"></p>
<blockquote>
<ul>
<li>什么是<strong>ODM</strong>? 其实和<strong>ORM(Object Relational Mapper)</strong>是同类型的工具。都是将数据库的数据转化为代码对象的库，使用转化后的对象可以直接对数据库的数据进行<strong><em>CRUD(增删改查)</em></strong>。</li>
<li><code>MongoDB</code> 是文档型数据库(Document Database)，不是关系型数据库(Relational Database)。而<code>Mongoose</code>可以将 <strong>MongonDB</strong> 数据库存储的文档(documents)转化为 javascript 对象，然后可以直接进行数据的增删改查。</li>
</ul>
</blockquote>
<a id="more"></a>
<p>因为<code>MongoDB</code>是文档型数据库，所以它没有关系型数据库<a href="http://zh.wikipedia.org/wiki/%E8%BF%9E%E6%8E%A5_(SQL" target="_blank" rel="external"><code>joins</code></a>(数据库的两张表通过”外键”，建立连接关系。) 特性。也就是在建立数据的关联时会比较麻烦。为了解决这个问题，<code>Mongoose</code>封装了一个<a href="http://mongoosejs.com/docs/populate.html" target="_blank" rel="external"><code>Population</code></a>功能。使用<code>Population</code>可以实现在一个 <strong>document</strong> 中填充其他 <strong>collection(s)</strong>    的 <strong>document(s)</strong>。</p>
<p>在定义<code>Schema</code>的时候，如果设置某个 field 关联另一个<code>Schema</code>，那么在获取 document 的时候就可以使用 Population 功能通过关联<code>Schema</code>的 field 找到关联的另一个 document，并且用被关联 document 的内容替换掉原来关联字段(field)的内容。</p>
<h2 id="接下来分享下:Query#populate_Model#populate_Document#populate的用法">接下来分享下:<code>Query#populate</code> <code>Model#populate</code> <code>Document#populate</code>的用法</h2><p><strong><em>先建立三个<code>Schema</code>和<code>Model</code>:</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Schema   = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name  : &#123; type: <span class="built_in">String</span>, unique: <span class="literal">true</span> &#125;,</span><br><span class="line">    posts : [&#123; type: Schema.Types.ObjectId, ref: <span class="string">'Post'</span> &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>, UserSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PostSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    poster   : &#123; type: Schema.Types.ObjectId, ref: <span class="string">'User'</span> &#125;,</span><br><span class="line">    comments : [&#123; type: Schema.Types.ObjectId, ref: <span class="string">'Comment'</span> &#125;],</span><br><span class="line">    title    : <span class="built_in">String</span>,</span><br><span class="line">    content  : <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> Post = mongoose.model(<span class="string">'Post'</span>, PostSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CommentSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    post      : &#123; type: Schema.Types.ObjectId, ref: <span class="string">"Post"</span> &#125;,</span><br><span class="line">    commenter : &#123; type: Schema.Types.ObjectId, ref: <span class="string">'User'</span> &#125;,</span><br><span class="line">    content   : <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> Comment = mongoose.model(<span class="string">'Comment'</span>, CommentSchema);</span><br></pre></td></tr></table></figure>
<ul>
<li>在上述的例子中，创建了三个 Models:<code>User</code>，<code>Post</code>，<code>Comment</code>。</li>
<li><code>User</code> 的属性 <strong><em>posts</em></strong>，对应是一个 <strong><em>ObjectId</em></strong> 的数组。<code>ref</code>表示关联<code>Post</code>(注意: 被关联的<strong><em>model</em></strong>的 type 必须是 <code>ObjectId, Number, String, 和 Buffer</code> 才有效)。</li>
<li><code>Post</code>的属性 <strong><em>poster</em></strong> 和 <strong><em>comments</em></strong> 分别关联<code>User</code>和<code>Comment</code>。</li>
<li><code>Comment</code>的属性 <strong><em>post</em></strong> 和 <strong><em>commenter</em></strong> 分别关联<code>Post</code>和<code>User</code>。</li>
<li>三个 Models 的关系:一个 user—<strong>has many</strong>—&gt;post。一个 post—<strong>has one</strong>—&gt;user，<strong>has many</strong>—&gt;comment。一个 comment—<strong>has one</strong>—&gt;post 和 user。</li>
</ul>
<p><strong><em>创建一些数据到数据库:</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/population-test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    createData();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userIds    = [<span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId];</span><br><span class="line">    <span class="keyword">var</span> postIds    = [<span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId];</span><br><span class="line">    <span class="keyword">var</span> commentIds = [<span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> users    = [];</span><br><span class="line">    <span class="keyword">var</span> posts    = [];</span><br><span class="line">    <span class="keyword">var</span> comments = [];</span><br><span class="line"></span><br><span class="line">    users.push(&#123;</span><br><span class="line">        _id   : userIds[<span class="number">0</span>],</span><br><span class="line">        name  : <span class="string">'aikin'</span>,</span><br><span class="line">        posts : [postIds[<span class="number">0</span>]]</span><br><span class="line">    &#125;);</span><br><span class="line">    users.push(&#123;</span><br><span class="line">        _id   : userIds[<span class="number">1</span>],</span><br><span class="line">        name  : <span class="string">'luna'</span>,</span><br><span class="line">        posts : [postIds[<span class="number">1</span>]]</span><br><span class="line">    &#125;);</span><br><span class="line">    users.push(&#123;</span><br><span class="line">        _id   : userIds[<span class="number">2</span>],</span><br><span class="line">        name  : <span class="string">'luajin'</span>,</span><br><span class="line">        posts : [postIds[<span class="number">2</span>]]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    posts.push(&#123;</span><br><span class="line">        _id      : postIds[<span class="number">0</span>],</span><br><span class="line">        title    : <span class="string">'post-by-aikin'</span>,</span><br><span class="line">        poster   : userIds[<span class="number">0</span>],</span><br><span class="line">        comments : [commentIds[<span class="number">0</span>]]</span><br><span class="line">    &#125;);</span><br><span class="line">    posts.push(&#123;</span><br><span class="line">        _id      : postIds[<span class="number">1</span>],</span><br><span class="line">        title    : <span class="string">'post-by-luna'</span>,</span><br><span class="line">        poster   : userIds[<span class="number">1</span>],</span><br><span class="line">        comments : [commentIds[<span class="number">1</span>]]</span><br><span class="line">    &#125;);</span><br><span class="line">    posts.push(&#123;</span><br><span class="line">        _id      : postIds[<span class="number">2</span>],</span><br><span class="line">        title    : <span class="string">'post-by-luajin'</span>,</span><br><span class="line">        poster   : userIds[<span class="number">2</span>],</span><br><span class="line">        comments : [commentIds[<span class="number">2</span>]]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    comments.push(&#123;</span><br><span class="line">        _id       : commentIds[<span class="number">0</span>],</span><br><span class="line">        content   : <span class="string">'comment-by-luna'</span>,</span><br><span class="line">        commenter : userIds[<span class="number">1</span>],</span><br><span class="line">        post      : postIds[<span class="number">0</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">    comments.push(&#123;</span><br><span class="line">        _id       : commentIds[<span class="number">1</span>],</span><br><span class="line">        content   : <span class="string">'comment-by-luajin'</span>,</span><br><span class="line">        commenter : userIds[<span class="number">2</span>],</span><br><span class="line">        post      : postIds[<span class="number">1</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">    comments.push(&#123;</span><br><span class="line">        _id       : commentIds[<span class="number">2</span>],</span><br><span class="line">        content   : <span class="string">'comment-by-aikin'</span>,</span><br><span class="line">        commenter : userIds[<span class="number">1</span>],</span><br><span class="line">        post      : postIds[<span class="number">2</span>]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    User.create(users, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">        Post.create(posts, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">            Comment.create(comments, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>数据的准备就绪后，接下来就是探索<code>populate</code>方法:</em></strong></p>
<h2 id="1-_Query#populate"><a href="http://mongoosejs.com/docs/api.html#query_Query-populate" target="_blank" rel="external">1. Query#populate</a></h2><p>什么Query? Query(查询)，可以快速和简单的从<strong>MongooDB</strong>查找出相应的 document(s)。 Mongoose 封装了很多查询的方法，使得对数据库的操作变得简单啦。这里分享一下<code>populate</code>方法用法。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>Query.populate(path, [select], [model], [match], [options])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>path</code></strong><br>　　类型：<code>String</code>或<code>Object</code>。<br>　　<code>String</code>类型的时， 指定要填充的关联字段，要填充多个关联字段可以以空格分隔。<br>　　<code>Object</code>类型的时，就是把 <strong>populate</strong> 的参数封装到一个对象里。当然也可以是个数组。下面的例子中将会实现。</p>
<p><strong><code>select</code></strong><br>　　类型：<code>Object</code>或<code>String</code>，可选，指定填充 document 中的哪些字段。<br>　　<code>Object</code>类型的时，格式如:<code>{name: 1, _id: 0}</code>,为<strong>0</strong>表示不填充，为<strong>1</strong>时表示填充。<br>　　<code>String</code>类型的时，格式如:<code>&quot;name -_id&quot;</code>，用空格分隔字段，在字段名前加上<code>-</code>表示不填充。详细语法介绍 <a href="http://mongoosejs.com/docs/api.html#query_Query-select" target="_blank" rel="external">query-select</a></p>
<p><strong><code>model</code></strong><br>　　类型：<code>Model</code>，可选，指定关联字段的 model，如果没有指定就会使用<code>Schema</code>的<code>ref</code>。</p>
<p><strong><code>match</code></strong><br>　　类型：<code>Object</code>，可选，指定附加的查询条件。</p>
<p><strong><code>options</code></strong><br>　　类型：<code>Object</code>，可选，指定附加的其他查询选项，如排序以及条数限制等等。</p>
</blockquote>
<ul>
<li><h3 id="填充User的posts字段:"><strong>填充<code>User</code>的<code>posts</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//填充所有 users 的 posts</span></span><br><span class="line">User.find()</span><br><span class="line">    .populate(<span class="string">'posts'</span>, <span class="string">'title'</span>, <span class="literal">null</span>, &#123;sort: &#123; title: -<span class="number">1</span> &#125;&#125;)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(docs[<span class="number">0</span>].posts[<span class="number">0</span>].title); <span class="comment">// post-by-aikin</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充 user 'luajin'的 posts</span></span><br><span class="line">User.findOne(&#123;name: <span class="string">'luajin'</span>&#125;)</span><br><span class="line">    .populate(&#123;path: <span class="string">'posts'</span>, select: &#123; title: <span class="number">1</span> &#125;, options: &#123;sort: &#123; title: -<span class="number">1</span> &#125;&#125;&#125;)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(doc.posts[<span class="number">0</span>].title);  <span class="comment">// post-by-luajin</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的 populate 方法传入的参数形式不同，其实实现的功能是一样的，只是表示形式不一样。</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="填充Post的poster和comments字段:"><strong>填充<code>Post</code>的<code>poster</code>和<code>comments</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</span><br><span class="line">    .populate(<span class="string">'poster comments'</span>, <span class="string">'-_id'</span>)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(doc.poster.name);           <span class="comment">// aikin</span></span><br><span class="line">        <span class="built_in">console</span>.log(doc.poster._id);            <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// comment-by-luna</span></span><br><span class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>]._id);      <span class="comment">// undefined</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</span><br><span class="line">    .populate(&#123;path: <span class="string">'poster comments'</span>, select: <span class="string">'-_id'</span>&#125;)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(doc.poster.name);           <span class="comment">// aikin</span></span><br><span class="line">        <span class="built_in">console</span>.log(doc.poster._id);            <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// comment-by-luna</span></span><br><span class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>]._id);      <span class="comment">// undefined</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上两种填充的方式实现的功能是一样的。就是给 populate 方法的参数不同。</span></span><br><span class="line"><span class="comment">//这里要注意，当两个关联的字段同时在一个 path 里面时， select 必须是 document(s)</span></span><br><span class="line"><span class="comment">//具有的相同字段。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想要给单个关联的字段指定 select，可以传入数组的参数。如下：</span></span><br><span class="line"></span><br><span class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</span><br><span class="line">    .populate([<span class="string">'poster'</span>, <span class="string">'comments'</span>])</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(doc.poster.name);          <span class="comment">// aikin</span></span><br><span class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// comment-by-luna</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</span><br><span class="line">    .populate([</span><br><span class="line">        &#123;path:<span class="string">'poster'</span>,   select: <span class="string">'-_id'</span>&#125;,</span><br><span class="line">        &#123;path:<span class="string">'comments'</span>, select: <span class="string">'-content'</span>&#125;</span><br><span class="line">    ])</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(doc.poster.name);          <span class="comment">// aikin</span></span><br><span class="line">        <span class="built_in">console</span>.log(doc.poster._id);           <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>]._id);      <span class="comment">// 会打印出对应的 comment id</span></span><br><span class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// undefined</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="2-_Model#populate"><a href="http://mongoosejs.com/docs/api.html#model_Model.populate" target="_blank" rel="external">2. Model#populate</a></h2><p>Model(模型)，是根据定义的 Schema 编译成的抽象的构造函数。models 的实例 documents，可以在数据库中被保存和检索。数据库所有 document 的创建和检索，都通过 models 处理。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>Model.populate(docs, options, [cb(err,doc)])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>docs</code></strong><br>　　类型：<code>Document</code>或<code>Array</code>。单个需要被填充的 doucment 或者 document 的数组。</p>
<p><strong><code>options</code></strong><br>　　类型：<code>Object</code>。以键值对的形式表示。<br>　　keys：<code>path</code> <code>select</code> <code>match</code> <code>model</code> <code>options</code>，这些键对应值的类型和功能，与上述<code>Query#populate</code>方法的参数相同。</p>
<p><strong><code>[cb(err,doc)]</code></strong><br>　　类型：<code>Function</code>，回调函数，接收两个参数，错误<code>err</code>和填充完的<code>doc(s)</code>。</p>
</blockquote>
<ul>
<li><h3 id="填充Post的poster和comments字段以及comments的commenter字段:"><strong>填充<code>Post</code>的<code>poster</code>和<code>comments</code>字段以及<code>comments</code>的<code>commenter</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Post.find(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</span><br><span class="line">    .populate(<span class="string">'poster comments'</span>)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> opts = [&#123;</span><br><span class="line">            path   : <span class="string">'comments.commenter'</span>,</span><br><span class="line">            select : <span class="string">'name'</span>,</span><br><span class="line">            model  : <span class="string">'User'</span></span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line">        Post.populate(docs, opts, <span class="function"><span class="keyword">function</span>(<span class="params">err, populatedDocs</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(populatedDocs[<span class="number">0</span>].poster.name);                  <span class="comment">// aikin</span></span><br><span class="line">            <span class="built_in">console</span>.log(populatedDocs[<span class="number">0</span>].comments[<span class="number">0</span>].commenter.name);  <span class="comment">// luna</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="3-_Document#populate"><a href="http://mongoosejs.com/docs/api.html#document_Document-populate" target="_blank" rel="external">3. Document#populate</a></h2><p>Document，每个 document 都是其 Model 的一个实例，一对一的映射着 MongoDB 的 document。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>Document.populate([path], [callback])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>path</code></strong><br>　　类型：<code>String</code>或<code>Object。与上述</code>Query#populate`方法的 <strong>path</strong> 参数相同。</p>
<p><strong><code>callback</code></strong><br>　　类型：<code>Function</code>。回调函数，接收两个参数，错误<code>err</code>和填充完的<code>doc(s)</code>。</p>
</blockquote>
<ul>
<li><h3 id="填充User的posts字段:-1"><strong>填充<code>User</code>的<code>posts</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123;name: <span class="string">'aikin'</span>&#125;)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> opts = [&#123;</span><br><span class="line">            path   : <span class="string">'posts'</span>,</span><br><span class="line">            select : <span class="string">'title'</span></span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line">        doc.populate(opts, <span class="function"><span class="keyword">function</span>(<span class="params">err, populatedDoc</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(populatedDoc.posts[<span class="number">0</span>].title);  <span class="comment">// post-by-aikin</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p><strong><em>博文涉及的完整例子在 <a href="https://gist.github.com/aikin/534fae3c95039b7dee09" target="_blank" rel="external">gist</a> 上。(ps: 貌似 gist 今天被墙了。)</em></strong></p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://mongoosejs.com/docs/populate.html" target="_blank" rel="external">mongoose-api-docs</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/07/database_implementation.html" target="_blank" rel="external">数据库的最简单实现</a></li>
<li><a href="http://my.oschina.net/calvinchen/blog/137932" target="_blank" rel="external">Mongoose 使用之 Population</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>  <a href="http://mongoosejs.com/index.html">Mongoose</a> 是 <a href="http://www.mongodb.org/">MongoDB</a> 的 <strong>ODM(Object Document Mapper)</strong>。</p>
<p><img src='/images/mongoose.png' /></p>
<blockquote>
<ul>
<li>什么是<strong>ODM</strong>? 其实和<strong>ORM(Object Relational Mapper)</strong>是同类型的工具。都是将数据库的数据转化为代码对象的库，使用转化后的对象可以直接对数据库的数据进行<strong><em>CRUD(增删改查)</em></strong>。</li>
<li><code>MongoDB</code> 是文档型数据库(Document Database)，不是关系型数据库(Relational Database)。而<code>Mongoose</code>可以将 <strong>MongonDB</strong> 数据库存储的文档(documents)转化为 javascript 对象，然后可以直接进行数据的增删改查。</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="mongoose" scheme="http://aikin.github.io/tags/mongoose/"/>
    
      <category term="nodejs" scheme="http://aikin.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gulp API 初探和 gulp-nodemon gulp-livereload 配置]]></title>
    <link href="http://aikin.github.io/2014/10/24/gulp-nodemon-livereload/"/>
    <id>http://aikin.github.io/2014/10/24/gulp-nodemon-livereload/</id>
    <published>2014-10-24T13:08:09.000Z</published>
    <updated>2015-07-10T14:31:02.000Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>，是一个自动化任务运行工具(就是让一些如: 图片压缩，js合并，Sass 编译成 CSS，测试，重启服务器等操作，能自动运行的工具。)，和 <a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a> 是同一类型的工具。<br>　　表示之前没有配置过这两类的工具，只是简单的了解过。最近刚好要用到，就在各种 google 了，发现现在使用最广泛的就是 Grunt，中文的学习资料和相应的任务插件也很多。而 Gulp 貌似最近才火起来的吧，第三方插件没有 Grunt 那么多。但是个人对 Gulp 第一印象比较好，感觉写起来更加方便，更有 DSL 感觉。</p>
<div style="width: 20%; margin-left: auto; margin-right:auto"><br><img src="/images/gulp-2x.png"></div>

<a id="more"></a>
<h1 id="gulp_一些_API_的语法"><strong><em> gulp 一些 API 的语法</em></strong></h1><h2 id="gulp-task()_gulp-src()_gulp-dest()_gulp-watch()"><code>gulp.task()</code>　<code>gulp.src()</code>　<code>gulp.dest()</code>　<code>gulp.watch()</code></h2><p>下面是 <a href="https://github.com/dlmanning/gulp-sass.git" target="_blank" rel="external">gulp-sass</a>(用于将 scss 编译成 css 的插件) 插件的例子:<br><strong>eg-1：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)；</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.watch(<span class="string">'./scss/*.scss'</span>, [<span class="string">'sass'</span>]);</span><br></pre></td></tr></table></figure></p>
<p><strong>1. <code>task</code>方法是<code>gulp</code>用于定义一个具体任务的方法。如果需要执行任务，在终端执行<code>gulp task-name</code>。<br>　<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname-deps-fn" target="_blank" rel="external"><code>task</code></a> 方法的语法如:</strong></p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>gulp.task(name[, deps], fn)</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>name</code></strong><br>　　类型：<code>String</code>， 指任务名，就像上述的<strong><code>eg-1</code></strong>例子的<code>sass</code>。</p>
<p><strong><code>deps</code></strong><br>　　类型：<code>Array</code>，指在跑当前任务时，对其它任务的依赖。也就是要执行当前任务，会先执行这些依赖的任务。如: <code>gulp.task(&#39;demo&#39;, [&#39;demo1&#39;, &#39;demo2&#39;], function(){ });</code>会先同时执行任务<code>&#39;demo1&#39;, &#39;demo2&#39;</code>，最后执行任务<code>&#39;demo&#39;</code>。<br><strong><code>fn</code></strong><br>　　类型：<code>function</code>，指运行任务时，要执行的具体操作的内容。</p>
</blockquote>
<p><strong>2. <code>src</code>方法是指定源文件的输入路径，<code>pipe</code>有点像是封闭的“流水线”，某个产品经过上一个工序处理后，就转入下一个工序去处理，直到完成。也就是将上一步的输出转化下一步的输入的中间者。<br>　<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options" target="_blank" rel="external"><code>src</code></a> 方法的语法如:</strong></p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>gulp.src(globs[, options])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>globs</code></strong><br>　　类型：<code>String</code> 或 <code>Array</code>，指定源文件的路径，可以是单个路径，也可以是个路径数组。<br>　　路径匹配支持通配符：<br>　　　　1. <code>app.js</code>　　　　指定具体文件<br>　　　　2. <code>js/*</code>　　　　　匹配 js 目录下所有的文件，不包括子文件夹<br>　　　　3. <code>js/*.js</code>　　　 匹配 js 目录下所有的扩展名为 .js 的文件，不包括子文件夹<br>　　　　4. <code>js/*/*.js</code>　　匹配 js 目录下第一层子文件夹里的扩展名为 .js 的文件<br>　　　　5. <code>js/**/*.js</code>　 匹配 js 目录下所有文件夹层次下扩展名为 .js 的文件<br>　　　　6. <code>!js/try.js</code>　 不包括 try.js 文件，在前五条文件匹配模式前加<code>!</code>，就忽略掉相应的文件</p>
<p><strong><code>options</code></strong><br>　　类型：<code>Object</code>，有3个属性<code>buffer</code>，<code>read</code>，<code>base</code>。<br>　　　<strong><em><code>options.butter</code></em></strong><br>　　　　类型：<code>Boolean</code>，默认：<code>true</code><br>　　　　<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#optionsbuffer" target="_blank" rel="external">gulp-api</a> 上描述到，如设置为<code>false</code>，返回的文件内容将会以数据流的形式体现，而不是数据<br>　　　　块的形式。还提示到有可能一些插件没有实现支持数据流的形式。<br>　　　　(表示不太明白，有待研究。-_-|||)<br>　　　<strong><em><code>options.read</code></em></strong><br>　　　　类型：<code>Boolean</code>，默认：<code>true</code><br>　　　　返回的文件内容为<code>null</code>，不执行读取文件操作。<br>　　　<strong><em><code>options.base</code></em></strong><br>　　　　类型：<code>String</code><br>　　　　设置输出路径以某个路径的某个组成部分为基础向后拼接。具体例子可以参考 <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#optionsbase" target="_blank" rel="external">gulp-api</a>。</p>
</blockquote>
<p><strong>3. <code>dest</code>方法是指定被处理完的文件的输出路径，就像<code>eg-1</code>例子里的<code>gulp.dest(&#39;./css&#39;)</code>意思就是将编译完成的 css 文件保存到 <code>/css</code>目录中。<br>　<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpdestpath-options" target="_blank" rel="external"><code>dest</code></a> 方法的语法如:</strong></p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>gulp.dest(path[, options])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>path</code></strong><br>　　类型：<code>String</code> 或 <code>Function</code>，指定输出文件的文件夹路径，可以是字符串，也可以是一个返回文件夹路径的函数。</p>
<p><strong><code>options</code></strong><br>　　类型：<code>Object</code>，有2个属性<code>cwd</code>，<code>mode</code>。<br>　　　<strong><em><code>options.cwd</code></em></strong><br>　　　　类型：<code>String</code>，默认：<code>process.cwd()</code><br>　　　　 设置输出文件夹路径的相对路径，默认为当前脚本的工作目录的路径。<br>　　　<strong><em><code>options.mode</code></em></strong><br>　　　　类型：<code>String</code>，默认：<code>0777</code><br>　　　　设置被创建文件夹的权限。</p>
</blockquote>
<p><strong>4. <code>watch</code>方法是用于监听文件变化，文件一修改就会执行指定的任务。在<code>eg-1</code>例子中，通过监听<code>&#39;./scss/*.scss&#39;</code>文件，一旦文件发生修改就会执行任务<code>sass</code>。<br>　<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb" target="_blank" rel="external"><code>watch</code></a> 方法的语法如:</strong></p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>glob</code></strong><br>　　类型：<code>String</code> 或 <code>Array</code>，指定源文件的路径，可以是单个路径，也可以是个路径数组。路径匹配和上述<code>gulp.src()</code>方法路径匹配的模式一样。</p>
<p><strong><code>opts</code></strong><br>　　类型：<code>Object</code>，有4个属性<code>interval</code>，<code>debounceDelay</code>，<code>mode</code>，<code>cwd</code>。<br>　　具体可以参考<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#opts" target="_blank" rel="external">gulp-api</a>这里就不一一介绍了。</p>
<p><strong><code>tasks</code></strong><br>　　类型：<code>Array</code>，监听到文件变化后，要被执行的任务的名字组成的数组。</p>
<p><strong><code>cb(event)</code></strong><br>　　类型：<code>Function</code>，监听到变化后，回调的函数。会传递出一个对象类型的<code>event</code>参数。<br>　　　<strong><em><code>event.type</code></em></strong><br>　　　　类型：<code>String</code>，表示操作的类型：added, changed or deleted<br>　　　<strong><em><code>event.path</code></em></strong><br>　　　　类型：<code>String</code>，被修改文件的路径。</p>
</blockquote>
<h1 id="gulp-nodemon_和_gulp-livereload_配置："><strong><em> gulp-nodemon 和 gulp-livereload 配置：</em></strong></h1><h2 id="gulp安装"><code>gulp</code>安装</h2><p>全局安装:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure></p>
<p>安装在项目开发环境:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure></p>
<h2 id="gulp-nodemon和gulp-livereload安装"><code>gulp-nodemon</code>和<code>gulp-livereload</code>安装</h2><ul>
<li><a href="https://github.com/JacksonGariety/gulp-nodemon" target="_blank" rel="external">gulp-nodemon</a> 是重启服务器的插件。</li>
<li><a href="https://github.com/vohof/gulp-livereload.git" target="_blank" rel="external">gulp-livereload</a> 后端控制前端同步刷新，不过需要依赖 chrome 插件 LiveReload</li>
</ul>
<p>安装:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-nodemon gulp-livereload --save-dev</span><br></pre></td></tr></table></figure></p>
<p>为了能让服务器可以控制 chrome 自动刷新，需要安装 <a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="external">LiveReload</a> 插件。</p>
<p><img src="/images/livereload.png" style="height=200px"></p>
<h2 id="gulpfile-js配置"><code>gulpfile.js</code>配置</h2><p>在工程的目录下，新建 gulpfile.js 文件。如下简单的配置:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入 gulp 和 nodemon livereload 插件</span></span><br><span class="line"><span class="keyword">var</span> gulp       = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> nodemon    = <span class="built_in">require</span>(<span class="string">'gulp-nodemon'</span>);</span><br><span class="line"><span class="keyword">var</span> livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些文件的路径</span></span><br><span class="line"><span class="keyword">var</span> paths = &#123;</span><br><span class="line">    client: [</span><br><span class="line">    <span class="string">'client/javascripts/**/*.js'</span>,</span><br><span class="line">    <span class="string">'client/stylesheets/**/*.css'</span></span><br><span class="line">    ],</span><br><span class="line">    server: &#123;</span><br><span class="line">        index: <span class="string">'app.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodemon 的配置</span></span><br><span class="line"><span class="keyword">var</span> nodemonConfig = &#123;</span><br><span class="line">    script : paths.server.index,</span><br><span class="line">    ignore : [</span><br><span class="line">        <span class="string">"tmp/**"</span>,</span><br><span class="line">        <span class="string">"public/**"</span>,</span><br><span class="line">        <span class="string">"views/**"</span></span><br><span class="line">    ],</span><br><span class="line">    env    : &#123;</span><br><span class="line">        <span class="string">"NODE_ENV"</span>: <span class="string">"development"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 nodemone 跑起服务器</span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>, [<span class="string">'livereload'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nodemon(nodemonConfig);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当客户端被监听的文件改变时，刷新浏览器</span></span><br><span class="line">gulp.task(<span class="string">'livereload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    livereload.listen();</span><br><span class="line">    <span class="keyword">var</span> server = livereload();</span><br><span class="line">    <span class="keyword">return</span> gulp.watch(paths.client, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        server.changed(event.path);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// develop 任务， 同时开启 serve、livereload 任务</span></span><br><span class="line">gulp.task(<span class="string">'develop'</span>, [<span class="string">'serve'</span>, <span class="string">'livereload'</span>]);</span><br></pre></td></tr></table></figure></p>
<p><strong>这里只是写了一些，我在体验<code>gulp</code>时，总结的一些东西(方便自己记忆^_^)。如果需要更详细的介绍可以看我参考的那些链接。</strong></p>
<p><strong><em>gulp, 你是那么美。。。</em></strong></p>
<h2 id="参考">参考</h2><ul>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">gulp-api-docs</a></li>
<li><a href="http://segmentfault.com/blog/laopopo/1190000000372547" target="_blank" rel="external">前端构建工具gulp入门教程</a></li>
<li><a href="http://www.html-js.com/article/2083" target="_blank" rel="external">gulp构建进阶</a></li>
<li><a href="http://www.dbpoo.com/getting-started-with-gulp/" target="_blank" rel="external">Gulp安装及配合组件构建前端开发一体化</a></li>
<li><a href="http://javascript.ruanyifeng.com/tool/gulp.html#toc2" target="_blank" rel="external">Gulp：任务自动管理工具</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://gulpjs.com/">Gulp</a>，是一个自动化任务运行工具(就是让一些如: 图片压缩，js合并，Sass 编译成 CSS，测试，重启服务器等操作，能自动运行的工具。)，和 <a href="http://gruntjs.com/">Grunt</a> 是同一类型的工具。<br>　　表示之前没有配置过这两类的工具，只是简单的了解过。最近刚好要用到，就在各种 google 了，发现现在使用最广泛的就是 Grunt，中文的学习资料和相应的任务插件也很多。而 Gulp 貌似最近才火起来的吧，第三方插件没有 Grunt 那么多。但是个人对 Gulp 第一印象比较好，感觉写起来更加方便，更有 DSL 感觉。</p>
<div style="width: 20%; margin-left: auto; margin-right:auto"><br><img src="/images/gulp-2x.png" /></div>]]>
    
    </summary>
    
      <category term="gulp" scheme="http://aikin.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ipad 添加 QQ 邮件账户]]></title>
    <link href="http://aikin.github.io/2014/10/04/add-qq-mail-into-ipad-air/"/>
    <id>http://aikin.github.io/2014/10/04/add-qq-mail-into-ipad-air/</id>
    <published>2014-10-04T10:05:39.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>首先要先确定 QQ 邮箱有没有开启 POP3/SMTP服务 和 IMAP/SMTP服务。<ul>
<li>登录 QQ 邮箱，依次点击‘设置’ -&gt; ‘账户’。</li>
<li>然后找到 <code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code>，开启<code>POP3/SMTP服务</code>和<code>IMAP/SMTP服务</code>，保存更改。<br><img src="http://aikin-blog-images.qiniudn.com/qq-mail-confing.png" alt="mail-config"></li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li>接下来就是在 ipad 上添加邮箱账户。<ul>
<li>打开 ipad 的‘设置’ -&gt; ‘邮件、通讯录、日历’，然后依次点击‘添加账户’ -&gt; ‘其他’       -&gt; ‘添加邮件账户’。<br> <img width="400px" src="http://aikin-blog-images.qiniudn.com/create-qq-mail.jpg"></li>
<li>依次填入名称、电子邮箱、密码、描述。其中名称和描述可以随便写。填入完成后，然后点击     下一步。</li>
<li>接下来需要填写，收件服务器和发件服务器的主机名。分别填入收件服务器主机名:             <code>imap.qq.com</code>，发件服务器主机名: <code>smtp.qq.com</code>，点击下一步。 如图:<br> <img width="400px" src="http://aikin-blog-images.qiniudn.com/qq-mail-last-config.jpg"></li>
<li>如果操作无误的话将会出现选项是否存储，点击存储后，QQ 邮箱就可以在 ipad 的邮件     app 中找到。<br><img width="400px" src="http://aikin-blog-images.qiniudn.com/qq-mail-save.jpg"></li>
</ul>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>首先要先确定 QQ 邮箱有没有开启 POP3/SMTP服务 和 IMAP/SMTP服务。<ul>
<li>登录 QQ 邮箱，依次点击‘设置’ -&gt; ‘账户’。</li>
<li>然后找到 <code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code>，开启<code>POP3/SMTP服务</code>和<code>IMAP/SMTP服务</code>，保存更改。<br><img src="http://aikin-blog-images.qiniudn.com/qq-mail-confing.png" alt="mail-config"></li>
</ul>
</li>
</ol>]]>
    
    </summary>
    
      <category term="生活" scheme="http://aikin.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS 事件]]></title>
    <link href="http://aikin.github.io/2014/09/26/angular-events/"/>
    <id>http://aikin.github.io/2014/09/26/angular-events/</id>
    <published>2014-09-26T11:30:23.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　AngularJS 事件系统并不与浏览器的事件系统相通，这意味着，我们只能在作用域上监听 AngularJS 事件而不是 DOM 事件。由于作用域是有层次的(既是继承关系)，所以可以在作用域链上传递事件。在传递事件前，需要先了解触发事件的作用域和处理事件的作用域的关系，这样我们才可以判断事件是向上传递还是向下广播。</p>
<a id="more"></a>
<h2 id="a-_事件如何传播">a. 事件如何传播</h2><p>　　什么时候需要向上传递事件？当处理事件的作用域为触发事件的作用域的父级作用域时，就需要将事件向上传递。同理，当处理事件的作用域为触发事件的作用域的子级作用域时，就需要将事件向下传递。<br><strong> 1. 使用<code>$emit</code>向上传递事件 </strong><br>　　使用<code>$emit</code>将事件沿着作用域链向上传递，即从子作用域到父作用域。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>scope.$emit(name, args)</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>name</code></strong><br>　　类型：<code>String</code>，要触发事件的名称。</p>
<p><strong><code>args</code></strong><br>　　参数集合，可以是一个也可以是多个，作为对象传递到事件监听者中。</p>
</blockquote>
<p><strong>eg-1：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scope.$emit(&#39;just-test-emit&#39;, [&#39;first&#39;], [&#39;second&#39;]);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>eg-1</strong>中，<code>just-test-emit</code>为事件名称，而<code>[first]</code> 和<code>[second]</code>为传递到事件监听者中的参数。</li>
<li>在<code>$emit()</code>事件函数调用后，事件会从子作用域冒泡到父作用域。在触发事件的作用域之上的所有作用域都会收到这个事件的通知。</li>
</ul>
<p><strong> 2. 使用<code>$broadcast</code>向下广播事件 </strong><br>　　<code>$broadcast</code>和<code>$emit</code>用法很类似，只是<code>$broadcast</code>是将事件沿着作用域向下传递，即从父作用域到子作用域。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>scope.$broadcast(name, args)</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>name</code></strong><br>　　类型：<code>String</code>，要触发事件的名称。</p>
<p><strong><code>args</code></strong><br>　　参数集合，可以是一个也可以是多个，作为对象传递到事件监听者中。</p>
</blockquote>
<p><strong>eg-2：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scope.$broadcast(&#39;just-test-broadcast&#39;, [&#39;first&#39;], [&#39;second&#39;]);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>在<code>$broadcast()</code>事件函数调用后，每个在子作用域注册了事件的监听者都会收到这个事件通知。</li>
</ul>
<p><strong> 3. 使用<code>$on</code>监听事件 </strong><br>　　使用<code>$on</code>根据事件的名称，注册一个监听者。同时<code>$on</code>函数会返回一个反注册函数，我们可以通过调用这个反注册函数取消事件监听者。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>scope.$on(name, listener)</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>name</code></strong><br>　　类型：<code>String</code>，要监听的事件名称。</p>
<p><strong><code>listener</code></strong><br>　　类型：<code>Function</code>，事件监听者。<br>　　函数的格式:<code>function(event, args...)</code>，AngularJS会把<code>event</code>对象作为第一个参数传给正在监听事件的监听者(不管是自定义的事件还是AngularJS内置的事件)。<code>args</code>为触发事件时传递给事件监听者的参数集合。<code>event</code>(事件)对象属性:<br>　　　<strong><em><code>event.targetScope</code></em></strong><br>　　　　类型：<code>Scope</code>，表示事件触发所在的那个作用域。<br>　　　<strong><em><code>event.currentScope</code></em></strong><br>　　　　类型：<code>Scope</code>，当前事件处理的作用域。<br>　　　<strong><em><code>event.name</code></em></strong><br>　　　　类型：<code>String</code>，事件的名称。<br>　　　<strong><em><code>event.stopPropagation</code></em></strong><br>　　　　类型：<code>Function</code>，调用后会取消事件的冒泡，也就是取消通过<code>$emit</code>触发的事件进一步在作用域链上向上传递。<br>　　　<strong><em><code>event.preventDefault</code></em></strong><br>　　　　类型：<code>Function</code>，调用后会将<code>defaultPrevented</code>设置为<code>true</code>，同时告诉子作用域无需处理这个事件，但是不能阻止事件的传播。<br>　　　<strong><em><code>event.defaultPrevented</code></em></strong><br>　　　　类型：<code>Boolean</code>。</p>
</blockquote>
<h2 id="b-_事件相关的核心服务">b. 事件相关的核心服务</h2><ul>
<li><strong> 核心系统的<code>$emitted</code>事件 </strong><br>　　下面的事件从指令向上传递到包含指令调用的作用域。</li>
</ul>
<p>　　1. <code>$includeContentRequested</code><br>　　  这个事件从调用<code>ngInclude</code>的作用域向上传递。每次<code>ngInclude</code>的内容被请求时，都会被触发。<br>　　2. <code>$includeContentLoaded</code><br>　　  当<code>ngInclude</code>的内容重新加载时，将会从<code>ngInclude</code>指令上触发。<br>　　3. <code>$includeContentError</code><br>　　  当HTTP请求模板错误时触发。<br>　　4. <code>$viewContentLoaded</code><br>　　  每当<code>ngView</code>内容被重新加载时，将会从当前<code>ngView</code>作用域向上传递事件。</p>
<ul>
<li><strong> 核心系统的<code>$broadcast</code>事件 </strong><br>　　1. <code>$locationChangeStart</code><br>　　  当 AngularJS 从 $location 服务(通过$location.path()、$location.search()等)对浏览器的地址作更新时，会触发<code>$locationChangeStart</code>事件。<br>　　2. <code>$locationChangeSuccess</code><br>　　  当且仅当浏览器的地址变更成功后，同时又没有阻止<code>$locationChangeStart</code>事件的情况下，<code>$locationChangeSuccess</code>事件会从<code>$rootScope</code>作用域向下广播出来。<br>　　3. <code>$routeChangeStart</code><br>　　  在路由变更发生之前，<code>$routeChangeStart</code>事件会从<code>$rootScope</code>作用域广播出来。也就是在路由服务开始解析路由变更所需的所有依赖项时。<br>　　4. <code>$routeChangeSuccess</code><br>　　  在所有路由依赖项跟着<code>$routeChangeStart</code>被解析后，<code>$routeChangeSuccess</code>事件就会从<code>$rootScope</code>作用域上广播出来。<code>ngView</code>指令使用<code>$routeChangeSuccess</code>事件来获悉何时实例化控制器并渲染视图。<br>　　5. <code>$routeChangeError</code><br>　　  如果路由对象上任意的<code>resolve</code>属性被拒绝，<code>$routeChangeError</code>就会被触发。<br>　　6. <code>$routeUpdate</code><br>　　  如果<code>$routeProvider</code>上的<code>reloadOnSearch</code>属性被设置成false，并且使用了控制器的同一实例，<code>$routeUpdate</code>就会被触发，同时会从作用域<code>$rootScope</code>向下传递。<br>　　7. <code>$destroy</code><br>　　  在作用域被销毁之前，<code>$destroy</code>事件会在作用域上广播，这样子作用域在父作用域被真正移除之前可以先清理自身。<br>　　  例如，如果在控制器中有一个正在运行的<code>$interval</code>，我们不希望在包含它的控制器已经不存在的情况下，它还继续触发，就可以在作用域销毁前，先取消掉<code>$interval</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> autoPolling = $interval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    initData();</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">$scope.stopAutoPolling = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (angular.isDefined(autoPolling)) &#123;</span><br><span class="line">        $interval.cancel(autoPolling);</span><br><span class="line">        autoPolling = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$scope.$on(<span class="string">'$destroy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.stopAutoPolling();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><ul>
<li>《Angular JS权威指南》</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　AngularJS 事件系统并不与浏览器的事件系统相通，这意味着，我们只能在作用域上监听 AngularJS 事件而不是 DOM 事件。由于作用域是有层次的(既是继承关系)，所以可以在作用域链上传递事件。在传递事件前，需要先了解触发事件的作用域和处理事件的作用域的关系，这样我们才可以判断事件是向上传递还是向下广播。</p>]]>
    
    </summary>
    
      <category term="angularjs" scheme="http://aikin.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://aikin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《JavaScipt 语言精粹》养分]]></title>
    <link href="http://aikin.github.io/2014/09/13/javascript-the-good-parts/"/>
    <id>http://aikin.github.io/2014/09/13/javascript-the-good-parts/</id>
    <published>2014-09-13T12:23:15.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="《JavaScipt_语言精粹》_作者:_Douglas_Crockford">《JavaScipt 语言精粹》 作者: Douglas Crockford</h2><h4 id="拿到这本书的时候就读错了名字。悲剧啊。内容写的挺详细的，就是书中用得铁路图实在看着有点费劲。">拿到这本书的时候就读错了名字。悲剧啊。内容写的挺详细的，就是书中用得<strong>铁路图</strong>实在看着有点费劲。</h4><h3 id="养分">养分</h3><p><strong>1. <code>beget</code>创建一个使用原对象作为其原型的新的对象。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.beget !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.beget = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">       F.prototype = obj;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>2. 使用 <code>hasOwnProperty</code> 方法来判断对象是否拥有独有的属性。这个方法不会检查原型链的属性。</strong></p>
<p><strong>3. 减少全局变量污染: </strong></p>
<ul>
<li>可以把所有的全局变量放在一个全局对象里面。 把多个全局变量都整理在一个名称空间下。</li>
<li>也可以使用闭包来实现。</li>
</ul>
<p><strong>4. 模块，可以使用函数和闭包来构造模块。模块是一个提供接口却隐藏状态与实现的函数或对象。几乎可以完全摒弃全局变量的使用。通过特权函数(可以理解为接口)访问外部函数的局部变量。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleDemo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _name = <span class="string">''</span>;</span><br><span class="line">	<span class="keyword">var</span> _age = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		setName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">			_name = name;</span><br><span class="line">		&#125;,</span><br><span class="line">		setAge: <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">			_age = age;</span><br><span class="line">		&#125;,</span><br><span class="line">		getProfile: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'name:'</span> + _name + <span class="string">' age:'</span> + _age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = moduleDeme();</span><br><span class="line"><span class="built_in">module</span>.setName(<span class="string">'aikin'</span>);</span><br><span class="line"><span class="built_in">module</span>.setAge(<span class="number">24</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">module</span>.getProfile();</span><br><span class="line"></span><br><span class="line"><span class="comment">// _name 和 _age 都是匿名函数 moduleDemo 的局部变量(私有变量)。函数 moduleDemo // 内，通过闭包的方式提供了访问_name 和 _age 的特权函数(也可以理解我接口)。</span></span><br></pre></td></tr></table></figure>
<p><strong>5. 级联， 就是有点像函数式编程的样子。通过不断‘点’来调用，如 jquery对某个元素操作:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#demoId'</span>)</span><br><span class="line">.removeClass(<span class="string">'yellow'</span>)</span><br><span class="line">.addClass(<span class="string">'blue'</span>)</span><br><span class="line">.on(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里调用的方法都是同一个对象的，然后每个方法返回的变量是 this 。</span></span><br></pre></td></tr></table></figure></p>
<p><strong>6. 套用，使用闭包实现 curry 化。调用一个函数，将传入的参数，作为闭包使用的变量。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add = curry(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">4</span>));  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p><strong>7. 记忆，使用对象缓存(记忆)先前操作的结果，从而避免无用功操作。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">2</span> ? n : fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'//'</span> + i + <span class="string">': '</span> + fibonacci(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 记忆模式</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> memo = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> fib  = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = memo[n];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> result !== <span class="string">'number'</span>) &#123;</span><br><span class="line">            result  = fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">            memo[n] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> fib;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构 让递归流程不变，初始化存储结果和基本公式</span></span><br><span class="line"><span class="keyword">var</span> memoizer = <span class="function"><span class="keyword">function</span>(<span class="params">memo, fundamental</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> shell = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = memo[n];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> result !== <span class="string">'number'</span>) &#123;</span><br><span class="line">        	result  = fundamental(shell, n);</span><br><span class="line">            memo[n] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> shell;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibonacci = memoizer([<span class="number">0</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span>(<span class="params">shell, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> shell(n - <span class="number">1</span>) + shell(n - <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现阶乘</span></span><br><span class="line"><span class="keyword">var</span> factorial = memoizer([<span class="number">1</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span>(<span class="params">shell, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * shell(n - <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>8. 函数化。解决继承模式无法设置保护隐私问题。实现更好的风筝和信息隐藏。用函数化的样式创建一个对象，并且该对象的所有方法都不使用 this 或 that，那么该对象就是持久性的。一个持久性对象就是一个简单功能函数集合。</strong></p>
<p>函数化构造器的伪代码模板:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> constructor = <span class="function"><span class="keyword">function</span>(<span class="params">spec, my</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that;	<span class="comment">// 其他的私有实例变量</span></span><br><span class="line">    my = my || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    把共享的变量和函数加到 my 中</span><br><span class="line"></span><br><span class="line">    that = 一个新对象</span><br><span class="line"></span><br><span class="line">    添加给 that 的特权方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// spec 对象包含构造器需要构造一个新实例的所有信息。</span></span><br><span class="line"><span class="comment">// my 对象是一个为继承链中的构造器提供秘密共享的容器。my 对象可变参数。</span></span><br></pre></td></tr></table></figure>
<p><strong>9. 部件。就是通过调用一个函数返回一个对象。而被调用的函数就像是一个中间者，函数的外部不需要知道内部发生什么。把传入的参数，经过函数内部的加工后，而具有了某些或某类的功能和属性。这些功能和属性就像部件一样。</strong></p>
<p>构造一个能添加简单事件处理特性到任何对象上的函数。它会给对象添加一个 on 方法、一个 fire 方法和一个私有的事件注册表对象(可以把这个函数理解为一个小车间，一个对象经过这个小车间加工后，就组装了部件 on 方法、fire 方法、和事件注册表)。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventuality = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> registry = &#123;&#125;;</span><br><span class="line">    that.fire = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> array,</span><br><span class="line">            func,</span><br><span class="line">            handler,</span><br><span class="line">            i,</span><br><span class="line">            type = <span class="keyword">typeof</span> event === <span class="string">'string'</span> ?</span><br><span class="line">                   event : event.type;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (registry.hasOwnProperty(type)) &#123;</span><br><span class="line">            array = registry[type];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.lenght; i += <span class="number">1</span>) &#123;</span><br><span class="line">                handler = array[i];</span><br><span class="line">                func = handler.method;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> func === <span class="string">'string'</span>) &#123;</span><br><span class="line">                    func = <span class="keyword">this</span>[func];</span><br><span class="line">                &#125;</span><br><span class="line">                func.apply(<span class="keyword">this</span>, handler.parameters || [event]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    that.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, method, parameters</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> handler = &#123;</span><br><span class="line">            method： method,</span><br><span class="line">            parameters: parameters</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (registry.hasOwnProperty(type)) &#123;</span><br><span class="line">            registry[type].push(handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            registry[type] = [handler];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>eventuality(that); 用这种方式，一个构造函数可以从一套部件中组装处对象来。</p>
<p><strong>10. 正则表达式，嵌套的正则表达式也能导致极恶劣的性能问题，因此简单是最好的策略。使用非捕获型分组来代替少量不优美的捕获型分组是很好的方法，因为捕获会有性能上的损失。</strong></p>
<p>解析 url 例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parse_url = <span class="regexp">/^(?:([A-Za-z]+):)?(\/&#123;0,3&#125;)([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/</span>;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://www.ora.com:80/googparts?q#fragment"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = parse_url.exec(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["http://www.ora.com:80/googparts?q#fragment", "http", "//", "www.ora.com", "80", "googparts", "q", "fragment"]</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>^</code> 表示这个字符串的开始。</li>
<li><code>(?:([A-Za-z]+):)?</code> 用于匹配一个协议名，当仅当它之后跟随一个<code>:</code>的时候才匹配。<code>(?: ... )</code> 表示一个非捕获型分组。后缀<code>?</code>表示这个分组是可选的，他表示重复 0或1次。<code>(...)</code>表示一个捕获型分组，一个捕获型分组将复制它所匹配的文本，并将其放入 result 数组中，每个捕获型分组都将被指定一个编号。第一个捕获型分组的编号是 1， 所以该分组所匹配的文本拷贝将出现在 result[1] 中。<code>[...]</code>表示一个字符类，这个字符类<code>A-Za-z</code>包含26个大写字母和26个小写字母。连字符<code>-</code>表示范围从 A 到 Z。后缀<code>+</code>表示这个字符类将被匹配 1 次或多次。这组后面跟着字符<code>:</code>表示按字面进行匹配。</li>
<li><code>(\/{0,3})</code> 是捕获型分组 2。<code>\/</code>表示一个应该被匹配的 /(斜杠)。(反斜杠)表示转义。<code>{0,3}</code>表示 / 将被匹配0次，或者1到3次之间。</li>
<li><code>([0-9.\-A-Za-z]+)</code>  是捕获型分组 3。它将匹配一个主机名，由1个或多个数字、字母或 . 或 - 组成。因为 - 将被转义为 \- 以防止与表示范围的连字符相混淆。</li>
<li><code>(?::(\d+))?</code> 可选的匹配端口号的分组。它由一个前置 : 加上1一个或着多个数字而组成的序列。<code>(?::)</code>表示不会捕获<code>:</code>，只会捕获<code>:</code>后的数字。<code>\d</code>表示一个数字字符，<code>(\d+)</code>表示捕获型分组4， 1个或多个数字串将被捕获。</li>
<li><code>(?:\/([^?#]*))?</code> 可选的分组。<code>[^?#]</code>以一个<code>^</code>开始，表示这个字符类包含除了<code>?</code>和<code>#</code>之外的所有字符。<code>*</code>表示这个字符类将被匹配0次或多次。</li>
<li><code>(?:\?([^#]*))?</code> 是一个<code>?</code>开始的可选分组。<code>([^#]*)</code>是捕获型分组，包含0个或多个非<code>#</code>字符。</li>
<li><code>(?:#(.*))?</code> 以<code>#</code>开始，<code>.</code>将匹配除行结束符以外的所有字符。</li>
<li><code>$</code> 表示这个字非常的结束。</li>
</ul>
<p>判断是否为数字</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parse_number = <span class="regexp">/^-?\d+(?:\.\d*)?(?:e[+\-]?\d+)?$/i</span>;</span><br><span class="line"><span class="keyword">var</span> is_number    = parse_number.test(<span class="string">'1222.45'</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>(?:e[+\-]?\d+)?</code> 可选的非捕获型分组。它将匹配一个 e(或 E)，<code>[+\-]?</code>表示一个可选的正负号。<code>\d+</code>表示一个或多个数字。</li>
</ul>
<p><strong>11. 方法</strong></p>
<p><strong><em>array.concat(item…) 可以对数组进行浅拷贝，并将一个或多个参数item附加到新数组最后。</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>];</span><br><span class="line"><span class="keyword">var</span> c = a.concat(b, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// c 是 ['a', 'b', 'c', 'x', 'y', 'z', true];</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>array.slice(start, end) 对 array 中的一段做浅拷贝。</em></strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];&#10;var b = a.slice(0, 1);      // [&#39;a&#39;]&#10;var c = a.slice(1);         // [&#39;b&#39;, &#39;c&#39;]&#10;var d = a.slice(1, 2);      // [&#39;b&#39;];&#10;var e = a.slice(4);&#9;&#9;    // [];</span><br></pre></td></tr></table></figure></p>
<p><strong><em>array.splice(start, deleteCount, item…) 从 array 中移除一个或多个元素，并用新的 item 替换它们。item 是可选参数。</em></strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];&#10;var b = a.splice(1, 1, &#39;ache&#39;, &#39;bug&#39;);&#10;&#10;// a &#26159; [&#39;a&#39;, &#39;ache&#39;, &#39;bug&#39;, &#39;c&#39;];&#10;// b &#26159; [&#39;b&#39;];</span><br></pre></td></tr></table></figure></p>
<p><strong><em>string.charAt(pos)</em></strong><br><strong><em>string.chartCodeAt(pos)</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Curly'</span>;</span><br><span class="line"><span class="keyword">var</span> initial = name.chatAt(<span class="number">0</span>);    <span class="comment">// 'C'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherInitial = name.chatACodet(<span class="number">0</span>); <span class="comment">// 67</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>string.slice(start, end)</em></strong><br><strong><em>string.substring(start, end)</em></strong><br>这个两个方法相似，都是复制字符串的指定部分。但是 substring 不能 start 参数不能为负数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">'and in it he says "Any damn fool could'</span>;</span><br><span class="line"><span class="keyword">var</span> a 	 = text.slice(<span class="number">18</span>);       <span class="comment">// '"Any damn fool could'</span></span><br><span class="line"><span class="keyword">var</span> b 	 = text.slice(<span class="number">0</span>, <span class="number">3</span>);     <span class="comment">// 'and'</span></span><br><span class="line"><span class="keyword">var</span> c    = text.slice(-<span class="number">5</span>);		 <span class="comment">// 'could'</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>string.split(separator, limit)</em></strong><br>将字符串分割成数组。separator 可以是个字符串或正则表达式，limit是可选参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> digits = <span class="string">'0123456789'</span>;</span><br><span class="line"><span class="keyword">var</span> a      = digits.split(<span class="string">''</span>, <span class="number">5</span>);    <span class="comment">// ['0', '1', '2', '3', '456789']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text   = <span class="string">'last, first, middle'</span>;</span><br><span class="line"><span class="keyword">var</span> d      = text.split(<span class="regexp">/\s*,\s*/</span>);  <span class="comment">// ["last", "first", "middle"]</span></span><br><span class="line"><span class="keyword">var</span> e      = text.split(<span class="regexp">/\s*(,)\s*/</span>) <span class="comment">// ["last", ",", "first", ",", "middle"]</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="《JavaScipt_语言精粹》_作者:_Douglas_Crockford">《JavaScipt 语言精粹》 作者: Douglas Crockford</h2><h4 id="拿到这本书的时候就读错了名字。悲剧啊。内容写的挺详细的，就是书中用得铁路图实在看着有点费劲。">拿到这本书的时候就读错了名字。悲剧啊。内容写的挺详细的，就是书中用得<strong>铁路图</strong>实在看着有点费劲。</h4><h3 id="养分">养分</h3><p><strong>1. <code>beget</code>创建一个使用原对象作为其原型的新的对象。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.beget !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.beget = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">       F.prototype = obj;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="reading-notes" scheme="http://aikin.github.io/tags/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 mongoose 清除数据]]></title>
    <link href="http://aikin.github.io/2014/08/28/mongoose-remove-function/"/>
    <id>http://aikin.github.io/2014/08/28/mongoose-remove-function/</id>
    <published>2014-08-28T13:01:36.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="使用_mongoose_封装的方法来删除_mongodb_数据库中的_database、_collections、docs。">　　使用 mongoose 封装的方法来删除 mongodb 数据库中的 database、 collections、docs。</h3><ul>
<li><h3 id="删除数据库">删除数据库</h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dbUri = <span class="string">"mongodb://localhost/test"</span>;</span><br><span class="line">mongoose.connect(dbUri, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> db = mongoose.connection.db;</span><br><span class="line">    db.dropDatabase(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> cb(err);</span><br><span class="line">	    mongoose.disconnect();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="删除所有collections">删除所有collections</h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">async</span>    = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">var</span> _        = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dbUri = <span class="string">"mongodb://localhost/test"</span>;</span><br><span class="line"></span><br><span class="line">mongoose.connect(dbUri, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> db = mongoose.connection.db;</span><br><span class="line"></span><br><span class="line">    db.collections(<span class="function"><span class="keyword">function</span> (<span class="params">err, collections</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> collectionsName =</span><br><span class="line">                _(collections)</span><br><span class="line">                    .pluck(<span class="string">'collectionName'</span>)</span><br><span class="line">                    .filter(<span class="function"><span class="keyword">function</span>(<span class="params">collectionName</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> collectionName.split(<span class="string">'.'</span>)[<span class="number">0</span>] !== <span class="string">'system'</span>;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .value();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span>.forEach(</span><br><span class="line">            collectionsName,</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">collectionName, done</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                db.dropCollection(collectionName, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err &amp;&amp; err.message != <span class="string">'ns not found'</span>) <span class="keyword">return</span> done(err);</span><br><span class="line">                    done(<span class="literal">null</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                mongoose.connection.close(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="删除所有_collections_下的_docs">删除所有 collections 下的 docs</h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">async</span>    = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">var</span> _        = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dbUri = <span class="string">"mongodb://localhost/test"</span>;</span><br><span class="line"></span><br><span class="line">mongoose.connect(dbUri, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> db = mongoose.connection.db;</span><br><span class="line"></span><br><span class="line">    db.collections(<span class="function"><span class="keyword">function</span>(<span class="params">err, collections</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> collectionsWithoutSystem = _.filter(collections, <span class="function"><span class="keyword">function</span>(<span class="params">collection</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> collection.collectionName.split(<span class="string">'.'</span>)[<span class="number">0</span>] !== <span class="string">'system'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">async</span>.forEach(</span><br><span class="line">            collectionsWithoutSystem,</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">collection, done</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                collection.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) <span class="keyword">return</span> done(err);</span><br><span class="line">                    done(<span class="literal">null</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                mongoose.connection.close(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="使用_mongoose_封装的方法来删除_mongodb_数据库中的_database、_collections、docs。">　　使用 mongoose 封装的方法来删除 mongodb 数据库中的 database、 collections、docs。</h3><ul>
<li><h3 id="删除数据库">删除数据库</h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dbUri = <span class="string">"mongodb://localhost/test"</span>;</span><br><span class="line">mongoose.connect(dbUri, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> db = mongoose.connection.db;</span><br><span class="line">    db.dropDatabase(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> cb(err);</span><br><span class="line">	    mongoose.disconnect();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="mongoose" scheme="http://aikin.github.io/tags/mongoose/"/>
    
      <category term="nodejs" scheme="http://aikin.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[“随心所欲”指定 this 的绑定对象]]></title>
    <link href="http://aikin.github.io/2014/08/16/js-call-apply-bind/"/>
    <id>http://aikin.github.io/2014/08/16/js-call-apply-bind/</id>
    <published>2014-08-16T12:36:47.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　有的时候，函数的调用者(<code>this</code>关键字的绑定对象)并不是你期望的对象。面对这样情况，我们希望可以自定义<code>this</code>的绑定对象。在 javascript 中可以是用<strong><em><code>call apply bind</code></em></strong>方法来指定 this 关键字的绑定对象。
　</p>
<h3 id="a-_call_方法">a. <strong>call 方法</strong></h3><h4 id="先看个例子：">先看个例子：</h4><p><strong>eg-1：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    fullName: <span class="string">'aikin'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">    fullName: <span class="string">'you'</span></span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speakFullName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.fullName);</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line">speakFullName();           <span class="comment">//=&gt; undefined</span></span><br><span class="line">speakFullName.call(me);    <span class="comment">//=&gt; aikin</span></span><br><span class="line">speakFullName.call(you);   <span class="comment">//=&gt; you</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li><p>在第一次直接调用函数<code>speakFullName()</code>后，函数的<code>this</code>关键字的绑定对象为全局对象，也就是<code>window</code>对象，同时在 <code>window</code> 对象中没有<code>fullName</code>这个属性，所以<code>undefined</code>也就产生了。</p>
</li>
<li><p>而第二次和第三次使用<strong><em><code>call</code></em></strong>方法来指定了，函数<code>speakFullName</code>的<code>this</code>关键字的绑定者，所以打印的结果就是，被绑定对象的<code>fullName</code>。</p>
</li>
</ul>
<p>　　关于<strong><em><code>call</code></em></strong>方法的参数，在<strong><em>eg-1</em></strong>的例子中调用<strong><em><code>call</code></em></strong>方法时，只给它传了一个参数。如果想传入多个参数，可以这样:<code>func.call(obj, arg1, arg2, ....)</code>，第一个参数是 <code>this</code>关键字要绑定的对象，其它的参数则是被调用函数所需要的参数。下面的语法介绍是引用于 <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">MDN</a>。</p>
<blockquote>
<p><strong><em>语法</em></strong><br>  <strong><code>fun.call(thisArg[, arg1[, arg2[, ...]]])</code></strong></p>
<p><strong><em>参数</em></strong><br>  <strong><code>thisArg</code></strong></p>
<ul>
<li>在<code>fun</code>函数运行时指定的<code>this</code>值。需要注意的是，指定的<code>this</code>值并不一定是该函数执行时真正<code>this</code>值，如果这个函数处于非严格模式下，则指定为<code>null</code>和<code>undefined</code>的<code>this</code>值会自动指向全局对象(浏览器中就是<code>window</code>对象)，同时值为原始值(数字，字符串，布尔值)的<code>this</code>会指向该原始值的自动包装对象。</li>
</ul>
<p><strong><code>arg1, arg2, ...</code></strong></p>
<ul>
<li>指定的参数列表。</li>
</ul>
</blockquote>
<p>来看的例子：<br><strong>eg-2：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    fullname : <span class="string">'aikin'</span>,</span><br><span class="line">    friends  : [<span class="string">'yuki'</span>, <span class="string">'bobi'</span>]</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFriend</span>(<span class="params">friend</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.friends.push(friend);</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line">addFriend.call(me, <span class="string">'kuki'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.friends);</span><br><span class="line">　</span><br><span class="line"><span class="comment">//=&gt; ["yuki", "bobi", "kuki"]</span></span><br></pre></td></tr></table></figure></p>
<p>　</p>
<h3 id="b-_apply()_方法">b. <strong>apply() 方法</strong></h3><p>　　<strong><code>apply</code></strong>方法和 <strong><code>call</code></strong>方法的区别在于参数的不同。</p>
<blockquote>
<p>该方法的作用和<strong><code>call</code></strong>方法类似，只有一个区别就是，<strong><code>call</code></strong>方法接受的是若干个参数的列表，而<strong><code>apply</code></strong>方法接受的是一个包含多个参数的数组（或类数组对象）。</p>
</blockquote>
<p>　　在<strong>eg-1</strong>和<strong>eg-2</strong>的例子同样可以使用<strong><code>apply</code></strong>来实现，如下：</p>
<p><strong>eg-3：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg-1 的例子，使用 apply 方法</span></span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    fullName: <span class="string">'aikin'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">    fullName: <span class="string">'you'</span></span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speakFullName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.fullName);</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line">speakFullName();            <span class="comment">//=&gt; undefined</span></span><br><span class="line">speakFullName.apply(me);    <span class="comment">//=&gt; aikin</span></span><br><span class="line">speakFullName.apply(you);   <span class="comment">//=&gt; you</span></span><br><span class="line">　</span><br><span class="line"><span class="comment">//eg-2的例子，使用 apply 方法</span></span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    fullname : <span class="string">'aikin'</span>,</span><br><span class="line">    friends  : [<span class="string">'yuki'</span>, <span class="string">'bobi'</span>]</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFriend</span>(<span class="params">friend</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.friends.push(friend);</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line">addFriend.apply(me, [<span class="string">'kuki'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(me.friends);</span><br><span class="line">　</span><br><span class="line"><span class="comment">//=&gt; ["yuki", "bobi", "kuki"]</span></span><br></pre></td></tr></table></figure></p>
<p>　　下面引用一下 <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">MDN</a> 对该方法语法的介绍。</p>
<blockquote>
<p><strong><em>语法</em></strong><br>  <strong><code>fun.apply(thisArg[, argsArray])</code></strong></p>
<p><strong><em>参数</em></strong><br>   <strong><code>thisArg</code></strong></p>
<ul>
<li>在<code>fun</code>函数运行时指定的<code>this</code>值。需要注意的是，指定的<code>this</code>值并不一定是该函数执行时真正<code>this</code>值，如果这个函数处于非严格模式下，则指定为<code>null</code>和<code>undefined</code>的<code>this</code>值会自动指向全局对象(浏览器中就是<code>window</code>对象)，同时值为原始值(数字，字符串，布尔值)的<code>this</code>会指向该原始值的自动包装对象。</li>
</ul>
<p><strong><code>argsArray</code></strong></p>
<ul>
<li>一个数组或者类数组对象，其中的数组元素将作为单独的参数传给<code>fun</code>函数。如果该参数的值为<code>null</code>或<code>undefined</code>，则表示不需要传入任何参数。</li>
</ul>
</blockquote>
<p>　</p>
<h3 id="c-_bind_方法">c. <strong>bind 方法</strong></h3><p>　　1. 通过使用<strong><code>bind</code></strong>方法，可以返回一个新的函数，而这个函数的<code>this</code>关键字绑定的对象和参数可以通过<strong><code>bind</code></strong>方法来，在函数调用前预先指定。</p>
<blockquote>
<ul>
<li><strong><code>bind</code></strong>方法会创建一个新函数，称为绑定函数.当调用这个绑定函数时,绑定函数会以创建它时传入<strong><code>bind</code></strong>方法的第一个参数作为<code>this</code>，传入<strong><code>bind</code></strong>方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.</li>
</ul>
</blockquote>
<p><strong>eg-4：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a + b);</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="string">'ai'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bindedAdd = add.bind(obj);</span><br><span class="line">　</span><br><span class="line">bindedAdd(<span class="string">'kin'</span>); <span class="comment">//=&gt; aikin</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>在上面的例子中，<code>add</code>函数通过调用<strong><code>bind</code></strong>方法，返回了一个绑定了<code>obj</code>对象的函数，并将返回的函数赋值给了<code>binedAdd</code>变量，这时函数<code>binedAdd</code>的<code>this</code>关键字的绑定对象就是<code>obj</code>。当调用<code>binedAdd()</code>时产生的结果，就相对于<code>add.call(obj, &#39;kin&#39;)</code>。</li>
</ul>
<p>关于<strong><code>bind</code></strong>的语法:
　</p>
<blockquote>
<p><strong><em>语法</em></strong><br>  <strong><code>fun.bind(thisArg[, arg1[, arg2[, ...]]])</code></strong></p>
<p><strong><em>参数</em></strong><br>   <strong><code>thisArg</code></strong></p>
<ul>
<li>当绑定函数被调用时，该参数会作为原函数运行时的this指向，当使用<code>new</code>操作符调用绑定函数时，该参数无效。</li>
</ul>
<p><strong><code>arg1, arg2, ...</code></strong></p>
<ul>
<li>当绑定函数被调用时，这些参数加上绑定函数本身的参数会按照顺序作为原函数运行时的参数。</li>
</ul>
</blockquote>
<p>　　2. 当要将一个对象的方法，作为回调函数直接传递给高阶函数(可以理解为用函数作为参数的函数)时。如果希望，传入的对象的方法，的调用者，还为该对象，就可以使用<strong><code>bind</code></strong>方法，让该对象绑定到回调函数的<code>this</code>关键字。</p>
<p><strong>eg-5：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    score    : <span class="number">90</span>,</span><br><span class="line">    getScore : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printScore</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我的分数：'</span> + callback());</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line">printScore(obj.getScore);            <span class="comment">//=&gt; 我的分数：undefined</span></span><br><span class="line">printScore(obj.getScore.bind(obj));  <span class="comment">//=&gt;我的分数：90</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>在<strong>eg-5</strong>的例子中，<code>printScore</code>函数接收一个回调函数作为参数。<code>obj</code>对象的<code>getScore</code>方法返回的是该对象的<code>score</code>。</p>
</li>
<li><p>当调用<code>printScore(obj.getScore)</code>时，打印出来的<code>score</code>为<code>undefined</code>。因为在函数体内调用回调函数时， 没有指定回调函数的调用者，也就是回调函数的<code>this</code>的绑定对象为全局对象(<code>window</code>)。</p>
</li>
<li><p>当调用<code>printScore(obj.getScore.bind(obj))</code>时，函数体内的回调函数的<code>this</code>关键字的绑定对象为<code>obj</code>。所以<code>this.score</code>的值为<code>obj</code>的<code>score</code>。</p>
</li>
</ul>
<p>　3. 还可以使用<strong><code>bind</code></strong>实现“柯里化”(本人理解就是为函数预先传入某些参数)。</p>
<p><strong>eg-6：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bind 的第一个参数为 null 时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> sumBind = sum.bind(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">sumBind(<span class="number">8</span>);  <span class="comment">//=&gt; 17</span></span><br><span class="line">　</span><br><span class="line"><span class="comment">//bind 的第一个参数为 obj 时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span> (<span class="params">age1, age2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.age + age1 + age2) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> averageBind = average.bind(obj, <span class="number">21</span>);</span><br><span class="line">averageBind(<span class="number">22</span>);  <span class="comment">//=&gt; 22</span></span><br></pre></td></tr></table></figure></p>
<p>　　</p>
<h3 id="这三方法都好有趣啊，让this绑定变得如此“随心所欲”。">这三方法都好有趣啊，让<code>this</code>绑定变得如此“随心所欲”。</h3><h3 id="this_is_so_cool-_coding_is_so_funny_-"><strong><code>this</code> is so cool. <code>coding is so funny ...</code></strong></h3><h2 id="参考">参考</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external">MDN, call</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">MDN, apply</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">MDN, bind</a></li>
<li>David Herman, 《Effective JavaScript》</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　有的时候，函数的调用者(<code>this</code>关键字的绑定对象)并不是你期望的对象。面对这样情况，我们希望可以自定义<code>this</code>的绑定对象。在 javascript 中可以是用<strong><em><code>call apply bind</code></em></strong>方法来指定 this 关键字的绑定对象。
　</p>
<h3 id="a-_call_方法">a. <strong>call 方法</strong></h3><h4 id="先看个例子：">先看个例子：</h4><p><strong>eg-1：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    fullName: <span class="string">'aikin'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">    fullName: <span class="string">'you'</span></span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speakFullName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.fullName);</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line">speakFullName();           <span class="comment">//=&gt; undefined</span></span><br><span class="line">speakFullName.call(me);    <span class="comment">//=&gt; aikin</span></span><br><span class="line">speakFullName.call(you);   <span class="comment">//=&gt; you</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://aikin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu 14.04 安装 Atom]]></title>
    <link href="http://aikin.github.io/2014/08/08/install-atom-on-ubuntu/"/>
    <id>http://aikin.github.io/2014/08/08/install-atom-on-ubuntu/</id>
    <published>2014-08-08T12:14:45.000Z</published>
    <updated>2015-07-10T14:31:02.000Z</updated>
    <content type="html"><![CDATA[<p>  <img src="/images/atom.png"></p>
<p> <a href="https://atom.io/" target="_blank" rel="external">Atom</a> 是 github 内部的编辑软件。按照 Github 的说法，这是一款非同一般的编辑器，是 21 世纪的创新产品，他们希望将来“从菜鸟到黑客都在使用 Atom 编写代码”。</p>
<a id="more"></a>
<ol>
<li><p>增加 Atom 源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:webupd8team/atom</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Atom</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install atom</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>  <img src='/images/atom.png' /></p>
<p> <a href="https://atom.io/">Atom</a> 是 github 内部的编辑软件。按照 Github 的说法，这是一款非同一般的编辑器，是 21 世纪的创新产品，他们希望将来“从菜鸟到黑客都在使用 Atom 编写代码”。</p>]]>
    
    </summary>
    
      <category term="atom" scheme="http://aikin.github.io/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript 中的 this 关键字]]></title>
    <link href="http://aikin.github.io/2014/08/05/js-this/"/>
    <id>http://aikin.github.io/2014/08/05/js-this/</id>
    <published>2014-08-05T12:14:33.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　what is this？ 在 javascript 中，每个 function 都有一个 this 关键字的隐私绑定。当调用某个 function 时，这个 function 的 this 绑定将会被确定。</p>
<p><strong>eg-1：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is ---'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">　</span><br><span class="line"><span class="comment">// this is ---Window &#123;top: Window, window: Window, location: Location, external: Object, chrome: Object…&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>eg-2：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test2 = &#123;</span><br><span class="line">    <span class="built_in">console</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'this is ---'</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">test2.console();</span><br><span class="line">　</span><br><span class="line"><span class="comment">// this is ---Object &#123;console: function&#125;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>对于 <strong>eg-1</strong> 代码执行的结果可以看出，调用 <code>test()</code> 后， test函数 this 绑定的对象是 window 对象。因为在定义 test 函数的时候，这个函数会被加在 window 这个全局对象中，其实在执行 <code>test()</code> 的时候，相当于 <code>window.test()</code>，这样可以明显的看出，调用 <code>test()</code> 的对象是 window，也就是 this 绑定的对象是 window 。</p>
</li>
<li><p>在 <strong>eg-2</strong> 中，当执行 <code>test2.console()</code> 时，调用 console 方法(函数)的对象为 test2，也就是 console 方法(函数)的 this 的值，就绑定了 test2 对象。</p>
</li>
</ul>
<a id="more"></a>
<p>　　上面两个例子，描述的只是在函数体内的 this关键字。让我们来看一下，在全局中使用 this：</p>
<p><strong>eg-3：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'aikin'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">　</span><br><span class="line"><span class="comment">// 'aikin'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>从 <strong>eg-3</strong>这个例子看来，全局对象中的 this，表示的就是全局对象本身(window)。</li>
</ul>
<p>　　通过 <strong>eg-1</strong>，<strong>eg-2</strong>，<strong>eg-3</strong> 可以知道，在不同的执行上下文中，this 的值是不相同的。即，在全局的执行上文中，this 表示的是全局对象本身（window)；在函数执行上文中，this 的值绑定的是调用函数的对象。</p>
<p><strong><em>接下来做个练习：</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">practice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this in practice'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.practice();</span><br><span class="line">　　</span><br><span class="line"><span class="comment">// 打印的结果会是?</span></span><br></pre></td></tr></table></figure></p>
<p>　　在 javascript 中，随着函数的调用方式不同，将会导致函数的执行上下文不同，也就是将会导致函数内部 this 关键字绑定的对象不同。下面探索一下：<strong>构造函数调用</strong>，<strong>方法调用</strong>，<strong>函数调用</strong>。</p>
<h3 id="a-_构造函数调用">a. <strong>构造函数调用</strong></h3><p>　　构造函数和函数其实是一样，如果不使用关键字 new 调用，和其他的普通函数是一样的。</p>
<p><strong>eg-4:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me =  <span class="keyword">new</span> User (<span class="string">'aikin'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.name);</span><br><span class="line">　　</span><br><span class="line"><span class="comment">//=&gt; 'aikin'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>使用 new 操作符来调用 User， 就会将User视为构造函数。 构造函数的调用会将一个全新的对象(也就是 new 出来的对象)作为 this 关键字的绑定对象。</li>
</ul>
<h3 id="b-_函数调用">b. <strong>函数调用</strong></h3><p>　　函数调用，也就是直接调用函数，正如上面 <strong>eg-1</strong> 例子所描述的， 这时 this 绑定的对象是全局对象(window)。</p>
<h3 id="c-_方法调用">c. <strong>方法调用</strong></h3><p>　　当函数作为一个对象的属性时，这个函数就称为方法。</p>
<p><strong>eg-5:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name   : <span class="string">"aikin"</span>,</span><br><span class="line">    helllo : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello, '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.hello();</span><br><span class="line">　　</span><br><span class="line"> <span class="comment">//=&gt; "hello, aikin"</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>在这个例子(<strong>eg-5</strong>)中，obj 是 hello 方法的调用者，也就是说，hello 方法中的 this 关键字将会绑定 obj 对象。</li>
</ul>
<h4 id="所以，"><strong>所以，</strong></h4><ul>
<li><p>函数调用时，将会将全局对象作为 this 的绑定对象。</p>
</li>
<li><p>方法调用时，方法调用者将会成为 this 的绑定对象。</p>
</li>
<li><p>构造函数，通过 new 关键字来调用后，将会产生一个新的对象作为其 this 的绑定对象。</p>
</li>
</ul>
<h2 id="参考">参考</h2><ul>
<li>王群锋, <a href="http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html" target="_blank" rel="external">深入浅出 JavaScript 中的 this</a></li>
<li>MDN, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">this</a></li>
<li>David Herman, 《Effective JavaScript》</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　what is this？ 在 javascript 中，每个 function 都有一个 this 关键字的隐私绑定。当调用某个 function 时，这个 function 的 this 绑定将会被确定。</p>
<p><strong>eg-1：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is ---'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">　</span><br><span class="line"><span class="comment">// this is ---Window &#123;top: Window, window: Window, location: Location, external: Object, chrome: Object…&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>eg-2：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test2 = &#123;</span><br><span class="line">    <span class="built_in">console</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'this is ---'</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">test2.console();</span><br><span class="line">　</span><br><span class="line"><span class="comment">// this is ---Object &#123;console: function&#125;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>对于 <strong>eg-1</strong> 代码执行的结果可以看出，调用 <code>test()</code> 后， test函数 this 绑定的对象是 window 对象。因为在定义 test 函数的时候，这个函数会被加在 window 这个全局对象中，其实在执行 <code>test()</code> 的时候，相当于 <code>window.test()</code>，这样可以明显的看出，调用 <code>test()</code> 的对象是 window，也就是 this 绑定的对象是 window 。</p>
</li>
<li><p>在 <strong>eg-2</strong> 中，当执行 <code>test2.console()</code> 时，调用 console 方法(函数)的对象为 test2，也就是 console 方法(函数)的 this 的值，就绑定了 test2 对象。</p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://aikin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[init blog]]></title>
    <link href="http://aikin.github.io/2014/08/03/init/"/>
    <id>http://aikin.github.io/2014/08/03/init/</id>
    <published>2014-08-03T12:15:07.000Z</published>
    <updated>2015-05-11T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>借助着开源，搭建好了自己的博客。以后将会在这里，记录知识和回忆。<br>感谢 hexo，感谢 yillia，感谢 github，感谢 markdown，感谢开源组织。<br>感谢音悦台，感谢 instagram，感谢五月天。 </p>
<a id="more"></a>
<blockquote>
<p>ps:<br>今天，云南鲁甸地震了！为鲁甸人民祈福！<br>在成都的我，当时正在搭建我的博客，脑袋一阵眩晕后，才意识到地震了。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>借助着开源，搭建好了自己的博客。以后将会在这里，记录知识和回忆。<br>感谢 hexo，感谢 yillia，感谢 github，感谢 markdown，感谢开源组织。<br>感谢音悦台，感谢 instagram，感谢五月天。 </p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://aikin.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>