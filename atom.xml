<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kin&#39;blog</title>
  <icon>https://www.gravatar.com/avatar/e220d1d1083f0b2ab9c475772113a020</icon>
  <subtitle>喜欢coding。喜欢大海。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aikin.me/"/>
  <updated>2018-09-09T08:55:25.000Z</updated>
  <id>http://aikin.me/</id>
  
  <author>
    <name>aikin</name>
    <email>1@aikin.me</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang 的测试有点怪，我该怎么办???</title>
    <link href="http://aikin.me/2018/09/06/test-go-in-bdd-way/"/>
    <id>http://aikin.me/2018/09/06/test-go-in-bdd-way/</id>
    <published>2018-09-06T05:08:12.000Z</published>
    <updated>2018-09-09T08:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习<code>Go</code>。然后不禁想感叹，为什么有些小伙伴的<code>Go</code>测试可读性可以这么怪(cha)。说好的测试即文档呢？说好的测试边界呢？说好的<code>Given When Then</code>呢？是我功力不行吗？</p><p>我一直相信，编程思想或说方法论都属于可迁移的知识，不管在哪种语言体内。可是看完一些 <code>Go</code> 的测试栗子，我开始慌了~</p><a id="more"></a><p>不信？看官请看：</p><blockquote><p><img src="./go-test-bad.png" alt="sample"></p></blockquote><p>由于测试用例太长，没法截全。没错，太长，一屏都装不下。好奇的你，请戳 -&gt;&gt;&gt; <a href="https://github.com/arnauddri/algorithms/blob/master/data-structures/linked-list/linked_list_test.go" target="_blank" rel="noopener"><strong>戳我</strong></a></p><p>不知道你品起来如何，反正我品起来着实有点苦涩。</p><p>这样的栗子，在<a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener"><code>awesome-go</code></a>列表的开源库，还不少。不行，不行，不能被带歪了(<strong>PS: GitHub 的确是全球最大的基友社区啊，容易带歪人，hahaha</strong>)。</p><p>插播一条：多品整洁，简单的代码，<strong>有利于保护发际线</strong>。</p><p>当然不能“一棒子打死船人”，要有发现美的眼睛。看官请看：</p><blockquote><p><img src="go-test-good.png" alt="smaple-handle"></p></blockquote><p>这是大神<a href="https://github.com/tj" target="_blank" rel="noopener"><code>TJ Holowaychuk</code></a>写的，果然不同凡响。好奇的你，请戳 -&gt;&gt;&gt; <a href="https://github.com/apex/up/blob/master/handler/handler_test.go" target="_blank" rel="noopener"><strong>戳我</strong></a></p><p>满足什么条件的测试，是值得品味的？我觉得，第一是<code>可读性</code>，第二还是<code>可读性</code>，第三还是<code>可读性</code>。</p><p>常听说 <strong>测试即文档</strong>，那么问题来了，好读的文档，长啥样？读小学的时候，老师就有教导说，写作文要，结构清晰，中心思想突出!!!</p><p>写测试代码也是如此，要写出她（计算机）能理解的“文章”，也要写出我们能品的“文章”。那么，落地<a href="https://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="noopener"><code>BDD</code></a> 模式的测试，无疑是种好的选择。</p><p>看官请看：</p><blockquote><p><img src="bdd.png" alt="BDD"></p></blockquote><p>中心思想突出，结构清晰。开头先描述主要功能，然后根据不同用例场景分别对待描述。</p><p>落地的栗子：</p><blockquote><p><img src="./bdd-test.png" alt="BDD TEST"></p></blockquote><p><strong><em>有木有看起来很舒服！！！你是不是在想，测试实现代码呢？看官您接着看：</em></strong></p><blockquote><p><img src="./bdd-given-when-then.png" alt="BDD TEST DETAIL"></p></blockquote><p>完整栗子，好奇的你，请戳 -&gt;&gt;&gt; <a href="https://github.com/aikin/go-algorithms/blob/master/data-structures/linked-list/linked_list_test.go" target="_blank" rel="noopener">戳我</a></p><p><strong><em>上面的栗子，落地就是测试三段式，<code>GIVE-WHEN-THEN</code>：</em></strong></p><blockquote><p><img src="./given-when-then.png" alt="given when then"></p></blockquote><ul><li><strong>Given:</strong> set up context for a behaviour</li><li><strong>When:</strong> specify some action</li><li><strong>Then:</strong> specify some outcome</li></ul><p><code>Action + Outcome = Behaviour</code>，行为是测试关注的核心。<code>Given</code>，测试用例业务场景的准备，主要包含<strong>准备业务数据</strong>、<strong>Mock 外部依赖</strong>、<strong>准备用户信息</strong>。 随着业务的越复杂，测试上下文的准备也会越来与复杂，<strong>准备业务数据</strong>的过程也会越来越耗时间。举个栗子，对于<code>API</code>测试来说，相对需要花时间写的就是<code>Given</code>的过程。<code>Then</code>，主要是写断言，<code>Assert</code>一下<code>API</code>的返回数据，<code>When</code>，触发的动作，就是简单的发一下请求，调用一下<code>API</code>。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p><img src="./coffee.jpeg" width="360px"></p></blockquote><p><strong><em> 咖啡喝完了，接下不知道怎么写了…</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习&lt;code&gt;Go&lt;/code&gt;。然后不禁想感叹，为什么有些小伙伴的&lt;code&gt;Go&lt;/code&gt;测试可读性可以这么怪(cha)。说好的测试即文档呢？说好的测试边界呢？说好的&lt;code&gt;Given When Then&lt;/code&gt;呢？是我功力不行吗？&lt;/p&gt;
&lt;p&gt;我一直相信，编程思想或说方法论都属于可迁移的知识，不管在哪种语言体内。可是看完一些 &lt;code&gt;Go&lt;/code&gt; 的测试栗子，我开始慌了~&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="http://aikin.me/tags/Test/"/>
    
      <category term="Go" scheme="http://aikin.me/tags/Go/"/>
    
      <category term="Golang" scheme="http://aikin.me/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>基于 TypeScript 的 Node.js 交互式命令行应用</title>
    <link href="http://aikin.me/2018/08/25/command-line-app-in-nodejs/"/>
    <id>http://aikin.me/2018/08/25/command-line-app-in-nodejs/</id>
    <published>2018-08-25T05:40:19.000Z</published>
    <updated>2018-09-09T05:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>八月！！！ 要月底了~ 博客还没有写。啊啊啊啊……. </p><p>写点啥？不知道啊！好吧，去咖啡店找点灵感吧。</p><hr><p>灵感来了</p><hr><a id="more"></a><p>最近一不小心，发布第一 NPM 包，<a href="https://www.npmjs.com/package/@aikin/gcli_" target="_blank" rel="noopener">gcli_</a>。它是个怎么样存在？</p><p>平时撸代码时，有时候需要写一下小工具，帮助更好的完成一些功能。比如说，爬数据，查看一些 github 的 数据….</p><h3 id="交互式命令行应用程序"><a href="#交互式命令行应用程序" class="headerlink" title="交互式命令行应用程序"></a>交互式命令行应用程序</h3><p>码农圈里，有很多类似的交互式命令行程序，比如：<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">cz-cli</a>: </p><p><a href="https://asciinema.org/a/198088" target="_blank" rel="noopener"><strong>录屏</strong></a></p><p><img src="./cz.png" alt="asciicast"></p><p>更多命令行应用程序：</p><ul><li><a href="https://github.com/agarrharr/awesome-cli-apps" target="_blank" rel="noopener">awesome-cli-apps</a></li><li><a href="https://github.com/herrbischoff/awesome-command-line-apps" target="_blank" rel="noopener">awesome-command-line-apps</a></li></ul><h3 id="命令行应用生成器"><a href="#命令行应用生成器" class="headerlink" title="命令行应用生成器"></a>命令行应用生成器</h3><p><code>gcli_</code> 是一个可快速构建出 <code>Node.js</code> 交互式命令行应用脚手架生成器。</p><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><blockquote><p><img src="./cloud-word.png" alt="tech cloud word"></p></blockquote><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><p><a href="https://asciinema.org/a/198099" target="_blank" rel="noopener"><strong>录屏</strong></a></p><p><img src="./gcli_.png" alt="asciicast"></p><p><strong>安装</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i @aikin/gcli_ -g</span><br></pre></td></tr></table></figure></p><p><strong>生成命令行脚手架</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir try</span><br><span class="line"></span><br><span class="line">$ cd try</span><br><span class="line"></span><br><span class="line">$ gcli_ G</span><br><span class="line"></span><br><span class="line">$ npm i</span><br></pre></td></tr></table></figure></p><p><strong>使用</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">$ ./bin/try --help</span><br></pre></td></tr></table></figure></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>时间在流逝，青春还要继续。吹着海风，码两行代码，喝一口咖啡…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;八月！！！ 要月底了~ 博客还没有写。啊啊啊啊……. &lt;/p&gt;
&lt;p&gt;写点啥？不知道啊！好吧，去咖啡店找点灵感吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;灵感来了&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://aikin.me/tags/Node-js/"/>
    
      <category term="TypeScript" scheme="http://aikin.me/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>写在第三年</title>
    <link href="http://aikin.me/2018/07/06/in-the-third-year/"/>
    <id>http://aikin.me/2018/07/06/in-the-third-year/</id>
    <published>2018-07-06T11:49:04.000Z</published>
    <updated>2018-07-10T01:01:33.000Z</updated>
    
    <content type="html"><![CDATA[<p> 2018.07.06，加入 ThoughtWorks 三年了！！！从刚毕业后的程序猿小白，成长为程序猿大白。</p> <a id="more"></a><p> 我的小寸，也退休了。 小寸再见~</p><blockquote><p><img src="./small-mac.jpeg" alt="mac"></p></blockquote><hr><h3 id="2015-04-11"><a href="#2015-04-11" class="headerlink" title="2015.04.11"></a><strong><em>2015.04.11</em></strong></h3><p>在成都，<strong><em>地下思沃学院</em></strong>。想念冒菜，冒菜，冒菜~~~</p><blockquote><p><img src="./chengdu.jpg" width="500px"><br><img src="./chengdu1.jpg" width="500px"><br><img src="./chengdu2.jpg" width="500px"></p></blockquote><hr><h3 id="2015-05-25"><a href="#2015-05-25" class="headerlink" title="2015.05.25"></a><strong><em>2015.05.25</em></strong></h3><p>这一天，从石家庄来到北京，参加 office 面试，非常紧张而又兴奋。这是当时 HR 姐姐，给我定的午饭。很温馨~</p><blockquote><p><img src="./interview.jpg" width="500px"></p></blockquote><hr><h3 id="2015-06-06"><a href="#2015-06-06" class="headerlink" title="2015.06.06"></a><strong><em>2015.06.06</em></strong></h3><p>510，毕业了！！！</p><blockquote><p><img src="./graduation.jpg" width="500px"></p></blockquote><hr><h3 id="2015-07-11"><a href="#2015-07-11" class="headerlink" title="2015.07.11"></a><strong><em>2015.07.11</em></strong></h3><p>第一次参加 open party!</p><blockquote><p><img src="./openparty.jpg" width="500px"></p></blockquote><hr><h3 id="2015-10-01"><a href="#2015-10-01" class="headerlink" title="2015.10.01"></a><strong><em>2015.10.01</em></strong></h3><p>在印度，TWU，第一次出国，结识很多有意思的小伙伴。</p><blockquote><p><img src="./twu.jpg" width="500px"><br><img src="./twu1.jpg" width="500px"><br><img src="./twu2.jpg" width="500px"><br><img src="./twu3.jpg" width="500px"><br><img src="./twu4.jpg" width="500px"><br><img src="./twu6.jpg" width="500px"><br><img src="./twu8.jpg" width="500px"><br><img src="./twu7.jpg" width="500px"><br><img src="./twu5.jpg" width="500px"></p></blockquote><hr><h3 id="2016-02-13"><a href="#2016-02-13" class="headerlink" title="2016.02.13"></a><strong><em>2016.02.13</em></strong></h3><p>AWAY DAY!!!</p><blockquote><p><img src="./away-day.jpg" width="500px"></p></blockquote><hr><h3 id="2016-06-04"><a href="#2016-06-04" class="headerlink" title="2016.06.04"></a><strong><em>2016.06.04</em></strong></h3><p>科技猫活动~</p><blockquote><p><img src="./techie-cat.jpg" width="500px"></p></blockquote><hr><h3 id="2017-01-30"><a href="#2017-01-30" class="headerlink" title="2017.01.30"></a><strong><em>2017.01.30</em></strong></h3><p>第一次春节没有回家，去🇺🇸出差。</p><blockquote><p><img src="./onsite.jpg" width="500px"><br><img src="./onsite1.jpg" width="500px"><br><img src="./onsite2.jpg" width="500px"><br><img src="./onsite4.jpg" width="500px"><br><img src="./onsite3.jpg" width="500px"><br><img src="./onsite5.jpg" width="500px"></p></blockquote><hr><h3 id="2017-05-13"><a href="#2017-05-13" class="headerlink" title="2017.05.13"></a><strong><em>2017.05.13</em></strong></h3><p>技术雷达峰会！！！</p><blockquote><p><img src="./tech-radar.jpg" width="500px"></p></blockquote><hr><h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a><strong><em>2018</em></strong></h3><p>在深圳。。。</p><blockquote><p><img src="./shenzhen.jpeg" width="500px"></p></blockquote><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>三年，感恩~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 2018.07.06，加入 ThoughtWorks 三年了！！！从刚毕业后的程序猿小白，成长为程序猿大白。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://aikin.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>五块两毛一</title>
    <link href="http://aikin.me/2018/06/30/wukuailiangmaoyi/"/>
    <id>http://aikin.me/2018/06/30/wukuailiangmaoyi/</id>
    <published>2018-06-30T14:55:45.000Z</published>
    <updated>2018-07-08T12:50:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>2018.06.30</code>，今天是周六，我来到了帝都。做什么呢？吸霾？No No No，是参加婚礼。 </p><a id="more"></a><h3 id="婚礼"><a href="#婚礼" class="headerlink" title="婚礼"></a>婚礼</h3><p>帅气的新郎和美丽的新娘：</p><blockquote><p><img src="./wedding.jpeg" width="360px"></p></blockquote><p>太美了！！！郎才女貌啊~~~</p><p>再曝我和新娘的照片：</p><blockquote><p><img src="./me.jpeg" width="500px"> </p></blockquote><p>还有其他小伙伴：</p><blockquote><p><img src="./colleague.jpeg" width="500px">  </p></blockquote><p>五块两毛一：</p><blockquote><p><img src="./521.jpeg" width="500px"></p></blockquote><p>婚礼很美，很温馨，被感动了~</p><h3 id="五块两毛一"><a href="#五块两毛一" class="headerlink" title="五块两毛一"></a>五块两毛一</h3><p>帝都，熟悉的味道，熟悉的海拔，喜欢的人们，这里是五块两毛一相识的地方。</p><p>五块两毛一，起源于一个微信红包。某些人同一时间，抢到总金额：五块两毛一，然后这个组织就成立了。</p><blockquote><p><img src="./red.jpeg" width="300px"> </p></blockquote><p>哈哈哈哈。。。。 </p><hr><p><strong><em>我们一起轰趴，一起坏肚子：</em></strong></p><blockquote><p><img src="./home.jpg" width="500px"><br><img src="./home3.jpg" width="500px"><br><img src="./home2.jpg" width="500px"><br><img src="./home4.jpg" width="500px"><br><img src="./home5.jpg" width="500px">   </p></blockquote><p><strong><em>我们一起 color run，一起挥洒青春的色彩：</em></strong></p><blockquote><p><img src="./color.jpg" width="500px"><br><img src="./color2.jpg" width="500px"><br><img src="./color3.jpg" width="500px"></p></blockquote><p><strong><em>我们一起在西安：</em></strong></p><blockquote><p><img src="./xian.jpg" width="500px"> </p></blockquote><p><strong><em>我们一起在乌镇：</em></strong></p><blockquote><p><img src="./wuzhen.jpg" width="500px">  </p></blockquote><p><strong><em>我们一起在酒吧：</em></strong></p><blockquote><p><img src="./bar.jpg" width="500px">  </p></blockquote><p><strong><em>我们一起露营：</em></strong></p><blockquote><p><img src="./camp.jpg" width="500px">  </p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>五块两毛一，是个组织？也不全对，是一群有意思的人们？好像也不太对，我觉得，它是一种<strong><em>生活</em></strong>。</p><p><strong><em>感谢一路上有你们陪伴~</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;2018.06.30&lt;/code&gt;，今天是周六，我来到了帝都。做什么呢？吸霾？No No No，是参加婚礼。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://aikin.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t Use @Transactional On Spring Boot Integration Test</title>
    <link href="http://aikin.me/2018/05/19/do-not-use-transactional-annotation-on-spring-integration-test/"/>
    <id>http://aikin.me/2018/05/19/do-not-use-transactional-annotation-on-spring-integration-test/</id>
    <published>2018-05-19T14:00:18.000Z</published>
    <updated>2018-07-06T05:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在测试运行时，测试类中 <code>@Transactional</code> 注解，会导致测试中 <code>Entity</code> 数据的操作都是在内存中完成，最终并不会进行 <code>commit</code> 操作，也就是不会将 <code>Entity</code> 数据进行持久化操作，从而导致测试的行为和真实应用的行为不一致。</p><p>事务管理在应用开发中是种不可或缺的设计，它是数据库持久化处理的一种标准。我们知道，应用程序开发离不开对数据的<code>CRUD</code>（增删改查），<strong>事务的<code>ACID</code>性</strong>可以更好保证数据的完整性，保证相关数据的<code>同生共死</code>。单个事务生命周期主要分为三个阶段，<code>BEGIN TRANSACTION</code> -&gt; <code>COMMIT TRANSACTION</code> -&gt; <code>ROLLBACK TRANSACTION</code>。</p><a id="more"></a><p><code>Spring Boot</code>事务的使用分为<strong>命令式</strong>和<strong>声明式</strong>常用的方式是声明式注解（<code>@Transactional</code>）。事务管理既可以在应用层使用，也可以在测试中使用。</p><p>为了保证测试之间的相互独立，测试之间数据不会被相互影响。也许你写过这样的测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p><code>@Transactional</code> 通过将数据持久化操作截断，来解决测试之间相互对立，数据相互不影响的问题。然而这样方式会有<strong>副作用</strong>，就是数据持久化的过程不再真实，没有了<code>commit</code>的过程。从而会导致：</p><blockquote><ul><li>无法保证 <code>Entity</code> 之间关联关系，唯一索引和主外键关联的准确性</li><li>无法保证 <code>Entity</code> 创建时间、更新时间和版本化(乐观锁)的赋值逻辑的准确性</li><li>无法保证 <code>Entity</code> 中有 <code>@Transient</code> 注解的属性的赋值逻辑的准确性</li><li>测试的数据不是真实场景存在的问题</li><li>测试中，单个事务中的准备数据，无法在多线程中共享。<br>……</li></ul></blockquote><p>然后 <code>Spring</code> 在测试问题域中引入<strong>事务管理</strong>初衷是什么？为了<strong>解决什么问题</strong>才需要将它引入？官方文档介绍 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-tx" target="_blank" rel="noopener">Transaction management</a></p><blockquote><p><img src="./transactional-management.png" alt="Transaction management"></p></blockquote><p>按照官方文档意思，为了解决测试运行时，程序访问真实的数据库，改变数据的状态，从而影响到后续的测试问题。</p><p>其实这里应该<strong>批判性思维</strong>一下，为什么测试运行时，需要访问真实的数据库？为什么测试之间的数据会相互影响？<br>对于每个测试来说，每次运行前都应该有干净的上下文，或者说独立的上下文，有数据清理和准备的过程，测试与测试之间相互隔离。也就是说，为什么测试不能用内存数据库或者嵌入式数据库？为什么不是每个测试运行前清理一下数据库中的数据，保证测试用例运行前的<strong>一方净土</strong>，不被上个测试数据影响？</p><p>答案当然是，<strong><em>可以！！！</em></strong></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如何做？实现一个 <code>TruncateDatabaseService</code>，只删除表的数据，不删除表的结果。 在测试基类的<code>@BeforeEach</code>，执行 <code>truncate</code>。源码<a href="https://github.com/aikin/truncate-database" target="_blank" rel="noopener">Truncate Database</a>：</p><blockquote><p><a href="https://github.com/aikin/truncate-database/blob/master/src/test/java/me/aikin/truncate/database/TruncateDatabaseBasicOnHibernateService.java" target="_blank" rel="noopener">TruncateDatabaseBasicOnHibernateService</a><br><a href="https://github.com/aikin/truncate-database/blob/master/src/test/java/me/aikin/truncate/database/TruncateDatabaseBasicOnMybatisService.java" target="_blank" rel="noopener">TruncateDatabaseBasicOnMybatisService</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在测试运行时，测试类中 &lt;code&gt;@Transactional&lt;/code&gt; 注解，会导致测试中 &lt;code&gt;Entity&lt;/code&gt; 数据的操作都是在内存中完成，最终并不会进行 &lt;code&gt;commit&lt;/code&gt; 操作，也就是不会将 &lt;code&gt;Entity&lt;/code&gt; 数据进行持久化操作，从而导致测试的行为和真实应用的行为不一致。&lt;/p&gt;
&lt;p&gt;事务管理在应用开发中是种不可或缺的设计，它是数据库持久化处理的一种标准。我们知道，应用程序开发离不开对数据的&lt;code&gt;CRUD&lt;/code&gt;（增删改查），&lt;strong&gt;事务的&lt;code&gt;ACID&lt;/code&gt;性&lt;/strong&gt;可以更好保证数据的完整性，保证相关数据的&lt;code&gt;同生共死&lt;/code&gt;。单个事务生命周期主要分为三个阶段，&lt;code&gt;BEGIN TRANSACTION&lt;/code&gt; -&amp;gt; &lt;code&gt;COMMIT TRANSACTION&lt;/code&gt; -&amp;gt; &lt;code&gt;ROLLBACK TRANSACTION&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="transactional" scheme="http://aikin.me/tags/transactional/"/>
    
      <category term="spring boot" scheme="http://aikin.me/tags/spring-boot/"/>
    
      <category term="spring boot test" scheme="http://aikin.me/tags/spring-boot-test/"/>
    
  </entry>
  
  <entry>
    <title>敏捷武器库</title>
    <link href="http://aikin.me/2018/05/06/agile-checker/"/>
    <id>http://aikin.me/2018/05/06/agile-checker/</id>
    <published>2018-05-06T06:30:05.000Z</published>
    <updated>2018-07-06T05:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>敏捷，熟悉而陌生。每当说到敏捷时，很多的知识点都会从大脑的<code>武器库</code>里涌现出来：</p><p><code>Agile、Scrum、XP、Kanban、RAID、TDD、Use Stories、Continuous Integration、Continuous Delivery、Pair Programming、Burndown Chart、Refactor、Cycle Time、Waste、IPM、Retrospectives、MVP、Test....</code> </p><p>面对这么多的散落在大脑中知识点，这么多武器，该如何管理？面对不同的场景，该拿出哪种武器来应对？该如何合理裁剪敏捷实践到项目中?</p><a id="more"></a><p>首先是<strong>抽象分类</strong>，将散落的知识点归纳成一个点，形成一个新的概念。帮助我们更好的记忆和理解边界。那么按照什么去抽象？<strong>生命周期方法</strong>，按照<code>PDCA</code>生命周期，将不同的知识进行归类，然后构建链接关系。其实就是一个<strong>先发散然后收敛</strong>的过程，从无多个知识点，到多个知识点，到一张知识网。</p><p>知识整理相关的方法，在这里就<strong>点到为止</strong>。后期的文章，将会着重写关于<strong><em>知识整理术：抽象分层-生命周期学习法</em></strong>。</p><p>依照<code>PDCA</code>生命周期管理，将敏捷相关的知识点，抽象整理。 一图胜千言：<br><img src="./agile-checker.png" alt="agile checker"></p><p>如何使用？识别当前所处阶段，从武器库挑选相应武器，解决相应问题。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>要更好的使用和改进武器，还需要了解每把武器的作用，优劣势…</p><blockquote><p><a href="https://github.com/aikin/agile-checker" target="_blank" rel="noopener">XMind 原图</a></p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.extremeprogramming.org/rules.html" target="_blank" rel="noopener">The Rules of Extreme Programming</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;敏捷，熟悉而陌生。每当说到敏捷时，很多的知识点都会从大脑的&lt;code&gt;武器库&lt;/code&gt;里涌现出来：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Agile、Scrum、XP、Kanban、RAID、TDD、Use Stories、Continuous Integration、Continuous Delivery、Pair Programming、Burndown Chart、Refactor、Cycle Time、Waste、IPM、Retrospectives、MVP、Test....&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;面对这么多的散落在大脑中知识点，这么多武器，该如何管理？面对不同的场景，该拿出哪种武器来应对？该如何合理裁剪敏捷实践到项目中?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Agile" scheme="http://aikin.me/tags/Agile/"/>
    
      <category term="Scrum" scheme="http://aikin.me/tags/Scrum/"/>
    
  </entry>
  
  <entry>
    <title>Do You Really Need @DirtiesContext?</title>
    <link href="http://aikin.me/2018/04/02/do-you-really-need-dirties-context-annotation/"/>
    <id>http://aikin.me/2018/04/02/do-you-really-need-dirties-context-annotation/</id>
    <published>2018-04-02T05:52:03.000Z</published>
    <updated>2018-07-06T05:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>测试又随机挂了，该怎么办？加上 <code>@DirtiesContext</code> 试试。真棒，修好了。</p><p>WAIT! WAIT! WAIT! 为什么加 <code>@DirtiesContext</code> 就修好，有没有什么副作用？</p><blockquote><p><code>@DirtiesContext</code> is a spring test annotation which is used to indicate that the application context cached should be removed and reloaded after each test run. The application context removed will also be closed.</p></blockquote><a id="more"></a><p>如上面所述，<code>@DirtiesContext</code> 会导致<code>application context</code>不被缓存，也就是说，有可能会对测试运行的速度有影响。官方文档介绍<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#dirtiescontext" target="_blank" rel="noopener">@DirtiesContext</a>：</p><blockquote><p><img src="./dirties-context.png" alt="dirties context"></p></blockquote><p>如果在测试类上，使用<code>@DirtiesContext</code>注解，待整个测试类的所有测试执行结束后，该测试的<code>application context</code>会被关闭，同时缓存会清除。<code>@DirtiesContext</code>分为<code>method-level</code>和<code>class-level</code>。</p><ul><li><code>method-level</code>只有当<code>@DirtiesContext</code>注解设置在<strong><code>test method</code></strong>上的才会生效，<code>methodMode</code>有两种配置：<code>BEFORE_METHOD</code>、<code>AFTER_METHOD</code>，默认是<code>AFTER_METHOD</code>。</li><li><code>class-level</code>只有当<code>@DirtiesContext</code>注解设置在<strong><code>test class</code></strong>上的才会生效，<code>classMode</code>有四种配置：<code>BEFORE_CLASS</code>、<code>BEFORE_EACH_TEST_METHOD</code>、<code>AFTER_EACH_TEST_METHOD</code>、<code>AFTER_CLASS</code>，默认是<code>AFTER_CLASS</code>。</li><li>生命周期：<img src="./dirties-context-life-cycle.png" alt="life cycle"></li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>虽然使用<code>@DirtiesContext</code>，可以保证每个<code>test class</code>的执行上下文的独立性、隔离性，但是也会有让测试运行速度变慢的副作用。所以在使用<code>@DirtiesContext</code>前，弄清楚你是否真的需要使用它。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试又随机挂了，该怎么办？加上 &lt;code&gt;@DirtiesContext&lt;/code&gt; 试试。真棒，修好了。&lt;/p&gt;
&lt;p&gt;WAIT! WAIT! WAIT! 为什么加 &lt;code&gt;@DirtiesContext&lt;/code&gt; 就修好，有没有什么副作用？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@DirtiesContext&lt;/code&gt; is a spring test annotation which is used to indicate that the application context cached should be removed and reloaded after each test run. The application context removed will also be closed.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://aikin.me/tags/spring-boot/"/>
    
      <category term="spring-boot-test" scheme="http://aikin.me/tags/spring-boot-test/"/>
    
      <category term="DirtiesContext" scheme="http://aikin.me/tags/DirtiesContext/"/>
    
  </entry>
  
  <entry>
    <title>Think Twice Before Using @MockBean</title>
    <link href="http://aikin.me/2018/03/25/think-twice-before-using-mockbean-annotation/"/>
    <id>http://aikin.me/2018/03/25/think-twice-before-using-mockbean-annotation/</id>
    <published>2018-03-25T06:00:01.000Z</published>
    <updated>2018-04-01T14:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>号外！号外！号外！你的 <code>spring boot integration tests</code> 运行慢吗，是不是每跑一次测试，你都在等待，等待它全绿的那一瞬间。如果你遇到，那请接着往下看，也许可以帮助到你。如果你没有遇到，那也请往下看，因为也许以后你会遇到。</p><p>告诉你一个秘密：<code>@MockBean</code>会导致<em>测试类(Test Class)</em>之间<code>spring boot application context</code>不断启动多次！！！</p><a id="more"></a><p>不信，那么我们请看栗子 <a href="https://github.com/aikin/mockbean-annotation/tree/25b7b0e4b0e0b4213d918a2a6870efba562b2aec" target="_blank" rel="noopener">MockBean Annotation</a>:</p><p>这项目有两个测试类，<a href="https://github.com/aikin/mockbean-annotation/blob/25b7b0e4b0e0b4213d918a2a6870efba562b2aec/src/test/java/me/aikin/mockbean/AboutControllerTest.java" target="_blank" rel="noopener">AboutControllerTest</a> 和 <a href="https://github.com/aikin/mockbean-annotation/blob/25b7b0e4b0e0b4213d918a2a6870efba562b2aec/src/test/java/me/aikin/mockbean/TokenControllerTest.java" target="_blank" rel="noopener">TokenControllerTest</a></p><p><strong><em>AccountControllerTest:</em></strong></p><blockquote><p><img src="./account-controller.png" alt="about controller test"></p></blockquote><p><strong><em>TokenControllerTest:</em></strong></p><blockquote><p><img src="./token-controller.png" alt="token controller test"></p></blockquote><p><code>AccountControllerTest</code> 没有使用 <code>@MockBean</code>，<code>TokenControllerTest</code> 使用 <code>@MockBean</code>。下面是两个测试一起运行产生的日志：</p><blockquote><p><img src="./spring-boot-log.png" alt="spring boot log"></p></blockquote><p>如上图所示，<code>spring boot</code> 启动两次。而<code>spring boot</code> 的启动时间也比较耗时，所以<code>@MockBean</code>，很有可能导致测试运行的很慢。那<code>@MockBean</code>到底是个怎么样的存在？</p><h1 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h1><p> 写过<code>spring boot integration test</code>的小伙伴，对于<code>@MockBean</code>应该会比较熟悉。在写测试时，对于一些应用的外部依赖需要进行一些<a href="https://martinfowler.com/bliki/TestDouble.html" target="_blank" rel="noopener"><code>Mock</code></a> 处理，比如：<code>Redis</code>、<code>ElasticSearch</code>、<code>ExternalService</code> 等。官方文档介绍 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications-mocking-beans" target="_blank" rel="noopener">Mocking and spying beans</a>：</p><blockquote><p><img src="./mock-bean.png" alt="mock bean"></p><ul><li>It allows to add Mockito mocks in a Spring ApplicationContext.</li><li>If a bean, compatible with the declared class exists in the context, it replaces it by the mock.</li><li>If it is not the case, it adds the mock in the context as a bean.</li></ul></blockquote><p>也就是说，<code>@MockBean</code>会改变<code>spring boot application context beans</code>，导致使用了<code>@MockBean</code>的测试类之间的需要不同<code>application context</code>，从而导致<code>spring boot application context</code>重启。为什么需要不同<code>application context</code> 就需要重启？？？带着疑惑，我们接着往下看。</p><h1 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h1><h2 id="Spring-Boot-Application-Context"><a href="#Spring-Boot-Application-Context" class="headerlink" title="Spring Boot Application Context"></a>Spring Boot Application Context</h2><p>什么是<code>application context</code>？简单理解，就是应用程序运行所需要的上下文。官方文档介绍 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testcontext-ctx-management" target="_blank" rel="noopener">Context Management</a>:</p><blockquote><p><img src="./context-management.png" alt="context-management"></p></blockquote><p>官方文档介绍 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-ctx-management" target="_blank" rel="noopener">Context management and caching</a>：</p><blockquote><p><img src="./testing-ctx-management.png" alt="testing-ctx-management"></p></blockquote><p>根据官方文档意思，<code>application context</code>为初始化测试实例提供上下文，如果需要不同的<code>application context</code>实例化不同的测试，就需要重新启动<code>spring boot</code>，创建不同<code>applicaiton context</code>。文档还说到，为了解决<code>spring boot application context</code>启动慢的问题，会做<strong>缓存处理</strong>。那<code>@MockBean</code>到底破坏了什么样的缓存规则，从而导致<code>spring boot</code>重启多次？是什么导致打开方式出了问题？</p><h2 id="Spring-Boot-Application-Context-Cache"><a href="#Spring-Boot-Application-Context-Cache" class="headerlink" title="Spring Boot Application Context Cache"></a>Spring Boot Application Context Cache</h2><p>要回答这个问题，就要先了解[application context caching]的<code>uniquely key</code>包含的内容，附上官方文档介绍 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testcontext-ctx-management-caching" target="_blank" rel="noopener">Context caching</a>：</p><blockquote><p><img src="./context-caching.png" alt="Context Caching"></p></blockquote><p>根据文档的描述，不难知道<code>application context cacheing</code>是通过<code>key:value</code>方式进行缓存的，唯一键为组合键，包含：<code>locations、classes、contextInitializerClasses、contextCustomizers、contextLoader、parent、activeProfiles、propertySourceLocations、propertySourceProperties、resourceBasePath</code>。</p><p>而<code>@MockBean</code>的使用会导致每个<code>application context</code>中<code>contextCustomizer</code>的不同，从而导致存储在<code>context cache</code>中的<code>application context</code>的<code>uniquely key</code>不同，最终导致<code>application context</code>在测试类之间不能共享。虽然没有官方文档说明这一点，不过在<br><a href="https://github.com/spring-projects/spring-boot/blob/3198bf4f59a375c3b4d70202b34be710788e6f40/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoContextCustomizerFactory.java" target="_blank" rel="noopener">org.springframework.boot.test.mock.mockito.MockitoContextCustomizerFactory</a> 源代码中可以找到一些痕迹：</p><blockquote><p><img src="./mock-customizer.png" alt="MockitoContextCustomizerFactory"></p></blockquote><p>图中所说的<code>MergedContextConfiguration</code>就是<code>application context caching</code>的<code>uniquely key</code>。</p><h1 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h1><p>对于<code>spring boot integration test</code> 来说，除了 <code>external service(clients...)</code> 需要被 <code>Mock</code>，其它的内部依赖(service、repository…)都不应该被<code>Mock</code>。<code>external service</code> 可以在配置层，进行<code>Mock</code>，然后在测试类中，直接通过<code>@Auotwrite</code>方式注入：</p><p><a href="https://github.com/aikin/mockbean-annotation/blob/master/src/test/java/me/aikin/mockbean/RedisTemplateBeanConfigurationMocker.java" target="_blank" rel="noopener">RedisTemplateBeanConfigurationMocker</a>：</p><blockquote><p><img src="./redis-configuration-mocker.png" alt="redis configuration mocker"></p></blockquote><p><a href="https://github.com/aikin/mockbean-annotation/blob/master/src/main/java/me/aikin/mockbean/RedisConfiguration.java" target="_blank" rel="noopener">RedisConfiguration</a>：</p><blockquote><p><img src="./redis-configuration.png" alt="redis configuration"></p></blockquote><p><a href="https://github.com/aikin/mockbean-annotation/blob/master/src/test/java/me/aikin/mockbean/TokenControllerTest.java" target="_blank" rel="noopener">TokenControllerTest</a>:</p><blockquote><p><img src="./token-controller-fixed.png" alt="token-controller-fixed"></p></blockquote><p><code>TokenControllerTest</code>，直接 @Autowrite <code>RedisTemplateBeanConfigurationMocker</code> 中配置的，<code>RedisTemplate @Bean</code>。完成栗子，请查<a href="https://github.com/aikin/mockbean-annotation" target="_blank" rel="noopener">mockbean-annotation</a>。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p><code>spring boot integration test</code> 相对于 <code>api test</code>，应该更关注<code>api</code>功能的完整性，了解依赖的边界，不需要<code>Mock</code>的，就不要<code>Mock</code>，比如：<code>service, repository…</code>。对于外部依赖，统一在<strong>配置层</strong>完成 <code>Mock</code>，比如：<code>client、redis、rabbitmq...</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;号外！号外！号外！你的 &lt;code&gt;spring boot integration tests&lt;/code&gt; 运行慢吗，是不是每跑一次测试，你都在等待，等待它全绿的那一瞬间。如果你遇到，那请接着往下看，也许可以帮助到你。如果你没有遇到，那也请往下看，因为也许以后你会遇到。&lt;/p&gt;
&lt;p&gt;告诉你一个秘密：&lt;code&gt;@MockBean&lt;/code&gt;会导致&lt;em&gt;测试类(Test Class)&lt;/em&gt;之间&lt;code&gt;spring boot application context&lt;/code&gt;不断启动多次！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-boot-test" scheme="http://aikin.me/tags/spring-boot-test/"/>
    
      <category term="MockBean" scheme="http://aikin.me/tags/MockBean/"/>
    
  </entry>
  
  <entry>
    <title>My Critical Thinking Learn Path</title>
    <link href="http://aikin.me/2018/01/20/critical-thinking/"/>
    <id>http://aikin.me/2018/01/20/critical-thinking/</id>
    <published>2018-01-20T14:29:50.000Z</published>
    <updated>2018-03-25T05:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h1><p>很多时候，在很多场景下，要学会批判性思维。第一次听到的时候，非常的疑惑，到底什么是批判性思维？</p><p>很多人认为，那些不假思索地，凭借着直觉得出来的决定，没有通过逻辑验证的决定都不是批判性思维。批判性思维，就是带着批判的角度去看待现在的结论，通过多个角度去问<code>为什么</code>来找到结论产生的根本原因。批判性思维，批判的是什么？批判的是逻辑，而那些经不起批判的逻辑所得出来的结论都是云烟，只有那些经得起批判的，才是真理。</p><a id="more"></a><h1 id="WHY-amp-WHEN"><a href="#WHY-amp-WHEN" class="headerlink" title="WHY &amp; WHEN"></a>WHY &amp; WHEN</h1><p>在学校，很多时候，学生学习的方式都是老师教什么，就学什么，说什么就是什么，学生们缺少批判性思维，缺少求真的的过程。一味地只是吸收外部的知识，只能让思维变的越来越被动，当面对多个冲突的结论或者方法时，该如何取舍？而如果时刻带着不断提问并思考问题的答案的态度去和知识进行互动的交流，才能让我们看清事物的本质。</p><p>相信每个结论，都有它背后的逻辑，都有它成立的前提条件，当这个前提条件不成立的时候，那么这个结论也就随之破灭。比如说：<code>1 + 2 = 3</code>，为什么这个等式成立，成立的前提条件是什么，它背后有存在什么样的逻辑推导？这个前提条件比较简单，<code>1 + 1 = 2</code>，只有当这个前提条件成立的情况下，<code>1 + 2 = 3</code> 这个结论才成立，如果 <code>1 + 1 = 2</code>，这个前提不成立， 那么意味着 <code>1 + 2 = 3</code>这个结论也是不成立。所以说，如果我们一味的只是去吸收外部的知识，不带着一颗<strong>求真</strong>的态度，去学习我们了解的知识，这样有可能让我们偏离世界中心。</p><h1 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h1><p>该如何开始呢？刻意练习？是的，刻意练习，不过在刻意练习之前，需要找到自己的<code>训练模型</code>，就像机器学习一样，先有模型，然后使用大量数据刻意训练，并在训练的过程中调整的模型。</p><ul><li>找到学习模型或者学习方法</li><li>刻意训练</li></ul><h3 id="找到学校模型或者学习方法"><a href="#找到学校模型或者学习方法" class="headerlink" title="找到学校模型或者学习方法"></a>找到学校模型或者学习方法</h3><ul><li>先看一下《逻辑思维简单入门》，可以帮助回忆一下“童年”学的简单逻辑，找到逻辑的感觉。个人觉得不用全部看完，只要找到对文字的逻辑感觉就可以，“适可而止”（貌似这个成语用的不太合适）。</li><li>进阶《麦肯锡入职培训第一课 让职场新人一生受用的逻辑思考力》，学习如何使用 <strong>图解法可视化</strong> 批判性思考，将思维可视化出来，释放大脑。<blockquote><p><img src="./visual.png" alt="麦肯锡入职培训..."></p></blockquote></li><li>系统化的学习批判性，可以看看《学会提问》、《批判性思维的工具》</li><li>找到属于自己的 <strong>学习模型</strong></li></ul><h3 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h3><p>找到自己的模型，适合自己的方法论，接着就是刻意练习，在练习的过程中适当调整学习模型，做到从<code>量—&gt;质</code>的变化。</p><ul><li><strong>画</strong>：可视化，使用 《麦肯锡入职培训第一课 让职场新人一生受用的逻辑思考力》 的图解法，在听 session/开会 时，将 session主题使用图解可视化的方式批判一下。</li><li><strong>听</strong>：使用碎片时间听，听什么呢？听一些时间比较短（15分钟内）的知识分享（比如：喜马拉雅 FM：里米创媒、 得到：李翔知识内参），听的过程中，带着批判的模型去训练，去套。分析分享的主题的 论点、论据，整个论证过程是否有没有逻辑。和人沟通时，讨论时，学会阶段性总结对方在说什么。</li><li><strong>说</strong>：说话的时候，表述自己观点的时候，刻意使用经得起批判的方式表述，结构化、有逻辑去表述。比如：总分总。</li><li><strong>看</strong>：《思考的艺术》这本书上有很多例子可以练习。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WHAT&quot;&gt;&lt;a href=&quot;#WHAT&quot; class=&quot;headerlink&quot; title=&quot;WHAT&quot;&gt;&lt;/a&gt;WHAT&lt;/h1&gt;&lt;p&gt;很多时候，在很多场景下，要学会批判性思维。第一次听到的时候，非常的疑惑，到底什么是批判性思维？&lt;/p&gt;
&lt;p&gt;很多人认为，那些不假思索地，凭借着直觉得出来的决定，没有通过逻辑验证的决定都不是批判性思维。批判性思维，就是带着批判的角度去看待现在的结论，通过多个角度去问&lt;code&gt;为什么&lt;/code&gt;来找到结论产生的根本原因。批判性思维，批判的是什么？批判的是逻辑，而那些经不起批判的逻辑所得出来的结论都是云烟，只有那些经得起批判的，才是真理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Critical Thinking" scheme="http://aikin.me/tags/Critical-Thinking/"/>
    
  </entry>
  
  <entry>
    <title>COLOR RUNER</title>
    <link href="http://aikin.me/2017/06/25/color-run/"/>
    <id>http://aikin.me/2017/06/25/color-run/</id>
    <published>2017-06-25T06:32:38.000Z</published>
    <updated>2017-06-25T06:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/2017/06/25/color-run/1.jpg" title="hover"></div></div><div class="group-picture-row"></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>栈内和堆内的生命体</title>
    <link href="http://aikin.me/2017/05/15/ref-base-data-type/"/>
    <id>http://aikin.me/2017/05/15/ref-base-data-type/</id>
    <published>2017-05-15T13:54:47.000Z</published>
    <updated>2017-05-29T06:18:37.000Z</updated>
    
    <content type="html"><![CDATA[<p> 数据是所有程序处理的根本，而引用数据类型和基础数据类型是对数据的不同抽象。在我们学习过的编程语言中，都有它们的身影，然而它们的具象会有所不同。比如：</p><blockquote><ul><li>JavaScript 基础数据类型：<code>undefined,null,number,boolean,string</code>；<br>引用数据类型：<code>Object,Boolean,Number,String，Array，Class</code>。</li><li>Java 基础数据类型：<code>byte, short,int,long,float,double,boolean,char</code>；<br>引用数据类型：<code>Class，Array，Interface，Enum，Annotation</code>。</li></ul></blockquote><p> 虽然它们的具象表示不同，不过它们底层是一样的，或者说它们内存模式是相同的。<br><a id="more"></a></p><h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>据我这个非科班生的人所了解的，基础数据类型都是在<code>栈内存</code>中，引用数据类型都是在<code>堆内存</code>中。先上一张内存模型图：</p><blockquote><p><img src="./memory.png" width="150px" height="300px"></p><ul><li>栈区：存放函数的参数值，局部变量的值。操作方式类似于数据结构中的栈，编译器自动分配和释放。</li><li>堆区：用于存放引用类型对象，或者说由 <code>new</code> 创建的对象。</li><li>全局区：用于存储全局变量和静态变量。</li><li>常量区：存放常量，程序结束后由系统释放。</li><li>代码区：存放函数体的二进制代码。</li></ul></blockquote><h3 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h3><p>在对模型有大概的了解之后，那么如何和代码进行映射呢？接着上图(一图顶千言)：<br><img src="./stack-head.png" alt="stack head"></p><p>如图所示，左边的是栈内存，右边的堆内存。按照栈的操作方式，程序的执行顺序：<code>main() --&gt; d.go() --&gt; dog.setName()</code>。每个方法都有局部变量(<code>d</code>,<code>dog</code>,<code>dogName</code>)，也存储在栈内存中。每个局部变量都指向堆内存一个引用类型对象。</p><p>在上一段伪代码(C#)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void Method1() &#123;</span><br><span class="line">  int i = 4;</span><br><span class="line">  int y = 2;</span><br><span class="line">  class1 cls1 = new class1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑很简单，都是赋值操作。在栈和堆中又是如何反应的？上图：<br><img src="./stack-head-line.png" alt="stack head"></p><p>图中演绎了变量在栈内存和堆内存中的生命周期。执行 <code>int i = 4</code>后，<code>i=4</code>分配到栈内存，同理<code>y=2</code>也被分配到栈内存中，按照栈的特性，先入后出，所以<code>y=2</code>会在<code>i=4</code>上面。<br>当执行<code>class1 cls1 = new class1()</code>, 局部变量 <code>cls1</code> 会被堆栈，同时指向堆内存中的引用类型创建的内存空间。当方法执行结束后，栈内存中的变量所占用的内存空间会被释放，而堆内存中占用的内存空间，会被 <code>GC</code> 回收。</p><h3 id="多线程之间内存关系"><a href="#多线程之间内存关系" class="headerlink" title="多线程之间内存关系"></a>多线程之间内存关系</h3><p>多线程之间共享<code>堆内存</code>，每个线程都有<code>Thread Local Storage</code> 和 私有的栈内存。由于多线程之间是共享堆内存的，所以一个线程对一个共享变量的修改对另一个线程是可见的。也就是说，在一个线程中对共享变量修改后，要在其它线程能够得知共享变量的变化，展现内存可见性的特性。<br><img src="./thread-memory.png" alt="thread memory"></p><p><strong><em>写在最后：掌握如何分析变量是在栈内存和堆内存，可以有利于更好的写性能高的并发程序，理解为什么需要锁的根本原因。</em></strong></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr><ul><li><a href="https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap" target="_blank" rel="noopener">What and where are the stack and heap?</a></li><li><a href="https://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types#Stack%20and%20Heap" target="_blank" rel="noopener">Six important .NET concepts: Stack, heap, value types, reference types, boxing, and unboxing</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 数据是所有程序处理的根本，而引用数据类型和基础数据类型是对数据的不同抽象。在我们学习过的编程语言中，都有它们的身影，然而它们的具象会有所不同。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 基础数据类型：&lt;code&gt;undefined,null,number,boolean,string&lt;/code&gt;；&lt;br&gt;引用数据类型：&lt;code&gt;Object,Boolean,Number,String，Array，Class&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Java 基础数据类型：&lt;code&gt;byte, short,int,long,float,double,boolean,char&lt;/code&gt;；&lt;br&gt;引用数据类型：&lt;code&gt;Class，Array，Interface，Enum，Annotation&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 虽然它们的具象表示不同，不过它们底层是一样的，或者说它们内存模式是相同的。&lt;br&gt;
    
    </summary>
    
    
      <category term="reference" scheme="http://aikin.me/tags/reference/"/>
    
      <category term="stack" scheme="http://aikin.me/tags/stack/"/>
    
      <category term="heap" scheme="http://aikin.me/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>并发入坑前奏</title>
    <link href="http://aikin.me/2017/03/19/concurrency/"/>
    <id>http://aikin.me/2017/03/19/concurrency/</id>
    <published>2017-03-18T16:22:54.000Z</published>
    <updated>2017-04-16T04:10:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为非科班生，在搞清楚什么是并发？什么是并行？之前，还是需要先了解一下<code>CPU</code>、<code>Process</code>和<code>Thread</code>之间的关系。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><hr><h3 id="什么是处理器"><a href="#什么是处理器" class="headerlink" title="什么是处理器?"></a>什么是处理器?</h3><blockquote><p>中央处理器 （英语：Central Processing Unit，缩写：CPU），是计算机的主要设备之一，功能主要是解释计算机指令以及处理计算机软件中的数据。计算机的可编程性主要是指对中央处理器的编程。中央处理器、内部存储器和输入/输出设备是现代电脑的三大核心部件。– <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8" target="_blank" rel="noopener">维基百科</a></p></blockquote><p><code>CPU</code>是计算机的核心，控制指令的发布，负责所有的数据计算处理。</p><a id="more"></a><h3 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h3><blockquote><p>进程（英语：process），是计算机中已运行程序的实体。进程为曾经是分时系统的基本运作单位。在<code>面向进程设计的系统</code>（如早期的UNIX，Linux 2.4及更早的版本）中，进程是程序的基本执行实体；在<code>面向线程设计的系统</code>（如当代多数操作系统、Linux 2.6及更新的版本）中，<em>进程本身不是基本运行单位，而是线程的容器</em>。程序本身只是指令、数据及其组织形式的描述，进程才是程序（那些指令和数据）的真正运行实例。– <a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>进程是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，并没有统一的标准定义。进程一般由程序、数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。</p><h4 id="进程生命周期"><a href="#进程生命周期" class="headerlink" title="进程生命周期"></a>进程生命周期</h4><p><img src="./process-life-cycle.png" alt="进程生命周期"></p><h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><blockquote><p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。– <a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>线程是最小的执行单元,是一个抽象的概念，它的抽象层次比进程抽象层次低。</p><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p><img src="./thread-life-cycle.png" alt="线程生命周期"></p><ul><li><blockquote><p>提示： 新启动的子线程并不会随着主线程的结束而结束。一旦子线程启动起来后，它就拥有和主线程相同的地位，它不会受主线程的影响。<br><img src="./new-thread.png" alt="new thread"></p></blockquote></li></ul><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><hr><h3 id="处理器、进程和线程的关系"><a href="#处理器、进程和线程的关系" class="headerlink" title="处理器、进程和线程的关系"></a>处理器、进程和线程的关系</h3><ul><li>操作系统为进程分配资源，不对线程分配资源。一个进程内可以包含多个线程，同一进程所产生的线程共享同一内存空间。线程是进程的一个实体，是<code>CPU</code>调度和分派的基本单位，也就是说处理调度的是线程。线程本身基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li><li>进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr><p><a href="http://blog.csdn.net/luoweifu/article/details/46595285" target="_blank" rel="noopener">编程思想之多线程与多进程(1)——以操作系统的角度述说线程与进程</a><br><a href="http://www.kancloud.cn/wizardforcel/liaoxuefeng/108670" target="_blank" rel="noopener">进程和线程</a><br><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为非科班生，在搞清楚什么是并发？什么是并行？之前，还是需要先了解一下&lt;code&gt;CPU&lt;/code&gt;、&lt;code&gt;Process&lt;/code&gt;和&lt;code&gt;Thread&lt;/code&gt;之间的关系。&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;什么是处理器&quot;&gt;&lt;a href=&quot;#什么是处理器&quot; class=&quot;headerlink&quot; title=&quot;什么是处理器?&quot;&gt;&lt;/a&gt;什么是处理器?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;中央处理器 （英语：Central Processing Unit，缩写：CPU），是计算机的主要设备之一，功能主要是解释计算机指令以及处理计算机软件中的数据。计算机的可编程性主要是指对中央处理器的编程。中央处理器、内部存储器和输入/输出设备是现代电脑的三大核心部件。– &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;是计算机的核心，控制指令的发布，负责所有的数据计算处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrency" scheme="http://aikin.me/tags/concurrency/"/>
    
      <category term="cpu" scheme="http://aikin.me/tags/cpu/"/>
    
      <category term="thread" scheme="http://aikin.me/tags/thread/"/>
    
      <category term="process" scheme="http://aikin.me/tags/process/"/>
    
  </entry>
  
  <entry>
    <title>数据迁移工具 - Flyway</title>
    <link href="http://aikin.me/2017/02/26/db-migration-flyway/"/>
    <id>http://aikin.me/2017/02/26/db-migration-flyway/</id>
    <published>2017-02-26T06:37:48.000Z</published>
    <updated>2017-03-12T02:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于数据迁移的概念，相信大家已经都比较熟悉。那么，什么是数据迁移？为什么需要数据迁移？在这里就不再做相关分享啦~。接下来主要分享一下数据迁移工具 <a href="https://github.com/flyway/flyway" target="_blank" rel="noopener">Flyway</a> 使用。<br><a id="more"></a></p><p><img src="./flyway-home.png" alt="flyway home"></p><blockquote><p>Flyway is the Apache v2 licensed open-source tool that makes database migrations easy. It strongly favors simplicity and convention over configuration.</p></blockquote><p><code>Flyway</code> 是一款开源的数据库迁移工具，它认为简单和约定优于配置。没有繁琐的配置，有 6 个主要基本命令：<a href="https://flywaydb.org/documentation/command/migrate" target="_blank" rel="noopener">Migrate</a>, <a href="https://flywaydb.org/documentation/command/clean" target="_blank" rel="noopener">Clean</a>, <a href="https://flywaydb.org/documentation/command/info" target="_blank" rel="noopener">Info</a>, <a href="https://flywaydb.org/documentation/command/validate" target="_blank" rel="noopener">Validate</a>, <a href="https://flywaydb.org/documentation/command/baseline" target="_blank" rel="noopener">Baseline</a> 和 <a href="https://flywaydb.org/documentation/command/repair" target="_blank" rel="noopener">Repair</a>。</p><blockquote><p>Flyway received the highest distinction on the <a href="https://www.thoughtworks.com/radar/tools/flyway" target="_blank" rel="noopener">Thoughtworks Technology Radar</a> by being placed in the adopt category.</p></blockquote><h3 id="如何使用-Flyway？"><a href="#如何使用-Flyway？" class="headerlink" title="如何使用 Flyway？"></a>如何使用 Flyway？</h3><p><code>Flyway</code>支持很多种和应用集成的方法，这里主要分享一下<code>Gradle</code>集成<code>Flyway</code>的使用。</p><h4 id="Setup-Repo-db-migration-flyway："><a href="#Setup-Repo-db-migration-flyway：" class="headerlink" title="Setup Repo db-migration-flyway："></a>Setup Repo <a href="https://github.com/aikin/db-migration-flyway/tree/42ba4a654a49503e97a84a899c42377202645c72" target="_blank" rel="noopener">db-migration-flyway</a>：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradle init --<span class="built_in">type</span> java-libray</span><br></pre></td></tr></table></figure><p><img src="./init.png" alt="init"></p><h4 id="Add-Gradle-Flyway-plugin"><a href="#Add-Gradle-Flyway-plugin" class="headerlink" title="Add Gradle Flyway plugin"></a>Add Gradle Flyway plugin</h4><ul><li><p>Change <a href="https://github.com/aikin/db-migration-flyway/blob/42ba4a654a49503e97a84a899c42377202645c72/build.gradle" target="_blank" rel="noopener"><code>build.gradle</code></a> file content</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">"gradle.plugin.com.boxfuse.client:flyway-release:4.1.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">"idea"</span></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">"org.flywaydb.flyway"</span></span><br></pre></td></tr></table></figure></li><li><p>Build repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew build</span><br></pre></td></tr></table></figure></li></ul><h4 id="Config-Flyway"><a href="#Config-Flyway" class="headerlink" title="Config Flyway"></a>Config Flyway</h4><ul><li><p>Change [<code>build.gradle</code>] file content</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">"gradle.plugin.com.boxfuse.client:flyway-release:4.1.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">"idea"</span></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">"org.flywaydb.flyway"</span></span><br><span class="line"></span><br><span class="line">flyway &#123;</span><br><span class="line">    driver = <span class="string">'com.mysql.jdbc.Driver'</span></span><br><span class="line">    url = <span class="string">"jdbc:mysql://127.0.0.1:3306/flyway_dev"</span></span><br><span class="line">    user = <span class="string">'mysql'</span></span><br><span class="line">    password = <span class="string">'mysql'</span></span><br><span class="line">    table = <span class="string">'flyway_dev_schema_version'</span></span><br><span class="line">    locations = [<span class="string">"filesystem:$&#123;projectDir&#125;/src/main/resources/db/migration/mysql"</span>]</span><br><span class="line">    sqlMigrationPrefix = <span class="string">'MySQL-'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'mysql:mysql-connector-java:5.1.34'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Build repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew build</span><br></pre></td></tr></table></figure></li></ul><h4 id="Add-Migration-Scripts"><a href="#Add-Migration-Scripts" class="headerlink" title="Add Migration Scripts"></a>Add Migration Scripts</h4><ul><li><p>Create file <a href="https://github.com/aikin/db-migration-flyway/blob/8e9048693674c48adcd236366fb10aa001ed3321/src/main/resources/db.migration.mysql/MySQL-1_1__create_users_table.sql" target="_blank" rel="noopener">MySQL-1_1__create_users_table.sql</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USERS</span> (</span><br><span class="line">  <span class="keyword">ID</span>         <span class="built_in">BIGINT</span> PRIMARY <span class="keyword">KEY</span>    AUTO_INCREMENT,</span><br><span class="line">  USERNAME   <span class="built_in">VARCHAR</span>(<span class="number">32</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  CREATED_AT <span class="keyword">TIMESTAMP</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>(<span class="number">3</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>Create Mysql Database <code>flyway_dev</code> with user <code>mysql</code> and password <code>mysql</code></p></li><li><p>Migration</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew flywayMigrate -i</span><br></pre></td></tr></table></figure><p><img src="./database.png" alt="database"></p></li></ul><h4 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h4><p>对于<code>DEV</code>、<code>QA</code>、<code>TEST</code>、<code>STAGE</code>、<code>PROD</code>针对不同的环境，需要会使用不一样的数据库配置。</p><ul><li><p>在工程目录下创建文件<code>config/dev/db.properties</code>, <code>config/test/db.properties</code>, <code>config/prod/db.properties</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// config/dev/db.properties</span><br><span class="line">db.url=jdbc:mysql://127.0.0.1:3306/flyway_dev</span><br><span class="line">db.user=mysql</span><br><span class="line">db.password=mysql</span><br><span class="line"></span><br><span class="line">// config/test/db.properties</span><br><span class="line">db.url=jdbc:mysql://127.0.0.1:3306/flyway_test</span><br><span class="line">db.user=mysql</span><br><span class="line">db.password=mysql</span><br><span class="line"></span><br><span class="line">// config/prod/db.properties</span><br><span class="line">db.url=jdbc:mysql://127.0.0.1:3306/flyway_prod</span><br><span class="line">db.user=mysql</span><br><span class="line">db.password=mysql</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>build.gradle</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url &quot;https://plugins.gradle.org/m2/&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;gradle.plugin.com.boxfuse.client:flyway-release:4.1.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &quot;idea&quot;</span><br><span class="line">apply plugin: &apos;java&apos;</span><br><span class="line">apply plugin: &quot;org.flywaydb.flyway&quot;</span><br><span class="line"></span><br><span class="line">def properties = new Properties()</span><br><span class="line">properties.load(project.file(&quot;config/$&#123;env&#125;/db.properties&quot;).newReader())</span><br><span class="line"></span><br><span class="line">flyway &#123;</span><br><span class="line">    driver = &apos;com.mysql.jdbc.Driver&apos;</span><br><span class="line">    url = properties.get(&apos;db.url&apos;)</span><br><span class="line">    user = properties.get(&apos;db.user&apos;)</span><br><span class="line">    password = properties.get(&apos;db.password&apos;)</span><br><span class="line">    table = &apos;flyway_dev_schema_version&apos;</span><br><span class="line">    locations = [&quot;filesystem:$&#123;projectDir&#125;/src/main/resources/db/migration/mysql&quot;]</span><br><span class="line">    sqlMigrationPrefix = &apos;MySQL-&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;mysql:mysql-connector-java:5.1.34&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Create Mysql Database <code>flyway_test</code> with user <code>mysql</code> and password <code>mysql</code></p></li><li>Migration test env<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew -Penv=test flywayMigrate -i</span><br></pre></td></tr></table></figure></li></ul><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p><em>这里只是简单的分享了一下，<code>Gradle</code> 和 <code>Flyway</code> 的集成。<code>Flyway</code> 还有很多功能值得去探索…</em></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr><p><a href="https://flywaydb.org/" target="_blank" rel="noopener">Flyway</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于数据迁移的概念，相信大家已经都比较熟悉。那么，什么是数据迁移？为什么需要数据迁移？在这里就不再做相关分享啦~。接下来主要分享一下数据迁移工具 &lt;a href=&quot;https://github.com/flyway/flyway&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flyway&lt;/a&gt; 使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="flyway" scheme="http://aikin.me/tags/flyway/"/>
    
      <category term="db migration" scheme="http://aikin.me/tags/db-migration/"/>
    
  </entry>
  
  <entry>
    <title>Database Schema Migrations</title>
    <link href="http://aikin.me/2016/10/23/why-need-database-migration/"/>
    <id>http://aikin.me/2016/10/23/why-need-database-migration/</id>
    <published>2016-10-23T12:56:38.000Z</published>
    <updated>2016-12-17T17:39:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于企业和基于 web 的应用程序来说，<code>Migration</code> 就是将一个平台移到另一个平台。<code>Database Migration</code>就是通过<code>migration scripts</code>数据库从一个状态转换到另一个状态，每一个<code>migration script</code>都会对数据库进行修改，修改的内容可能是创建一张新表、更新表的结构、更新表中的数据、删除一张表和创建索引，等等。一般迁移脚本会提供两个“互斥”功能，一个是<code>Up</code>用于升级数据库，一个是<code>Down</code>用于撤销数据库的升级。</p><a id="more"></a><p>为什么需要<code>Database Migration</code>？数据库是个复杂的应用，具有无数不同的特征，行为，数据类型，以及支持工具和技术。在开发和维护一个数据驱动的应用程序时，数据库的<code>schema</code>会发生改变，特别是在一个不断开发的项目中，随着需求的变化，数据库的<code>schema</code>也会跟着变化，而追踪记录这些变化一向都是费成本的问题。</p><p>大部分项目都会有多个的环境（test, stage, prod），那么保证这些环境下的数据库的一致性的难度会成倍增加。比如，在开发应用的程序的过程中，创建一张新表、同时建立索引，那也就意味着，这些操作也需要在其它的每一个环境（test，stage，prod）发生，当然也包括团队其他成员的本地环境，这样才能保证数据库的一致性， 这个过程将面临很大的挑战。 为了让整个流程更加简单方便安全，可以给数据库加上版本控制功能，也就是数据库迁移功能，这样可以让团队在修改数据库结构或内容的同时，可以保持彼此本地环境数据库版本的一致性。</p><p><strong><em>数据库迁移的工具：</em></strong></p><ul><li><p><a href="https://flywaydb.org/" target="_blank" rel="noopener">Flyway</a> <code>Java</code></p></li><li><p><a href="http://www.mybatis.org/migrations/" target="_blank" rel="noopener">MyBatis Migrations</a> <code>Java</code></p></li><li><p><a href="http://docs.sequelizejs.com/en/latest/docs/migrations/" target="_blank" rel="noopener">Sequelize</a> <code>Node.js</code></p></li><li><p><a href="http://www.fluentnhibernate.org/" target="_blank" rel="noopener">Fluent NHibernate</a> <code>C#</code></p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://flywaydb.org/getstarted/why" target="_blank" rel="noopener">Flyway</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于企业和基于 web 的应用程序来说，&lt;code&gt;Migration&lt;/code&gt; 就是将一个平台移到另一个平台。&lt;code&gt;Database Migration&lt;/code&gt;就是通过&lt;code&gt;migration scripts&lt;/code&gt;数据库从一个状态转换到另一个状态，每一个&lt;code&gt;migration script&lt;/code&gt;都会对数据库进行修改，修改的内容可能是创建一张新表、更新表的结构、更新表中的数据、删除一张表和创建索引，等等。一般迁移脚本会提供两个“互斥”功能，一个是&lt;code&gt;Up&lt;/code&gt;用于升级数据库，一个是&lt;code&gt;Down&lt;/code&gt;用于撤销数据库的升级。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DB" scheme="http://aikin.me/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 无聊知识点</title>
    <link href="http://aikin.me/2016/10/16/angularjs-one-tips/"/>
    <id>http://aikin.me/2016/10/16/angularjs-one-tips/</id>
    <published>2016-10-16T06:41:34.000Z</published>
    <updated>2017-01-06T05:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>  整理以前笔记时，发现几个简单的无聊的<code>AngularJS</code>知识点。</p><ul><li><strong><em>实现修改 URL， 不刷新页面</em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`use strict`</span></span><br><span class="line">angular.module(<span class="string">"App"</span>)</span><br><span class="line">  .run(<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope, $route, $location, $routeParams</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 重写 $location.path 实现修改 url, 但不刷新页面。</span></span><br><span class="line">    <span class="keyword">var</span> original = $location.path;</span><br><span class="line">    $location.path = <span class="function"><span class="keyword">function</span> (<span class="params">path, reload</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (reload === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> lastRoute = $route.current;</span><br><span class="line">        <span class="keyword">var</span> un = $rootScope.$on(<span class="string">'$locationChangeSuccess'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $route.current = lastRoute;</span><br><span class="line">          un();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> original.apply($location, [path]);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><strong><em>统计 <code>angularJS</code> 的 <code>watchers</code></em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> root = $(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>));</span><br><span class="line">  <span class="keyword">var</span> watchers = [];</span><br><span class="line">  <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.data().hasOwnProperty(<span class="string">'$scope'</span>)) &#123;</span><br><span class="line">      angular.forEach(element.data().$scope.$$watchers, <span class="function"><span class="keyword">function</span> (<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">        watchers.push(watcher);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    angular.forEach(element.children(), <span class="function"><span class="keyword">function</span> (<span class="params">childElement</span>) </span>&#123;</span><br><span class="line">      f($(childElement));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  f(root);</span><br><span class="line">  <span class="built_in">console</span>.log(watchers.length);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><p>只是想找个地方记录一下。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  整理以前笔记时，发现几个简单的无聊的&lt;code&gt;AngularJS&lt;/code&gt;知识点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;实现修改 URL， 不刷新页面&lt;/em&gt;&lt;/strong&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`use strict`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;App&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .run(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$rootScope, $route, $location, $routeParams&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重写 $location.path 实现修改 url, 但不刷新页面。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; original = $location.path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $location.path = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;path, reload&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (reload === &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastRoute = $route.current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; un = $rootScope.$on(&lt;span class=&quot;string&quot;&gt;&#39;$locationChangeSuccess&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          $route.current = lastRoute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          un();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; original.apply($location, [path]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="angularjs" scheme="http://aikin.me/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server 单用户模式到多用户模式</title>
    <link href="http://aikin.me/2016/10/04/locked-sql-user/"/>
    <id>http://aikin.me/2016/10/04/locked-sql-user/</id>
    <published>2016-10-04T08:39:10.000Z</published>
    <updated>2016-11-13T09:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近遇到 SQL Server 数据库的数据从其它库同步导入，同时也无法删除的问题。一开始的直接以为数据库被锁死，执行下面<code>SQL</code>语句查询相关被锁的表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> yourdatabase;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> request_session_id <span class="keyword">AS</span> spid,</span><br><span class="line">       OBJECT_NAME(resource_associated_entity_id) <span class="keyword">AS</span> tableName</span><br><span class="line"><span class="keyword">FROM</span> sys.dm_tran_locks</span><br><span class="line"><span class="keyword">WHERE</span> resource_type=<span class="string">'OBJECT'</span>;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>结果并没有发现锁的存在，但是发现数据库设置是单用户模式。将单用户模式修改为多用户模式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> [<span class="keyword">master</span>]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询运行的用户</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> master.dbo.sysprocesses</span><br><span class="line"><span class="keyword">WHERE</span> dbid=db_id(<span class="string">'dbname'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--将第一个语句运行后的结果替代 spid</span></span><br><span class="line"><span class="keyword">Kill</span> spid</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改为多用户模式</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> DBNAME <span class="keyword">SET</span> MULTI_USER</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近遇到 SQL Server 数据库的数据从其它库同步导入，同时也无法删除的问题。一开始的直接以为数据库被锁死，执行下面&lt;code&gt;SQL&lt;/code&gt;语句查询相关被锁的表：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;USE&lt;/span&gt; yourdatabase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; request_session_id &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; spid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       OBJECT_NAME(resource_associated_entity_id) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; tableName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; sys.dm_tran_locks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; resource_type=&lt;span class=&quot;string&quot;&gt;&#39;OBJECT&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQLServer" scheme="http://aikin.me/tags/SQLServer/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 应用和数据库隔离</title>
    <link href="http://aikin.me/2016/09/24/dockerize-db-isolation/"/>
    <id>http://aikin.me/2016/09/24/dockerize-db-isolation/</id>
    <published>2016-09-24T12:50:46.000Z</published>
    <updated>2016-10-03T17:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇<a href="http://aikin.github.io/2016/09/17/dockerize-database/" target="_blank" rel="noopener">容器化开发环境 - 数据库连接和迁移</a>分享了关于如何给容器中的应用创建数据库连接，接下来将分享一下如何将数据库从应用容器中分离出来。</p><p>为什么要进行分离？当应用和数据库在同一个容器中运行时，也就意味着，应用和数据库的生命周期捆绑在了一起，应用和数据库的运行就会出现相互干扰现象，应用的异常将有可能导致容器的停止，同时也将导致数据库的关闭。更主要的原因是，很多时候需要多个容器中的应用连接一个数据库，为了保证容器之间的运行相互独立，相互不影响，就有必要将数据库隔离在独立的容器中运行，让数据库和容器独处二人世界，同时保证数据库的生命周期不在受其它应用影响。</p><a id="more"></a><h3 id="Setup-Codebase"><a href="#Setup-Codebase" class="headerlink" title="Setup Codebase"></a>Setup Codebase</h3><ul><li>clone <a href="https://github.com/aikin/hello-dockerize" target="_blank" rel="noopener"><code>hello-dockerie</code></a> repo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/aikin/hello-dockerize.git</span><br></pre></td></tr></table></figure></li></ul><h3 id="Separate-MySQL-Dockerfile"><a href="#Separate-MySQL-Dockerfile" class="headerlink" title="Separate MySQL Dockerfile"></a>Separate MySQL Dockerfile</h3><ul><li>在<code>dockerize</code>目录下创建<code>mysql/Dockerfle</code></li><li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/mysql/Dockerfile" target="_blank" rel="noopener"><code>mysql/Dockerfile</code></a>，配置安装<code>MySQL</code>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:14.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line"></span><br><span class="line"># === Install Mysql ===</span><br><span class="line"></span><br><span class="line">RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</span><br><span class="line"></span><br><span class="line">RUN mkdir /docker-entrypoint-initdb.d</span><br><span class="line"></span><br><span class="line">ENV MYSQL_MAJOR 5.7</span><br><span class="line">ENV MYSQL_VERSION 5.7.11-1ubuntu14.04</span><br><span class="line"></span><br><span class="line"># gpg: key 5072E1F5: public key &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; imported</span><br><span class="line">RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5</span><br><span class="line"></span><br><span class="line">RUN echo &quot;deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-$&#123;MYSQL_MAJOR&#125;&quot; &gt; /etc/apt/sources.list.d/mysql.list</span><br><span class="line"></span><br><span class="line"># the &quot;/var/lib/mysql&quot; stuff here is because the mysql-server postinst doesn&apos;t have an explicit way to disable the mysql_install_db codepath besides having a database already &quot;configured&quot; (ie, stuff in /var/lib/mysql/mysql)</span><br><span class="line"># also, we set debconf keys to make APT a little quieter</span><br><span class="line">RUN &#123; \</span><br><span class="line">echo mysql-community-server mysql-community-server/data-dir select &apos;&apos;; \</span><br><span class="line">echo mysql-community-server mysql-community-server/root-pass password &apos;&apos;; \</span><br><span class="line">echo mysql-community-server mysql-community-server/re-root-pass password &apos;&apos;; \</span><br><span class="line">echo mysql-community-server mysql-community-server/remove-test-db select false; \</span><br><span class="line">&#125; | debconf-set-selections</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y mysql-server=&quot;$&#123;MYSQL_VERSION&#125;&quot;</span><br><span class="line">RUN rm -rf /var/lib/apt/lists/*</span><br><span class="line">RUN rm -rf /var/lib/mysql &amp;&amp; mkdir -p /var/lib/mysql</span><br><span class="line"></span><br><span class="line"># comment out a few problematic configuration values</span><br><span class="line"># don&apos;t reverse lookup hostnames, they are usually another container</span><br><span class="line">RUN sed -Ei &apos;s/^(bind-address|log)/#&amp;/&apos; /etc/mysql/my.cnf \</span><br><span class="line">&amp;&amp; echo &apos;skip-host-cache\nskip-name-resolve&apos; | awk &apos;&#123; print &#125; $1 == &quot;[mysqld]&quot; &amp;&amp; c == 0 &#123; c = 1; system(&quot;cat&quot;) &#125;&apos; /etc/mysql/my.cnf &gt; /tmp/my.cnf \</span><br><span class="line">&amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">VOLUME /var/lib/mysql</span><br><span class="line"></span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line">RUN chmod +x /usr/local/bin/docker-entrypoint.sh</span><br><span class="line">RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat</span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 3306</span><br><span class="line">CMD [&quot;mysqld&quot;]</span><br></pre></td></tr></table></figure></li><li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/Dockerfile" target="_blank" rel="noopener">dockerize/Dockerfile</a>，移除安装<code>MySQL</code>的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:14.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV VERSION 8</span><br><span class="line">ENV UPDATE 66</span><br><span class="line">ENV BUILD 17</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/lib/jvm/java-$&#123;VERSION&#125;-oracle</span><br><span class="line">ENV JRE_HOME $&#123;JAVA_HOME&#125;/jre</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN apt-get install ca-certificates curl \</span><br><span class="line">        gcc libc6-dev libssl-dev make \</span><br><span class="line">        -y --no-install-recommends</span><br><span class="line"></span><br><span class="line">RUNcurl --silent --location --retry 3 --cacert /etc/ssl/certs/GeoTrust_Global_CA.pem \</span><br><span class="line">--header &quot;Cookie: oraclelicense=accept-securebackup-cookie;&quot; \</span><br><span class="line">http://download.oracle.com/otn-pub/java/jdk/&quot;$&#123;VERSION&#125;&quot;u&quot;$&#123;UPDATE&#125;&quot;-b&quot;$&#123;BUILD&#125;&quot;/server-jre-&quot;$&#123;VERSION&#125;&quot;u&quot;$&#123;UPDATE&#125;&quot;-linux-x64.tar.gz \</span><br><span class="line">| tar xz -C /tmp</span><br><span class="line"></span><br><span class="line">RUNmkdir -p /usr/lib/jvm &amp;&amp; mv /tmp/jdk1.$&#123;VERSION&#125;.0_$&#123;UPDATE&#125; &quot;$&#123;JAVA_HOME&#125;&quot;</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y openssl</span><br><span class="line"></span><br><span class="line">RUN apt-get remove --purge --auto-remove -y \</span><br><span class="line">        gcc \</span><br><span class="line">        libc6-dev \</span><br><span class="line">        libssl-dev \</span><br><span class="line">        make</span><br><span class="line"></span><br><span class="line">RUNapt-get autoclean &amp;&amp; apt-get --purge -y autoremove</span><br><span class="line"></span><br><span class="line">RUNrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span><br><span class="line"></span><br><span class="line">RUN update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;$&#123;JRE_HOME&#125;/bin/java&quot; 1 &amp;&amp; \</span><br><span class="line">update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;$&#123;JAVA_HOME&#125;/bin/javac&quot; 1 &amp;&amp; \</span><br><span class="line">update-alternatives --set java &quot;$&#123;JRE_HOME&#125;/bin/java&quot; &amp;&amp; \</span><br><span class="line">update-alternatives --set javac &quot;$&#123;JAVA_HOME&#125;/bin/javac&quot;</span><br><span class="line"></span><br><span class="line">WORKDIR /hello-dockerize</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line">EXPOSE 5005</span><br><span class="line">CMD [&quot;bash&quot;]</span><br></pre></td></tr></table></figure></li><li><p>将<code>dockerize/docker-entrypoint.sh</code>移动到<code>dockerize/mysql</code>目录下</p></li></ul><h3 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h3><ul><li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/docker-compose.yml" target="_blank" rel="noopener"><code>docker-compose.yml</code></a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  build: ./dockerize</span><br><span class="line">  environment:</span><br><span class="line">    - LANG=C.UTF-8</span><br><span class="line">    - TERM=xterm</span><br><span class="line">    - DEBUG=true</span><br><span class="line">  links:</span><br><span class="line">      - mysql:mysql</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;8080:8080&quot;</span><br><span class="line">    - &quot;5005:5005&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - .:/hello-dockerize</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line">  build: ./dockerize/mysql</span><br><span class="line">  env_file: ./dockerize/dev.env</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;3306:3306&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - /var/lib/mysql:/var/lib/mysql</span><br></pre></td></tr></table></figure></li><li><p>启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure></li><li><p>查看容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compse ps</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span></span><br><span class="line">Name                       Command             State                       Ports</span><br><span class="line">---------------------------------------------------------------------------------------------------------------</span><br><span class="line">hellodockerize_mysql_1     docker-entrypoint.sh mysqld   Up      0.0.0.0:3306-&gt;3306/tcp</span><br><span class="line">hellodockerize_web_run_1   bash                          Up      0.0.0.0:5005-&gt;5005/tcp, 0.0.0.0:8080-&gt;8080/tcp</span><br><span class="line"><span class="comment">######</span></span><br></pre></td></tr></table></figure></li><li><p>执行 migrate 命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@6485a7a48988:/hello-dockerize# ./gradlew flywayClean flywayInit flywayMigrate</span><br></pre></td></tr></table></figure></li></ul><h3 id="Check-Migrate-Result-On-Intellij-IDEA"><a href="#Check-Migrate-Result-On-Intellij-IDEA" class="headerlink" title="Check Migrate Result On Intellij IDEA"></a>Check Migrate Result On Intellij IDEA</h3><ul><li>查看 User 表<blockquote><p><img src="./user.png" alt="user"></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇&lt;a href=&quot;http://aikin.github.io/2016/09/17/dockerize-database/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;容器化开发环境 - 数据库连接和迁移&lt;/a&gt;分享了关于如何给容器中的应用创建数据库连接，接下来将分享一下如何将数据库从应用容器中分离出来。&lt;/p&gt;
&lt;p&gt;为什么要进行分离？当应用和数据库在同一个容器中运行时，也就意味着，应用和数据库的生命周期捆绑在了一起，应用和数据库的运行就会出现相互干扰现象，应用的异常将有可能导致容器的停止，同时也将导致数据库的关闭。更主要的原因是，很多时候需要多个容器中的应用连接一个数据库，为了保证容器之间的运行相互独立，相互不影响，就有必要将数据库隔离在独立的容器中运行，让数据库和容器独处二人世界，同时保证数据库的生命周期不在受其它应用影响。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dockerize" scheme="http://aikin.me/tags/dockerize/"/>
    
      <category term="docker" scheme="http://aikin.me/tags/docker/"/>
    
      <category term="db" scheme="http://aikin.me/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 数据库连接和迁移</title>
    <link href="http://aikin.me/2016/09/17/dockerize-database/"/>
    <id>http://aikin.me/2016/09/17/dockerize-database/</id>
    <published>2016-09-17T08:50:29.000Z</published>
    <updated>2016-10-03T17:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://aikin.me/2016/07/20/dockerize-dev-env/">容器化开发环境</a>中分享了如何容器化本地的开发环境。对于一个<code>Web</code>应用，数据库似乎是必不可少的东西。下面会通过例子来介绍一下如何<code>Setup</code>一个容器中的数据库。例子将会使用的技术栈：</p><ul><li><a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a></li><li><a href="https://flywaydb.org/" target="_blank" rel="noopener">Flyway</a></li><li>…</li></ul><a id="more"></a><h3 id="Setup-Codebase"><a href="#Setup-Codebase" class="headerlink" title="Setup Codebase"></a>Setup Codebase</h3><ul><li>clone <a href="https://github.com/aikin/hello-dockerize.git" target="_blank" rel="noopener">hello-dockerize</a> repo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/aikin/hello-dockerize.git</span><br></pre></td></tr></table></figure></li></ul><h3 id="Install-MySQL-On-Docker-Image"><a href="#Install-MySQL-On-Docker-Image" class="headerlink" title="Install MySQL On Docker Image"></a>Install MySQL On Docker Image</h3><ul><li>在<code>dockerize</code>目录下新建文件<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/docker-entrypoint.sh" target="_blank" rel="noopener">docker-entrypoint.sh</a>，用于控制<code>MySQL</code>数据库的启动。</li><li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/Dockerfile" target="_blank" rel="noopener">Dockerfile</a>，添加安装<code>MySQL</code>的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># === Install Mysql ===</span></span><br><span class="line">RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</span><br><span class="line"></span><br><span class="line">RUN mkdir /docker-entrypoint-initdb.d</span><br><span class="line"></span><br><span class="line">ENV MYSQL_MAJOR 5.7</span><br><span class="line">ENV MYSQL_VERSION 5.7.11-1ubuntu14.04</span><br><span class="line"></span><br><span class="line"><span class="comment"># gpg: key 5072E1F5: public key "MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;" imported</span></span><br><span class="line">RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-<span class="variable">$&#123;MYSQL_MAJOR&#125;</span>"</span> &gt; /etc/apt/sources.list.d/mysql.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># the "/var/lib/mysql" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already "configured" (ie, stuff in /var/lib/mysql/mysql)</span></span><br><span class="line"><span class="comment"># also, we set debconf keys to make APT a little quieter</span></span><br><span class="line">RUN &#123; \</span><br><span class="line"><span class="built_in">echo</span> mysql-community-server mysql-community-server/data-dir select <span class="string">''</span>; \</span><br><span class="line"><span class="built_in">echo</span> mysql-community-server mysql-community-server/root-pass password <span class="string">''</span>; \</span><br><span class="line"><span class="built_in">echo</span> mysql-community-server mysql-community-server/re-root-pass password <span class="string">''</span>; \</span><br><span class="line"><span class="built_in">echo</span> mysql-community-server mysql-community-server/remove-test-db select <span class="literal">false</span>; \</span><br><span class="line">&#125; | debconf-set-selections</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y mysql-server=<span class="string">"<span class="variable">$&#123;MYSQL_VERSION&#125;</span>"</span></span><br><span class="line">RUN rm -rf /var/lib/apt/lists/*</span><br><span class="line">RUN rm -rf /var/lib/mysql &amp;&amp; mkdir -p /var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># comment out a few problematic configuration values</span></span><br><span class="line"><span class="comment"># don't reverse lookup hostnames, they are usually another container</span></span><br><span class="line">RUN sed -Ei <span class="string">'s/^(bind-address|log)/#&amp;/'</span> /etc/mysql/my.cnf \</span><br><span class="line">&amp;&amp; <span class="built_in">echo</span> <span class="string">'skip-host-cache\nskip-name-resolve'</span> | awk <span class="string">'&#123; print &#125; $1 == "[mysqld]" &amp;&amp; c == 0 &#123; c = 1; system("cat") &#125;'</span> /etc/mysql/my.cnf &gt; /tmp/my.cnf \</span><br><span class="line">&amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">VOLUME /var/lib/mysql</span><br><span class="line"></span><br><span class="line">COPY docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">RUN chmod +x /usr/<span class="built_in">local</span>/bin/docker-entrypoint.sh</span><br><span class="line">RUN ln -s usr/<span class="built_in">local</span>/bin/docker-entrypoint.sh /entrypoint.sh <span class="comment"># backwards compat</span></span><br><span class="line">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 3306</span><br><span class="line">CMD [<span class="string">"mysqld"</span>]</span><br></pre></td></tr></table></figure></li><li><p>新建文件<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/dev.env" target="_blank" rel="noopener">dev.env</a>，用于配置数据库账号和密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_USER=mysql</span><br><span class="line">MYSQL_PASSWORD=mysql</span><br><span class="line">MYSQL_DATABASE=hello_dockerize</span><br><span class="line">MYSQL_ROOT_PASSWORD=12345678</span><br></pre></td></tr></table></figure></li><li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/docker-compose.yml" target="_blank" rel="noopener">docker-compose.yml</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  build: ./dockerize</span><br><span class="line">  env_file: ./dockerize/dev.env</span><br><span class="line">  environment:</span><br><span class="line">    - LANG=C.UTF-8</span><br><span class="line">    - TERM=xterm</span><br><span class="line">    - DEBUG=true</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;8080:8080&quot;</span><br><span class="line">    - &quot;3306:3306&quot;</span><br><span class="line">    - &quot;5005:5005&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - .:/hello-dockerize</span><br><span class="line">    - /var/lib/mysql:/var/lib/mysql</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --service-ports web</span><br></pre></td></tr></table></figure></li></ul><h3 id="Use-Database-Migrations-Flyway"><a href="#Use-Database-Migrations-Flyway" class="headerlink" title="Use Database Migrations Flyway"></a>Use Database Migrations Flyway</h3><ul><li><p>新建文件<a href="https://github.com/aikin/hello-dockerize/blob/master/db.mysql.gradle" target="_blank" rel="noopener">db.mysql.gradle</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flyway &#123;</span><br><span class="line">    driver = &apos;com.mysql.jdbc.Driver&apos;</span><br><span class="line">    url = &quot;jdbc:mysql://dockerhost:3306/hello_dockerize&quot;</span><br><span class="line">    user = &apos;mysql&apos;</span><br><span class="line">    password = &apos;mysql&apos;</span><br><span class="line">    table = &apos;hello_dockerize_schema_version&apos;</span><br><span class="line">    initOnMigrate = true</span><br><span class="line">    locations = [&quot;filesystem:$&#123;projectDir&#125;/src/main/resources/db/migration/mysql&quot;]</span><br><span class="line">    sqlMigrationPrefix = &apos;MySQL-&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;mysql:mysql-connector-java:5.1.34&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/build.gradle" target="_blank" rel="noopener">build.gradle</a>文件，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE&quot;)</span><br><span class="line">        classpath &quot;org.flywaydb:flyway-gradle-plugin:3.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply plugin: &apos;flyway&apos;</span><br><span class="line">apply from: &quot;db.mysql.gradle&quot;</span><br></pre></td></tr></table></figure></li><li><p>新建目录 <code>src/main/resources/db/migration/mysql</code>，添加 migration sql 脚本<code>MySQL-1_1__create_user.sql</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">User</span> (</span><br><span class="line"><span class="keyword">ID</span>          <span class="built_in">BIGINT</span> PRIMARY <span class="keyword">KEY</span>   AUTO_INCREMENT,</span><br><span class="line">FIRST_NAME  <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LAST_NAME   <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">User</span> (FIRST_NAME, LAST_NAME) <span class="keyword">values</span> (<span class="string">'Laijin'</span>, <span class="string">'Lu'</span>);</span><br></pre></td></tr></table></figure></li><li><p>执行 migrate 命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew flywayClean flywayInit flywayMigrate</span><br></pre></td></tr></table></figure></li></ul><h3 id="Check-Migrate-Result-On-Intellij-IDEA"><a href="#Check-Migrate-Result-On-Intellij-IDEA" class="headerlink" title="Check Migrate Result On Intellij IDEA"></a>Check Migrate Result On Intellij IDEA</h3><ul><li><p>安装 Intellij IDEA plugin <code>Database Navigator</code>，配置<code>connections</code>：</p><blockquote><p><img src="./database-connections.png" alt="connections"></p></blockquote></li><li><p>查看<code>User</code>表数据</p><blockquote><p><img src="./user-table.png" alt="user table"><br><img src="./user-data.png" alt="user data"></p></blockquote></li></ul><p>　<strong><em> 结束了吗？并没有，如何将应用和数据库分离成两个独立的容器。 </em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://aikin.me/2016/07/20/dockerize-dev-env/&quot;&gt;容器化开发环境&lt;/a&gt;中分享了如何容器化本地的开发环境。对于一个&lt;code&gt;Web&lt;/code&gt;应用，数据库似乎是必不可少的东西。下面会通过例子来介绍一下如何&lt;code&gt;Setup&lt;/code&gt;一个容器中的数据库。例子将会使用的技术栈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flywaydb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flyway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="dockerize" scheme="http://aikin.me/tags/dockerize/"/>
    
      <category term="mysql" scheme="http://aikin.me/tags/mysql/"/>
    
      <category term="docker mysql" scheme="http://aikin.me/tags/docker-mysql/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 操作系统虚拟化</title>
    <link href="http://aikin.me/2016/09/11/docker/"/>
    <id>http://aikin.me/2016/09/11/docker/</id>
    <published>2016-09-11T07:19:15.000Z</published>
    <updated>2016-10-03T17:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> 是操作系统级别的轻量级虚拟化技术，也就是实现轻量级的操作系统虚拟化。它能够让应用的分发、部署和管理都变得前所未有的高效和轻松。同时它也是一个用 go 语言实现的开源项目，源代码在 github 上。那么什么是虚拟化？什么又是操作系统虚拟化？</p><a id="more"></a><blockquote><ul><li>虚拟化，是指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。<br>物理机，是相对于虚拟机而言的对实体计算机的称呼。物理机提供给虚拟机以硬件环境，有时也称为“寄主”或“宿主”。通过物理机和虚拟机的配合，一台计算机上可以安装上多个操作系统（一个外界操作系统和虚拟机中的数个操作系统），并且几个操作系统间还可以实现通信，就像是有多台计算机一样。</li><li>操作系统级虚拟化: 在传统操作系统中，所有用户的进程本质上是在同一个操作系统的实例中运行，因此内核或应用程序的缺陷可能影响到其它进程也可能受其它进程的影响。它是一种在服务器操作系统中使用的轻量级的虚拟化技术，内核通过创建多个虚拟的操作系统实例（内核和库）来隔离不同的进程，不同实例中的进程完全不了解对方的存在。它并不在物理系统里创建多个虚拟机环境，而是让一个操作系统创建多个彼此独立的应用环境，这些应用环境都访问同一个内核。<br><img src="./os-virtualization.jpg" alt="os-virtualization"></li></ul></blockquote><h3 id="Containers-VS-VMs"><a href="#Containers-VS-VMs" class="headerlink" title="Containers VS VMs"></a><code>Containers</code> VS <code>VMs</code></h3><p>Docker Container 和 普通的虚拟机 Image 相比, 最大的区别是它并不包含操作系统内核。</p><h5 id="传统的虚拟化技术-VM"><a href="#传统的虚拟化技术-VM" class="headerlink" title="传统的虚拟化技术(VM)"></a><strong><em>传统的虚拟化技术(VM)</em></strong></h5><blockquote><p><img style="margin: auto;" src="vm.jpg"><br>传统的虚拟化技术(VM)的 <code>Hypervisor</code> 需要实现对硬件的虚拟化，并且还要搭载自己的操作系统，自然在启动速度和资源利用率以及性能上有比较大的开销。普通虚拟机将整个操作系统运行在虚拟的硬件平台上, 进而提供完整的运行环境供应用程序运行。<br>VM 是一个运行在宿主机之上的完整的操作系统，包含了大量类似硬件驱动、虚拟处理器、网络接口等等并不需要的信息。VM运行自身操作系统会占用较多的CPU、内存、硬盘资源。</p></blockquote><h5 id="容器虚拟化技术-Docker"><a href="#容器虚拟化技术-Docker" class="headerlink" title="容器虚拟化技术(Docker)"></a><strong><em>容器虚拟化技术(Docker)</em></strong></h5><blockquote><p><img style="margin: auto;" src="docker.jpg"><br><code>Docker</code> 几乎就没有什么虚拟化的东西，并且直接复用了 Host 主机的 OS，在 Docker Engine 层面实现了调度和隔离重量一下子就降低了好几个档次。 Docker 的容器利用了 <code>LXC</code>，管理利用了 <code>namespaces</code> 来做权限的控制和隔离， <code>cgroups</code> 来进行资源的配置，并且还通过 <code>aufs</code> 来进一步提高文件系统的资源利用率。<br><code>Docker Container</code> 来说启动和销毁都是秒级的，而且它底层依赖的技术<code>lxc(linux container)</code>完全是内核特性，没有任何中间层开销，对于资源的利用率极高性能接近物理机。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.infoq.com/cn/articles/docker-core-technology-preview" target="_blank" rel="noopener">Docker核心技术预览</a><br><a href="http://book.51cto.com/art/201301/377685.htm" target="_blank" rel="noopener">CPU虚拟化</a><br><a href="https://www.docker.com/what-docker" target="_blank" rel="noopener">what docker</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt; 是操作系统级别的轻量级虚拟化技术，也就是实现轻量级的操作系统虚拟化。它能够让应用的分发、部署和管理都变得前所未有的高效和轻松。同时它也是一个用 go 语言实现的开源项目，源代码在 github 上。那么什么是虚拟化？什么又是操作系统虚拟化？&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://aikin.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 如何断点调试容器中的应用</title>
    <link href="http://aikin.me/2016/08/28/how-to-debug-app-in-dockerize-dev-env/"/>
    <id>http://aikin.me/2016/08/28/how-to-debug-app-in-dockerize-dev-env/</id>
    <published>2016-08-28T15:36:46.000Z</published>
    <updated>2016-10-03T17:27:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇<a href="http://aikin.me/2016/07/20/dockerize-dev-env/#more">容器化开发环境</a>已经简单的介绍了如何容器化开发环境。在开发过程中，很多时候都需要通过<code>断点的方式</code>来调试程序或定位<code>BUG</code>，那么如何断点调试运行在容器中的应用呢？？？</p><p>容器就像一个虚拟机，就像一个远程的服务器，要断点调试容器中的应用，就像要断点调试虚拟机和远程的服务器上的应用一样。如何配置一个可以远程断点调试的应用，每个语言，每个框架都有不同的方式，接下来介绍的例子使用的技术栈如下：</p><a id="more"></a><ul><li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">Spring Boot</a></li><li><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a></li><li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a></li></ul><h4 id="接下来会基于上一篇博客中的DEMO-hello-dockerize-进行扩展。"><a href="#接下来会基于上一篇博客中的DEMO-hello-dockerize-进行扩展。" class="headerlink" title="接下来会基于上一篇博客中的DEMO hello-dockerize 进行扩展。"></a>接下来会基于上一篇博客中的<code>DEMO</code> <a href="https://github.com/aikin/hello-dockerize" target="_blank" rel="noopener">hello-dockerize</a> 进行扩展。</h4><hr><ul><li><p><strong>clone code repo</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/aikin/hello-dockerize.git</span><br></pre></td></tr></table></figure></li><li><p><strong>更新<code>build.gradle</code>文件，在文件中写入<code>apply plugin: &quot;application&quot;</code> 和</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  remote debug setup</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">applicationDefaultJvmArgs = [</span><br><span class="line">        <span class="string">"-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><strong>更新<code>docker-compose.yml</code>文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  build: ./dockerize</span><br><span class="line">  environment:</span><br><span class="line">    - LANG=C.UTF-8</span><br><span class="line">    - TERM=xterm</span><br><span class="line">    - DEBUG=true</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;8080:8080&quot;</span><br><span class="line">    - &quot;5005:5005&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - .:/hello-dockerize</span><br></pre></td></tr></table></figure></li><li><p><strong>启动容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --service-ports web</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 IntelliJ IDEA</strong></p><ul><li>打开工具栏<code>Run</code> –&gt; <code>Edit Configurations</code><blockquote><p><img src="./open.png" alt="config"></p></blockquote></li><li>添加新配置 点击加号，选择<code>Remote</code>，将 Host <code>localhost</code> 修改为<code>docker-machine ip machine-name</code>获取的<code>IP</code>，在<code>/etc/hosts</code>文件中绑定的本地域名<code>dockerhost</code><blockquote><p><img src="./add.png" alt="add"></p></blockquote></li></ul><ul><li><p><strong>在容器中启动服务：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@b73c06ebe59f:/hello-dockerize<span class="comment"># ./gradlew bootRun --debug-jvm --stacktrace</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动 IntelliJ IDEA 的 debugger 模式</strong></p><ul><li>点击<code>debug</code>按钮<blockquote><p><img src="./debugger.png" alt="debugger"></p></blockquote></li><li>打开浏览器访问<code>http://dockerhost:8080/hello-dockerize</code>，如果你也看到下面的画面，恭喜你成功啦。<blockquote><p><img src="./debugging.png" alt="debugging">　　</p></blockquote></li></ul></li></ul></li></ul><hr><p>　　<br><strong><em>学会断点调试容器中的应用，再也不用为我那乌黑亮丽的头发着急啦！！！</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇&lt;a href=&quot;http://aikin.me/2016/07/20/dockerize-dev-env/#more&quot;&gt;容器化开发环境&lt;/a&gt;已经简单的介绍了如何容器化开发环境。在开发过程中，很多时候都需要通过&lt;code&gt;断点的方式&lt;/code&gt;来调试程序或定位&lt;code&gt;BUG&lt;/code&gt;，那么如何断点调试运行在容器中的应用呢？？？&lt;/p&gt;
&lt;p&gt;容器就像一个虚拟机，就像一个远程的服务器，要断点调试容器中的应用，就像要断点调试虚拟机和远程的服务器上的应用一样。如何配置一个可以远程断点调试的应用，每个语言，每个框架都有不同的方式，接下来介绍的例子使用的技术栈如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="dockerize" scheme="http://aikin.me/tags/dockerize/"/>
    
      <category term="debugger" scheme="http://aikin.me/tags/debugger/"/>
    
      <category term="break point" scheme="http://aikin.me/tags/break-point/"/>
    
  </entry>
  
</feed>
