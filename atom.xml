<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kin&#39;blog</title>
  <subtitle>喜欢coding。喜欢大海。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aikin.github.io/"/>
  <updated>2017-06-25T06:47:57.000Z</updated>
  <id>http://aikin.github.io/</id>
  
  <author>
    <name>aikin</name>
    <email>1@aikin.me</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>COLOR RUNER</title>
    <link href="http://aikin.github.io/2017/06/25/color-run/"/>
    <id>http://aikin.github.io/2017/06/25/color-run/</id>
    <published>2017-06-25T06:32:38.000Z</published>
    <updated>2017-06-25T06:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/2017/06/25/color-run/1.jpg" alt="hover" title="hover"></div></div><div class="group-picture-row"></div></div></div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>栈内和堆内的生命体</title>
    <link href="http://aikin.github.io/2017/05/15/ref-base-data-type/"/>
    <id>http://aikin.github.io/2017/05/15/ref-base-data-type/</id>
    <published>2017-05-15T13:54:47.000Z</published>
    <updated>2017-05-29T06:18:37.000Z</updated>
    
    <content type="html"><![CDATA[<p> 数据是所有程序处理的根本，而引用数据类型和基础数据类型是对数据的不同抽象。在我们学习过的编程语言中，都有它们的身影，然而它们的具象会有所不同。比如：</p>
<blockquote>
<ul>
<li>JavaScript 基础数据类型：<code>undefined,null,number,boolean,string</code>；<br>引用数据类型：<code>Object,Boolean,Number,String，Array，Class</code>。</li>
<li>Java 基础数据类型：<code>byte, short,int,long,float,double,boolean,char</code>；<br>引用数据类型：<code>Class，Array，Interface，Enum，Annotation</code>。</li>
</ul>
</blockquote>
<p> 虽然它们的具象表示不同，不过它们底层是一样的，或者说它们内存模式是相同的。<br><a id="more"></a></p>
<h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>据我这个非科班生的人所了解的，基础数据类型都是在<code>栈内存</code>中，引用数据类型都是在<code>堆内存</code>中。先上一张内存模型图：</p>
<blockquote>
<p><img src="./memory.png" width="150px" height="300px"></p>
<ul>
<li>栈区：存放函数的参数值，局部变量的值。操作方式类似于数据结构中的栈，编译器自动分配和释放。</li>
<li>堆区：用于存放引用类型对象，或者说由 <code>new</code> 创建的对象。</li>
<li>全局区：用于存储全局变量和静态变量。</li>
<li>常量区：存放常量，程序结束后由系统释放。</li>
<li>代码区：存放函数体的二进制代码。</li>
</ul>
</blockquote>
<h3 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h3><p>在对模型有大概的了解之后，那么如何和代码进行映射呢？接着上图(一图顶千言)：<br><img src="./stack-head.png" alt="stack head"></p>
<p>如图所示，左边的是栈内存，右边的堆内存。按照栈的操作方式，程序的执行顺序：<code>main() --&gt; d.go() --&gt; dog.setName()</code>。每个方法都有局部变量(<code>d</code>,<code>dog</code>,<code>dogName</code>)，也存储在栈内存中。每个局部变量都指向堆内存一个引用类型对象。</p>
<p>在上一段伪代码(C#)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void Method1() &#123;</div><div class="line">  int i = 4;</div><div class="line">  int y = 2;</div><div class="line">  class1 cls1 = new class1();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码逻辑很简单，都是赋值操作。在栈和堆中又是如何反应的？上图：<br><img src="./stack-head-line.png" alt="stack head"></p>
<p>图中演绎了变量在栈内存和堆内存中的生命周期。执行 <code>int i = 4</code>后，<code>i=4</code>分配到栈内存，同理<code>y=2</code>也被分配到栈内存中，按照栈的特性，先入后出，所以<code>y=2</code>会在<code>i=4</code>上面。<br>当执行<code>class1 cls1 = new class1()</code>, 局部变量 <code>cls1</code> 会被堆栈，同时指向堆内存中的引用类型创建的内存空间。当方法执行结束后，栈内存中的变量所占用的内存空间会被释放，而堆内存中占用的内存空间，会被 <code>GC</code> 回收。</p>
<h3 id="多线程之间内存关系"><a href="#多线程之间内存关系" class="headerlink" title="多线程之间内存关系"></a>多线程之间内存关系</h3><p>多线程之间共享<code>堆内存</code>，每个线程都有<code>Thread Local Storage</code> 和 私有的栈内存。由于多线程之间是共享堆内存的，所以一个线程对一个共享变量的修改对另一个线程是可见的。也就是说，在一个线程中对共享变量修改后，要在其它线程能够得知共享变量的变化，展现内存可见性的特性。<br><img src="./thread-memory.png" alt="thread memory"></p>
<p><strong><em>写在最后：掌握如何分析变量是在栈内存和堆内存，可以有利于更好的写性能高的并发程序，理解为什么需要锁的根本原因。</em></strong></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr>
<ul>
<li><a href="https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap" target="_blank" rel="external">What and where are the stack and heap?</a></li>
<li><a href="https://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types#Stack%20and%20Heap" target="_blank" rel="external">Six important .NET concepts: Stack, heap, value types, reference types, boxing, and unboxing</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 数据是所有程序处理的根本，而引用数据类型和基础数据类型是对数据的不同抽象。在我们学习过的编程语言中，都有它们的身影，然而它们的具象会有所不同。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 基础数据类型：&lt;code&gt;undefined,null,number,boolean,string&lt;/code&gt;；&lt;br&gt;引用数据类型：&lt;code&gt;Object,Boolean,Number,String，Array，Class&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Java 基础数据类型：&lt;code&gt;byte, short,int,long,float,double,boolean,char&lt;/code&gt;；&lt;br&gt;引用数据类型：&lt;code&gt;Class，Array，Interface，Enum，Annotation&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 虽然它们的具象表示不同，不过它们底层是一样的，或者说它们内存模式是相同的。&lt;br&gt;
    
    </summary>
    
    
      <category term="reference" scheme="http://aikin.github.io/tags/reference/"/>
    
      <category term="stack" scheme="http://aikin.github.io/tags/stack/"/>
    
      <category term="heap" scheme="http://aikin.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>并发入坑前奏</title>
    <link href="http://aikin.github.io/2017/03/19/concurrency/"/>
    <id>http://aikin.github.io/2017/03/19/concurrency/</id>
    <published>2017-03-18T16:22:54.000Z</published>
    <updated>2017-04-16T04:10:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为非科班生，在搞清楚什么是并发？什么是并行？之前，还是需要先了解一下<code>CPU</code>、<code>Process</code>和<code>Thread</code>之间的关系。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><hr>
<h3 id="什么是处理器"><a href="#什么是处理器" class="headerlink" title="什么是处理器?"></a>什么是处理器?</h3><blockquote>
<p>中央处理器 （英语：Central Processing Unit，缩写：CPU），是计算机的主要设备之一，功能主要是解释计算机指令以及处理计算机软件中的数据。计算机的可编程性主要是指对中央处理器的编程。中央处理器、内部存储器和输入/输出设备是现代电脑的三大核心部件。– <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p><code>CPU</code>是计算机的核心，控制指令的发布，负责所有的数据计算处理。</p>
<a id="more"></a>
<h3 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h3><blockquote>
<p>进程（英语：process），是计算机中已运行程序的实体。进程为曾经是分时系统的基本运作单位。在<code>面向进程设计的系统</code>（如早期的UNIX，Linux 2.4及更早的版本）中，进程是程序的基本执行实体；在<code>面向线程设计的系统</code>（如当代多数操作系统、Linux 2.6及更新的版本）中，<em>进程本身不是基本运行单位，而是线程的容器</em>。程序本身只是指令、数据及其组织形式的描述，进程才是程序（那些指令和数据）的真正运行实例。– <a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>进程是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，并没有统一的标准定义。进程一般由程序、数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。</p>
<h4 id="进程生命周期"><a href="#进程生命周期" class="headerlink" title="进程生命周期"></a>进程生命周期</h4><p><img src="./process-life-cycle.png" alt="进程生命周期"></p>
<h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><blockquote>
<p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。– <a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>线程是最小的执行单元,是一个抽象的概念，它的抽象层次比进程抽象层次低。</p>
<h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p><img src="./thread-life-cycle.png" alt="线程生命周期"></p>
<ul>
<li><blockquote>
<p>提示： 新启动的子线程并不会随着主线程的结束而结束。一旦子线程启动起来后，它就拥有和主线程相同的地位，它不会受主线程的影响。<br><img src="./new-thread.png" alt="new thread"></p>
</blockquote>
</li>
</ul>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><hr>
<h3 id="处理器、进程和线程的关系"><a href="#处理器、进程和线程的关系" class="headerlink" title="处理器、进程和线程的关系"></a>处理器、进程和线程的关系</h3><ul>
<li>操作系统为进程分配资源，不对线程分配资源。一个进程内可以包含多个线程，同一进程所产生的线程共享同一内存空间。线程是进程的一个实体，是<code>CPU</code>调度和分派的基本单位，也就是说处理调度的是线程。线程本身基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li>
<li>进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="http://blog.csdn.net/luoweifu/article/details/46595285" target="_blank" rel="external">编程思想之多线程与多进程(1)——以操作系统的角度述说线程与进程</a><br><a href="http://www.kancloud.cn/wizardforcel/liaoxuefeng/108670" target="_blank" rel="external">进程和线程</a><br><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external">进程与线程的一个简单解释</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为非科班生，在搞清楚什么是并发？什么是并行？之前，还是需要先了解一下&lt;code&gt;CPU&lt;/code&gt;、&lt;code&gt;Process&lt;/code&gt;和&lt;code&gt;Thread&lt;/code&gt;之间的关系。&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;什么是处理器&quot;&gt;&lt;a href=&quot;#什么是处理器&quot; class=&quot;headerlink&quot; title=&quot;什么是处理器?&quot;&gt;&lt;/a&gt;什么是处理器?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;中央处理器 （英语：Central Processing Unit，缩写：CPU），是计算机的主要设备之一，功能主要是解释计算机指令以及处理计算机软件中的数据。计算机的可编程性主要是指对中央处理器的编程。中央处理器、内部存储器和输入/输出设备是现代电脑的三大核心部件。– &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;是计算机的核心，控制指令的发布，负责所有的数据计算处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrency" scheme="http://aikin.github.io/tags/concurrency/"/>
    
      <category term="cpu" scheme="http://aikin.github.io/tags/cpu/"/>
    
      <category term="thread" scheme="http://aikin.github.io/tags/thread/"/>
    
      <category term="process" scheme="http://aikin.github.io/tags/process/"/>
    
  </entry>
  
  <entry>
    <title>数据迁移工具 - Flyway</title>
    <link href="http://aikin.github.io/2017/02/26/db-migration-flyway/"/>
    <id>http://aikin.github.io/2017/02/26/db-migration-flyway/</id>
    <published>2017-02-26T06:37:48.000Z</published>
    <updated>2017-03-12T02:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于数据迁移的概念，相信大家已经都比较熟悉。那么，什么是数据迁移？为什么需要数据迁移？在这里就不再做相关分享啦~。接下来主要分享一下数据迁移工具 <a href="https://github.com/flyway/flyway" target="_blank" rel="external">Flyway</a> 使用。<br><a id="more"></a></p>
<p><img src="./flyway-home.png" alt="flyway home"></p>
<blockquote>
<p>Flyway is the Apache v2 licensed open-source tool that makes database migrations easy. It strongly favors simplicity and convention over configuration.</p>
</blockquote>
<p><code>Flyway</code> 是一款开源的数据库迁移工具，它认为简单和约定优于配置。没有繁琐的配置，有 6 个主要基本命令：<a href="https://flywaydb.org/documentation/command/migrate" target="_blank" rel="external">Migrate</a>, <a href="https://flywaydb.org/documentation/command/clean" target="_blank" rel="external">Clean</a>, <a href="https://flywaydb.org/documentation/command/info" target="_blank" rel="external">Info</a>, <a href="https://flywaydb.org/documentation/command/validate" target="_blank" rel="external">Validate</a>, <a href="https://flywaydb.org/documentation/command/baseline" target="_blank" rel="external">Baseline</a> 和 <a href="https://flywaydb.org/documentation/command/repair" target="_blank" rel="external">Repair</a>。</p>
<blockquote>
<p>Flyway received the highest distinction on the <a href="https://www.thoughtworks.com/radar/tools/flyway" target="_blank" rel="external">Thoughtworks Technology Radar</a> by being placed in the adopt category.</p>
</blockquote>
<h3 id="如何使用-Flyway？"><a href="#如何使用-Flyway？" class="headerlink" title="如何使用 Flyway？"></a>如何使用 Flyway？</h3><p><code>Flyway</code>支持很多种和应用集成的方法，这里主要分享一下<code>Gradle</code>集成<code>Flyway</code>的使用。</p>
<h4 id="Setup-Repo-db-migration-flyway："><a href="#Setup-Repo-db-migration-flyway：" class="headerlink" title="Setup Repo db-migration-flyway："></a>Setup Repo <a href="https://github.com/aikin/db-migration-flyway/tree/42ba4a654a49503e97a84a899c42377202645c72" target="_blank" rel="external">db-migration-flyway</a>：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gradle init --type java-libray</div></pre></td></tr></table></figure>
<p><img src="./init.png" alt="init"></p>
<h4 id="Add-Gradle-Flyway-plugin"><a href="#Add-Gradle-Flyway-plugin" class="headerlink" title="Add Gradle Flyway plugin"></a>Add Gradle Flyway plugin</h4><ul>
<li><p>Change <a href="https://github.com/aikin/db-migration-flyway/blob/42ba4a654a49503e97a84a899c42377202645c72/build.gradle" target="_blank" rel="external"><code>build.gradle</code></a> file content</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">"gradle.plugin.com.boxfuse.client:flyway-release:4.1.1"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">"idea"</span></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">"org.flywaydb.flyway"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Build repo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew build</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Config-Flyway"><a href="#Config-Flyway" class="headerlink" title="Config Flyway"></a>Config Flyway</h4><ul>
<li><p>Change [<code>build.gradle</code>] file content</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">"gradle.plugin.com.boxfuse.client:flyway-release:4.1.1"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">"idea"</span></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">"org.flywaydb.flyway"</span></div><div class="line"></div><div class="line">flyway &#123;</div><div class="line">    driver = <span class="string">'com.mysql.jdbc.Driver'</span></div><div class="line">    url = <span class="string">"jdbc:mysql://127.0.0.1:3306/flyway_dev"</span></div><div class="line">    user = <span class="string">'mysql'</span></div><div class="line">    password = <span class="string">'mysql'</span></div><div class="line">    table = <span class="string">'flyway_dev_schema_version'</span></div><div class="line">    locations = [<span class="string">"filesystem:$&#123;projectDir&#125;/src/main/resources/db/migration/mysql"</span>]</div><div class="line">    sqlMigrationPrefix = <span class="string">'MySQL-'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'mysql:mysql-connector-java:5.1.34'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Build repo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew build</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Add-Migration-Scripts"><a href="#Add-Migration-Scripts" class="headerlink" title="Add Migration Scripts"></a>Add Migration Scripts</h4><ul>
<li><p>Create file <a href="https://github.com/aikin/db-migration-flyway/blob/8e9048693674c48adcd236366fb10aa001ed3321/src/main/resources/db.migration.mysql/MySQL-1_1__create_users_table.sql" target="_blank" rel="external">MySQL-1_1__create_users_table.sql</a></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USERS</span> (</div><div class="line">  <span class="keyword">ID</span>         <span class="built_in">BIGINT</span> PRIMARY <span class="keyword">KEY</span>    AUTO_INCREMENT,</div><div class="line">  USERNAME   <span class="built_in">VARCHAR</span>(<span class="number">32</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</div><div class="line">  CREATED_AT <span class="keyword">TIMESTAMP</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>(<span class="number">3</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>Create Mysql Database <code>flyway_dev</code> with user <code>mysql</code> and password <code>mysql</code></p>
</li>
<li><p>Migration</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew flywayMigrate -i</div></pre></td></tr></table></figure>
<p><img src="./database.png" alt="database"></p>
</li>
</ul>
<h4 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h4><p>对于<code>DEV</code>、<code>QA</code>、<code>TEST</code>、<code>STAGE</code>、<code>PROD</code>针对不同的环境，需要会使用不一样的数据库配置。</p>
<ul>
<li><p>在工程目录下创建文件<code>config/dev/db.properties</code>, <code>config/test/db.properties</code>, <code>config/prod/db.properties</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// config/dev/db.properties</div><div class="line">db.url=jdbc:mysql://127.0.0.1:3306/flyway_dev</div><div class="line">db.user=mysql</div><div class="line">db.password=mysql</div><div class="line"></div><div class="line">// config/test/db.properties</div><div class="line">db.url=jdbc:mysql://127.0.0.1:3306/flyway_test</div><div class="line">db.user=mysql</div><div class="line">db.password=mysql</div><div class="line"></div><div class="line">// config/prod/db.properties</div><div class="line">db.url=jdbc:mysql://127.0.0.1:3306/flyway_prod</div><div class="line">db.user=mysql</div><div class="line">db.password=mysql</div></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>build.gradle</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123; url &quot;https://plugins.gradle.org/m2/&quot; &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;gradle.plugin.com.boxfuse.client:flyway-release:4.1.1&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &quot;idea&quot;</div><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &quot;org.flywaydb.flyway&quot;</div><div class="line"></div><div class="line">def properties = new Properties()</div><div class="line">properties.load(project.file(&quot;config/$&#123;env&#125;/db.properties&quot;).newReader())</div><div class="line"></div><div class="line">flyway &#123;</div><div class="line">    driver = &apos;com.mysql.jdbc.Driver&apos;</div><div class="line">    url = properties.get(&apos;db.url&apos;)</div><div class="line">    user = properties.get(&apos;db.user&apos;)</div><div class="line">    password = properties.get(&apos;db.password&apos;)</div><div class="line">    table = &apos;flyway_dev_schema_version&apos;</div><div class="line">    locations = [&quot;filesystem:$&#123;projectDir&#125;/src/main/resources/db/migration/mysql&quot;]</div><div class="line">    sqlMigrationPrefix = &apos;MySQL-&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &apos;mysql:mysql-connector-java:5.1.34&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Create Mysql Database <code>flyway_test</code> with user <code>mysql</code> and password <code>mysql</code></p>
</li>
<li>Migration test env<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew -Penv=test flywayMigrate -i</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p><em>这里只是简单的分享了一下，<code>Gradle</code> 和 <code>Flyway</code> 的集成。<code>Flyway</code> 还有很多功能值得去探索…</em></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr>
<p><a href="https://flywaydb.org/" target="_blank" rel="external">Flyway</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于数据迁移的概念，相信大家已经都比较熟悉。那么，什么是数据迁移？为什么需要数据迁移？在这里就不再做相关分享啦~。接下来主要分享一下数据迁移工具 &lt;a href=&quot;https://github.com/flyway/flyway&quot;&gt;Flyway&lt;/a&gt; 使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="flyway" scheme="http://aikin.github.io/tags/flyway/"/>
    
      <category term="db migration" scheme="http://aikin.github.io/tags/db-migration/"/>
    
  </entry>
  
  <entry>
    <title>Database Schema Migrations</title>
    <link href="http://aikin.github.io/2016/10/23/why-need-database-migration/"/>
    <id>http://aikin.github.io/2016/10/23/why-need-database-migration/</id>
    <published>2016-10-23T12:56:38.000Z</published>
    <updated>2016-12-17T17:39:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于企业和基于 web 的应用程序来说，<code>Migration</code> 就是将一个平台移到另一个平台。<code>Database Migration</code>就是通过<code>migration scripts</code>数据库从一个状态转换到另一个状态，每一个<code>migration script</code>都会对数据库进行修改，修改的内容可能是创建一张新表、更新表的结构、更新表中的数据、删除一张表和创建索引，等等。一般迁移脚本会提供两个“互斥”功能，一个是<code>Up</code>用于升级数据库，一个是<code>Down</code>用于撤销数据库的升级。</p>
<a id="more"></a>
<p>为什么需要<code>Database Migration</code>？数据库是个复杂的应用，具有无数不同的特征，行为，数据类型，以及支持工具和技术。在开发和维护一个数据驱动的应用程序时，数据库的<code>schema</code>会发生改变，特别是在一个不断开发的项目中，随着需求的变化，数据库的<code>schema</code>也会跟着变化，而追踪记录这些变化一向都是费成本的问题。</p>
<p>大部分项目都会有多个的环境（test, stage, prod），那么保证这些环境下的数据库的一致性的难度会成倍增加。比如，在开发应用的程序的过程中，创建一张新表、同时建立索引，那也就意味着，这些操作也需要在其它的每一个环境（test，stage，prod）发生，当然也包括团队其他成员的本地环境，这样才能保证数据库的一致性， 这个过程将面临很大的挑战。 为了让整个流程更加简单方便安全，可以给数据库加上版本控制功能，也就是数据库迁移功能，这样可以让团队在修改数据库结构或内容的同时，可以保持彼此本地环境数据库版本的一致性。</p>
<p><strong><em>数据库迁移的工具：</em></strong></p>
<ul>
<li><p><a href="https://flywaydb.org/" target="_blank" rel="external">Flyway</a> <code>Java</code></p>
</li>
<li><p><a href="http://www.mybatis.org/migrations/" target="_blank" rel="external">MyBatis Migrations</a> <code>Java</code></p>
</li>
<li><p><a href="http://docs.sequelizejs.com/en/latest/docs/migrations/" target="_blank" rel="external">Sequelize</a> <code>Node.js</code></p>
</li>
<li><p><a href="http://www.fluentnhibernate.org/" target="_blank" rel="external">Fluent NHibernate</a> <code>C#</code></p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://flywaydb.org/getstarted/why" target="_blank" rel="external">Flyway</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于企业和基于 web 的应用程序来说，&lt;code&gt;Migration&lt;/code&gt; 就是将一个平台移到另一个平台。&lt;code&gt;Database Migration&lt;/code&gt;就是通过&lt;code&gt;migration scripts&lt;/code&gt;数据库从一个状态转换到另一个状态，每一个&lt;code&gt;migration script&lt;/code&gt;都会对数据库进行修改，修改的内容可能是创建一张新表、更新表的结构、更新表中的数据、删除一张表和创建索引，等等。一般迁移脚本会提供两个“互斥”功能，一个是&lt;code&gt;Up&lt;/code&gt;用于升级数据库，一个是&lt;code&gt;Down&lt;/code&gt;用于撤销数据库的升级。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DB" scheme="http://aikin.github.io/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 无聊知识点</title>
    <link href="http://aikin.github.io/2016/10/16/angularjs-one-tips/"/>
    <id>http://aikin.github.io/2016/10/16/angularjs-one-tips/</id>
    <published>2016-10-16T06:41:34.000Z</published>
    <updated>2017-01-06T05:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>  整理以前笔记时，发现几个简单的无聊的<code>AngularJS</code>知识点。</p>
<ul>
<li><strong><em>实现修改 URL， 不刷新页面</em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">`use strict`</span></div><div class="line">angular.module(<span class="string">"App"</span>)</div><div class="line">  .run(<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope, $route, $location, $routeParams</span>) </span>&#123;</div><div class="line"><span class="comment">// 重写 $location.path 实现修改 url, 但不刷新页面。</span></div><div class="line">    <span class="keyword">var</span> original = $location.path;</div><div class="line">    $location.path = <span class="function"><span class="keyword">function</span> (<span class="params">path, reload</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (reload === <span class="literal">false</span>) &#123;</div><div class="line">        <span class="keyword">var</span> lastRoute = $route.current;</div><div class="line">        <span class="keyword">var</span> un = $rootScope.$on(<span class="string">'$locationChangeSuccess'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          $route.current = lastRoute;</div><div class="line">          un();</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> original.apply($location, [path]);</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><strong><em>统计 <code>angularJS</code> 的 <code>watchers</code></em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> root = $(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>));</div><div class="line">  <span class="keyword">var</span> watchers = [];</div><div class="line">  <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (element.data().hasOwnProperty(<span class="string">'$scope'</span>)) &#123;</div><div class="line">      angular.forEach(element.data().$scope.$$watchers, <span class="function"><span class="keyword">function</span> (<span class="params">watcher</span>) </span>&#123;</div><div class="line">        watchers.push(watcher);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    angular.forEach(element.children(), <span class="function"><span class="keyword">function</span> (<span class="params">childElement</span>) </span>&#123;</div><div class="line">      f($(childElement));</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  f(root);</div><div class="line">  <span class="built_in">console</span>.log(watchers.length);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>只是想找个地方记录一下。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  整理以前笔记时，发现几个简单的无聊的&lt;code&gt;AngularJS&lt;/code&gt;知识点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;实现修改 URL， 不刷新页面&lt;/em&gt;&lt;/strong&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`use strict`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;App&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .run(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$rootScope, $route, $location, $routeParams&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重写 $location.path 实现修改 url, 但不刷新页面。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; original = $location.path;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $location.path = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;path, reload&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (reload === &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastRoute = $route.current;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; un = $rootScope.$on(&lt;span class=&quot;string&quot;&gt;&#39;$locationChangeSuccess&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          $route.current = lastRoute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          un();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; original.apply($location, [path]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="angularjs" scheme="http://aikin.github.io/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server 单用户模式到多用户模式</title>
    <link href="http://aikin.github.io/2016/10/04/locked-sql-user/"/>
    <id>http://aikin.github.io/2016/10/04/locked-sql-user/</id>
    <published>2016-10-04T08:39:10.000Z</published>
    <updated>2016-11-13T09:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近遇到 SQL Server 数据库的数据从其它库同步导入，同时也无法删除的问题。一开始的直接以为数据库被锁死，执行下面<code>SQL</code>语句查询相关被锁的表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> yourdatabase;</div><div class="line">GO</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> request_session_id <span class="keyword">AS</span> spid,</div><div class="line">       OBJECT_NAME(resource_associated_entity_id) <span class="keyword">AS</span> tableName</div><div class="line"><span class="keyword">FROM</span> sys.dm_tran_locks</div><div class="line"><span class="keyword">WHERE</span> resource_type=<span class="string">'OBJECT'</span>;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>结果并没有发现锁的存在，但是发现数据库设置是单用户模式。将单用户模式修改为多用户模式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> [<span class="keyword">master</span>]</div><div class="line"><span class="keyword">GO</span></div><div class="line"></div><div class="line"><span class="comment">--查询运行的用户</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> master.dbo.sysprocesses</div><div class="line"><span class="keyword">WHERE</span> dbid=db_id(<span class="string">'dbname'</span>)</div><div class="line"></div><div class="line"><span class="comment">--将第一个语句运行后的结果替代 spid</span></div><div class="line"><span class="keyword">Kill</span> spid</div><div class="line"></div><div class="line"><span class="comment">--修改为多用户模式</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> DBNAME <span class="keyword">SET</span> MULTI_USER</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近遇到 SQL Server 数据库的数据从其它库同步导入，同时也无法删除的问题。一开始的直接以为数据库被锁死，执行下面&lt;code&gt;SQL&lt;/code&gt;语句查询相关被锁的表：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;USE&lt;/span&gt; yourdatabase;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GO&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; request_session_id &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; spid,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       OBJECT_NAME(resource_associated_entity_id) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; tableName&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; sys.dm_tran_locks&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; resource_type=&lt;span class=&quot;string&quot;&gt;&#39;OBJECT&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQLServer" scheme="http://aikin.github.io/tags/SQLServer/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 应用和数据库隔离</title>
    <link href="http://aikin.github.io/2016/09/24/dockerize-db-isolation/"/>
    <id>http://aikin.github.io/2016/09/24/dockerize-db-isolation/</id>
    <published>2016-09-24T12:50:46.000Z</published>
    <updated>2016-10-03T17:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇<a href="http://aikin.github.io/2016/09/17/dockerize-database/">容器化开发环境 - 数据库连接和迁移</a>分享了关于如何给容器中的应用创建数据库连接，接下来将分享一下如何将数据库从应用容器中分离出来。</p>
<p>为什么要进行分离？当应用和数据库在同一个容器中运行时，也就意味着，应用和数据库的生命周期捆绑在了一起，应用和数据库的运行就会出现相互干扰现象，应用的异常将有可能导致容器的停止，同时也将导致数据库的关闭。更主要的原因是，很多时候需要多个容器中的应用连接一个数据库，为了保证容器之间的运行相互独立，相互不影响，就有必要将数据库隔离在独立的容器中运行，让数据库和容器独处二人世界，同时保证数据库的生命周期不在受其它应用影响。</p>
<a id="more"></a>
<h3 id="Setup-Codebase"><a href="#Setup-Codebase" class="headerlink" title="Setup Codebase"></a>Setup Codebase</h3><ul>
<li>clone <a href="https://github.com/aikin/hello-dockerize" target="_blank" rel="external"><code>hello-dockerie</code></a> repo<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/aikin/hello-dockerize.git</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Separate-MySQL-Dockerfile"><a href="#Separate-MySQL-Dockerfile" class="headerlink" title="Separate MySQL Dockerfile"></a>Separate MySQL Dockerfile</h3><ul>
<li>在<code>dockerize</code>目录下创建<code>mysql/Dockerfle</code></li>
<li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/mysql/Dockerfile" target="_blank" rel="external"><code>mysql/Dockerfile</code></a>，配置安装<code>MySQL</code>脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu:14.04</div><div class="line"></div><div class="line">RUN apt-get update</div><div class="line"></div><div class="line"># === Install Mysql ===</div><div class="line"></div><div class="line">RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</div><div class="line"></div><div class="line">RUN mkdir /docker-entrypoint-initdb.d</div><div class="line"></div><div class="line">ENV MYSQL_MAJOR 5.7</div><div class="line">ENV MYSQL_VERSION 5.7.11-1ubuntu14.04</div><div class="line"></div><div class="line"># gpg: key 5072E1F5: public key &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; imported</div><div class="line">RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5</div><div class="line"></div><div class="line">RUN echo &quot;deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-$&#123;MYSQL_MAJOR&#125;&quot; &gt; /etc/apt/sources.list.d/mysql.list</div><div class="line"></div><div class="line"># the &quot;/var/lib/mysql&quot; stuff here is because the mysql-server postinst doesn&apos;t have an explicit way to disable the mysql_install_db codepath besides having a database already &quot;configured&quot; (ie, stuff in /var/lib/mysql/mysql)</div><div class="line"># also, we set debconf keys to make APT a little quieter</div><div class="line">RUN &#123; \</div><div class="line">		echo mysql-community-server mysql-community-server/data-dir select &apos;&apos;; \</div><div class="line">		echo mysql-community-server mysql-community-server/root-pass password &apos;&apos;; \</div><div class="line">		echo mysql-community-server mysql-community-server/re-root-pass password &apos;&apos;; \</div><div class="line">		echo mysql-community-server mysql-community-server/remove-test-db select false; \</div><div class="line">	&#125; | debconf-set-selections</div><div class="line"></div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y mysql-server=&quot;$&#123;MYSQL_VERSION&#125;&quot;</div><div class="line">RUN rm -rf /var/lib/apt/lists/*</div><div class="line">RUN rm -rf /var/lib/mysql &amp;&amp; mkdir -p /var/lib/mysql</div><div class="line"></div><div class="line"># comment out a few problematic configuration values</div><div class="line"># don&apos;t reverse lookup hostnames, they are usually another container</div><div class="line">RUN sed -Ei &apos;s/^(bind-address|log)/#&amp;/&apos; /etc/mysql/my.cnf \</div><div class="line">	&amp;&amp; echo &apos;skip-host-cache\nskip-name-resolve&apos; | awk &apos;&#123; print &#125; $1 == &quot;[mysqld]&quot; &amp;&amp; c == 0 &#123; c = 1; system(&quot;cat&quot;) &#125;&apos; /etc/mysql/my.cnf &gt; /tmp/my.cnf \</div><div class="line">	&amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf</div><div class="line"></div><div class="line">VOLUME /var/lib/mysql</div><div class="line"></div><div class="line">COPY docker-entrypoint.sh /usr/local/bin/</div><div class="line">RUN chmod +x /usr/local/bin/docker-entrypoint.sh</div><div class="line">RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat</div><div class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</div><div class="line"></div><div class="line">EXPOSE 3306</div><div class="line">CMD [&quot;mysqld&quot;]</div></pre></td></tr></table></figure>
</li>
<li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/Dockerfile" target="_blank" rel="external">dockerize/Dockerfile</a>，移除安装<code>MySQL</code>的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu:14.04</div><div class="line"></div><div class="line">RUN apt-get update</div><div class="line"></div><div class="line"></div><div class="line">ENV VERSION 8</div><div class="line">ENV UPDATE 66</div><div class="line">ENV BUILD 17</div><div class="line"></div><div class="line">ENV JAVA_HOME /usr/lib/jvm/java-$&#123;VERSION&#125;-oracle</div><div class="line">ENV JRE_HOME $&#123;JAVA_HOME&#125;/jre</div><div class="line"></div><div class="line"></div><div class="line">RUN apt-get install ca-certificates curl \</div><div class="line">        gcc libc6-dev libssl-dev make \</div><div class="line">        -y --no-install-recommends</div><div class="line"></div><div class="line">RUN	curl --silent --location --retry 3 --cacert /etc/ssl/certs/GeoTrust_Global_CA.pem \</div><div class="line">	--header &quot;Cookie: oraclelicense=accept-securebackup-cookie;&quot; \</div><div class="line">	http://download.oracle.com/otn-pub/java/jdk/&quot;$&#123;VERSION&#125;&quot;u&quot;$&#123;UPDATE&#125;&quot;-b&quot;$&#123;BUILD&#125;&quot;/server-jre-&quot;$&#123;VERSION&#125;&quot;u&quot;$&#123;UPDATE&#125;&quot;-linux-x64.tar.gz \</div><div class="line">	| tar xz -C /tmp</div><div class="line"></div><div class="line">RUN	mkdir -p /usr/lib/jvm &amp;&amp; mv /tmp/jdk1.$&#123;VERSION&#125;.0_$&#123;UPDATE&#125; &quot;$&#123;JAVA_HOME&#125;&quot;</div><div class="line"></div><div class="line">RUN apt-get install -y openssl</div><div class="line"></div><div class="line">RUN apt-get remove --purge --auto-remove -y \</div><div class="line">        gcc \</div><div class="line">        libc6-dev \</div><div class="line">        libssl-dev \</div><div class="line">        make</div><div class="line"></div><div class="line">RUN	apt-get autoclean &amp;&amp; apt-get --purge -y autoremove</div><div class="line"></div><div class="line">RUN	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</div><div class="line"></div><div class="line">RUN update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;$&#123;JRE_HOME&#125;/bin/java&quot; 1 &amp;&amp; \</div><div class="line">	update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;$&#123;JAVA_HOME&#125;/bin/javac&quot; 1 &amp;&amp; \</div><div class="line">	update-alternatives --set java &quot;$&#123;JRE_HOME&#125;/bin/java&quot; &amp;&amp; \</div><div class="line">	update-alternatives --set javac &quot;$&#123;JAVA_HOME&#125;/bin/javac&quot;</div><div class="line"></div><div class="line">WORKDIR /hello-dockerize</div><div class="line"></div><div class="line">EXPOSE 8080</div><div class="line">EXPOSE 5005</div><div class="line">CMD [&quot;bash&quot;]</div></pre></td></tr></table></figure>
</li>
<li><p>将<code>dockerize/docker-entrypoint.sh</code>移动到<code>dockerize/mysql</code>目录下</p>
</li>
</ul>
<h3 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h3><ul>
<li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/docker-compose.yml" target="_blank" rel="external"><code>docker-compose.yml</code></a>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">web:</div><div class="line">  build: ./dockerize</div><div class="line">  environment:</div><div class="line">    - LANG=C.UTF-8</div><div class="line">    - TERM=xterm</div><div class="line">    - DEBUG=true</div><div class="line">  links:</div><div class="line">      - mysql:mysql</div><div class="line">  ports:</div><div class="line">    - &quot;8080:8080&quot;</div><div class="line">    - &quot;5005:5005&quot;</div><div class="line">  volumes:</div><div class="line">    - .:/hello-dockerize</div><div class="line"></div><div class="line">mysql:</div><div class="line">  build: ./dockerize/mysql</div><div class="line">  env_file: ./dockerize/dev.env</div><div class="line">  ports:</div><div class="line">    - &quot;3306:3306&quot;</div><div class="line">  volumes:</div><div class="line">    - /var/lib/mysql:/var/lib/mysql</div></pre></td></tr></table></figure>
</li>
<li><p>启动容器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-compose up</div></pre></td></tr></table></figure>
</li>
<li><p>查看容器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ docker-compse ps</div><div class="line"></div><div class="line"><span class="comment">######</span></div><div class="line">Name                       Command             State                       Ports</div><div class="line">---------------------------------------------------------------------------------------------------------------</div><div class="line">hellodockerize_mysql_1     docker-entrypoint.sh mysqld   Up      0.0.0.0:3306-&gt;3306/tcp</div><div class="line">hellodockerize_web_run_1   bash                          Up      0.0.0.0:5005-&gt;5005/tcp, 0.0.0.0:8080-&gt;8080/tcp</div><div class="line"><span class="comment">######</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行 migrate 命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@6485a7a48988:/hello-dockerize# ./gradlew flywayClean flywayInit flywayMigrate</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Check-Migrate-Result-On-Intellij-IDEA"><a href="#Check-Migrate-Result-On-Intellij-IDEA" class="headerlink" title="Check Migrate Result On Intellij IDEA"></a>Check Migrate Result On Intellij IDEA</h3><ul>
<li>查看 User 表<blockquote>
<p><img src="./user.png" alt="user"></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇&lt;a href=&quot;http://aikin.github.io/2016/09/17/dockerize-database/&quot;&gt;容器化开发环境 - 数据库连接和迁移&lt;/a&gt;分享了关于如何给容器中的应用创建数据库连接，接下来将分享一下如何将数据库从应用容器中分离出来。&lt;/p&gt;
&lt;p&gt;为什么要进行分离？当应用和数据库在同一个容器中运行时，也就意味着，应用和数据库的生命周期捆绑在了一起，应用和数据库的运行就会出现相互干扰现象，应用的异常将有可能导致容器的停止，同时也将导致数据库的关闭。更主要的原因是，很多时候需要多个容器中的应用连接一个数据库，为了保证容器之间的运行相互独立，相互不影响，就有必要将数据库隔离在独立的容器中运行，让数据库和容器独处二人世界，同时保证数据库的生命周期不在受其它应用影响。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://aikin.github.io/tags/docker/"/>
    
      <category term="dockerize" scheme="http://aikin.github.io/tags/dockerize/"/>
    
      <category term="db" scheme="http://aikin.github.io/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 数据库连接和迁移</title>
    <link href="http://aikin.github.io/2016/09/17/dockerize-database/"/>
    <id>http://aikin.github.io/2016/09/17/dockerize-database/</id>
    <published>2016-09-17T08:50:29.000Z</published>
    <updated>2016-10-03T17:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://aikin.me/2016/07/20/dockerize-dev-env/" target="_blank" rel="external">容器化开发环境</a>中分享了如何容器化本地的开发环境。对于一个<code>Web</code>应用，数据库似乎是必不可少的东西。下面会通过例子来介绍一下如何<code>Setup</code>一个容器中的数据库。例子将会使用的技术栈：</p>
<ul>
<li><a href="https://www.mysql.com/" target="_blank" rel="external">MySQL</a></li>
<li><a href="https://flywaydb.org/" target="_blank" rel="external">Flyway</a></li>
<li>…</li>
</ul>
<a id="more"></a>
<h3 id="Setup-Codebase"><a href="#Setup-Codebase" class="headerlink" title="Setup Codebase"></a>Setup Codebase</h3><ul>
<li>clone <a href="https://github.com/aikin/hello-dockerize.git" target="_blank" rel="external">hello-dockerize</a> repo<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/aikin/hello-dockerize.git</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Install-MySQL-On-Docker-Image"><a href="#Install-MySQL-On-Docker-Image" class="headerlink" title="Install MySQL On Docker Image"></a>Install MySQL On Docker Image</h3><ul>
<li>在<code>dockerize</code>目录下新建文件<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/docker-entrypoint.sh" target="_blank" rel="external">docker-entrypoint.sh</a>，用于控制<code>MySQL</code>数据库的启动。</li>
<li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/Dockerfile" target="_blank" rel="external">Dockerfile</a>，添加安装<code>MySQL</code>的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># === Install Mysql ===</span></div><div class="line">RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</div><div class="line"></div><div class="line">RUN mkdir /docker-entrypoint-initdb.d</div><div class="line"></div><div class="line">ENV MYSQL_MAJOR 5.7</div><div class="line">ENV MYSQL_VERSION 5.7.11-1ubuntu14.04</div><div class="line"></div><div class="line"><span class="comment"># gpg: key 5072E1F5: public key "MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;" imported</span></div><div class="line">RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5</div><div class="line"></div><div class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-<span class="variable">$&#123;MYSQL_MAJOR&#125;</span>"</span> &gt; /etc/apt/sources.list.d/mysql.list</div><div class="line"></div><div class="line"><span class="comment"># the "/var/lib/mysql" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already "configured" (ie, stuff in /var/lib/mysql/mysql)</span></div><div class="line"><span class="comment"># also, we set debconf keys to make APT a little quieter</span></div><div class="line">RUN &#123; \</div><div class="line">		<span class="built_in">echo</span> mysql-community-server mysql-community-server/data-dir select <span class="string">''</span>; \</div><div class="line">		<span class="built_in">echo</span> mysql-community-server mysql-community-server/root-pass password <span class="string">''</span>; \</div><div class="line">		<span class="built_in">echo</span> mysql-community-server mysql-community-server/re-root-pass password <span class="string">''</span>; \</div><div class="line">		<span class="built_in">echo</span> mysql-community-server mysql-community-server/remove-test-db select <span class="literal">false</span>; \</div><div class="line">	&#125; | debconf-set-selections</div><div class="line"></div><div class="line">RUN apt-get update</div><div class="line">RUN apt-get install -y mysql-server=<span class="string">"<span class="variable">$&#123;MYSQL_VERSION&#125;</span>"</span></div><div class="line">RUN rm -rf /var/lib/apt/lists/*</div><div class="line">RUN rm -rf /var/lib/mysql &amp;&amp; mkdir -p /var/lib/mysql</div><div class="line"></div><div class="line"><span class="comment"># comment out a few problematic configuration values</span></div><div class="line"><span class="comment"># don't reverse lookup hostnames, they are usually another container</span></div><div class="line">RUN sed -Ei <span class="string">'s/^(bind-address|log)/#&amp;/'</span> /etc/mysql/my.cnf \</div><div class="line">	&amp;&amp; <span class="built_in">echo</span> <span class="string">'skip-host-cache\nskip-name-resolve'</span> | awk <span class="string">'&#123; print &#125; $1 == "[mysqld]" &amp;&amp; c == 0 &#123; c = 1; system("cat") &#125;'</span> /etc/mysql/my.cnf &gt; /tmp/my.cnf \</div><div class="line">	&amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf</div><div class="line"></div><div class="line">VOLUME /var/lib/mysql</div><div class="line"></div><div class="line">COPY docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</div><div class="line">RUN chmod +x /usr/<span class="built_in">local</span>/bin/docker-entrypoint.sh</div><div class="line">RUN ln <span class="_">-s</span> usr/<span class="built_in">local</span>/bin/docker-entrypoint.sh /entrypoint.sh <span class="comment"># backwards compat</span></div><div class="line">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>]</div><div class="line"></div><div class="line">EXPOSE 3306</div><div class="line">CMD [<span class="string">"mysqld"</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>新建文件<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/dev.env" target="_blank" rel="external">dev.env</a>，用于配置数据库账号和密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MYSQL_USER=mysql</div><div class="line">MYSQL_PASSWORD=mysql</div><div class="line">MYSQL_DATABASE=hello_dockerize</div><div class="line">MYSQL_ROOT_PASSWORD=12345678</div></pre></td></tr></table></figure>
</li>
<li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/docker-compose.yml" target="_blank" rel="external">docker-compose.yml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">web:</div><div class="line">  build: ./dockerize</div><div class="line">  env_file: ./dockerize/dev.env</div><div class="line">  environment:</div><div class="line">    - LANG=C.UTF-8</div><div class="line">    - TERM=xterm</div><div class="line">    - DEBUG=true</div><div class="line">  ports:</div><div class="line">    - &quot;8080:8080&quot;</div><div class="line">    - &quot;3306:3306&quot;</div><div class="line">    - &quot;5005:5005&quot;</div><div class="line">  volumes:</div><div class="line">    - .:/hello-dockerize</div><div class="line">    - /var/lib/mysql:/var/lib/mysql</div></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-compose run --service-ports web</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Use-Database-Migrations-Flyway"><a href="#Use-Database-Migrations-Flyway" class="headerlink" title="Use Database Migrations Flyway"></a>Use Database Migrations Flyway</h3><ul>
<li><p>新建文件<a href="https://github.com/aikin/hello-dockerize/blob/master/db.mysql.gradle" target="_blank" rel="external">db.mysql.gradle</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">flyway &#123;</div><div class="line">    driver = &apos;com.mysql.jdbc.Driver&apos;</div><div class="line">    url = &quot;jdbc:mysql://dockerhost:3306/hello_dockerize&quot;</div><div class="line">    user = &apos;mysql&apos;</div><div class="line">    password = &apos;mysql&apos;</div><div class="line">    table = &apos;hello_dockerize_schema_version&apos;</div><div class="line">    initOnMigrate = true</div><div class="line">    locations = [&quot;filesystem:$&#123;projectDir&#125;/src/main/resources/db/migration/mysql&quot;]</div><div class="line">    sqlMigrationPrefix = &apos;MySQL-&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &apos;mysql:mysql-connector-java:5.1.34&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改<a href="https://github.com/aikin/hello-dockerize/blob/master/build.gradle" target="_blank" rel="external">build.gradle</a>文件，添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125;</div><div class="line">        maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE&quot;)</div><div class="line">        classpath &quot;org.flywaydb:flyway-gradle-plugin:3.0&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">apply plugin: &apos;flyway&apos;</div><div class="line">apply from: &quot;db.mysql.gradle&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>新建目录 <code>src/main/resources/db/migration/mysql</code>，添加 migration sql 脚本<code>MySQL-1_1__create_user.sql</code>：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">User</span> (</div><div class="line">	<span class="keyword">ID</span>          <span class="built_in">BIGINT</span> PRIMARY <span class="keyword">KEY</span>   AUTO_INCREMENT,</div><div class="line">	FIRST_NAME  <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">	LAST_NAME   <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">User</span> (FIRST_NAME, LAST_NAME) <span class="keyword">values</span> (<span class="string">'Laijin'</span>, <span class="string">'Lu'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>执行 migrate 命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew flywayClean flywayInit flywayMigrate</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Check-Migrate-Result-On-Intellij-IDEA"><a href="#Check-Migrate-Result-On-Intellij-IDEA" class="headerlink" title="Check Migrate Result On Intellij IDEA"></a>Check Migrate Result On Intellij IDEA</h3><ul>
<li><p>安装 Intellij IDEA plugin <code>Database Navigator</code>，配置<code>connections</code>：</p>
<blockquote>
<p><img src="./database-connections.png" alt="connections"></p>
</blockquote>
</li>
<li><p>查看<code>User</code>表数据</p>
<blockquote>
<p><img src="./user-table.png" alt="user table"><br><img src="./user-data.png" alt="user data"></p>
</blockquote>
</li>
</ul>
<p>　<strong><em> 结束了吗？并没有，如何将应用和数据库分离成两个独立的容器。 </em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://aikin.me/2016/07/20/dockerize-dev-env/&quot;&gt;容器化开发环境&lt;/a&gt;中分享了如何容器化本地的开发环境。对于一个&lt;code&gt;Web&lt;/code&gt;应用，数据库似乎是必不可少的东西。下面会通过例子来介绍一下如何&lt;code&gt;Setup&lt;/code&gt;一个容器中的数据库。例子将会使用的技术栈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flywaydb.org/&quot;&gt;Flyway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="dockerize" scheme="http://aikin.github.io/tags/dockerize/"/>
    
      <category term="mysql" scheme="http://aikin.github.io/tags/mysql/"/>
    
      <category term="docker mysql" scheme="http://aikin.github.io/tags/docker-mysql/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 操作系统虚拟化</title>
    <link href="http://aikin.github.io/2016/09/11/docker/"/>
    <id>http://aikin.github.io/2016/09/11/docker/</id>
    <published>2016-09-11T07:19:15.000Z</published>
    <updated>2016-10-03T17:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.docker.com/" target="_blank" rel="external">Docker</a> 是操作系统级别的轻量级虚拟化技术，也就是实现轻量级的操作系统虚拟化。它能够让应用的分发、部署和管理都变得前所未有的高效和轻松。同时它也是一个用 go 语言实现的开源项目，源代码在 github 上。那么什么是虚拟化？什么又是操作系统虚拟化？</p>
<a id="more"></a>
<blockquote>
<ul>
<li>虚拟化，是指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。<br>物理机，是相对于虚拟机而言的对实体计算机的称呼。物理机提供给虚拟机以硬件环境，有时也称为“寄主”或“宿主”。通过物理机和虚拟机的配合，一台计算机上可以安装上多个操作系统（一个外界操作系统和虚拟机中的数个操作系统），并且几个操作系统间还可以实现通信，就像是有多台计算机一样。</li>
<li>操作系统级虚拟化: 在传统操作系统中，所有用户的进程本质上是在同一个操作系统的实例中运行，因此内核或应用程序的缺陷可能影响到其它进程也可能受其它进程的影响。它是一种在服务器操作系统中使用的轻量级的虚拟化技术，内核通过创建多个虚拟的操作系统实例（内核和库）来隔离不同的进程，不同实例中的进程完全不了解对方的存在。它并不在物理系统里创建多个虚拟机环境，而是让一个操作系统创建多个彼此独立的应用环境，这些应用环境都访问同一个内核。<br><img src="./os-virtualization.jpg" alt="os-virtualization"></li>
</ul>
</blockquote>
<h3 id="Containers-VS-VMs"><a href="#Containers-VS-VMs" class="headerlink" title="Containers VS VMs"></a><code>Containers</code> VS <code>VMs</code></h3><p>Docker Container 和 普通的虚拟机 Image 相比, 最大的区别是它并不包含操作系统内核。</p>
<h5 id="传统的虚拟化技术-VM"><a href="#传统的虚拟化技术-VM" class="headerlink" title="传统的虚拟化技术(VM)"></a><strong><em>传统的虚拟化技术(VM)</em></strong></h5><blockquote>
<p><img style="margin: auto;" src="vm.jpg"><br>传统的虚拟化技术(VM)的 <code>Hypervisor</code> 需要实现对硬件的虚拟化，并且还要搭载自己的操作系统，自然在启动速度和资源利用率以及性能上有比较大的开销。普通虚拟机将整个操作系统运行在虚拟的硬件平台上, 进而提供完整的运行环境供应用程序运行。<br>VM 是一个运行在宿主机之上的完整的操作系统，包含了大量类似硬件驱动、虚拟处理器、网络接口等等并不需要的信息。VM运行自身操作系统会占用较多的CPU、内存、硬盘资源。</p>
</blockquote>
<h5 id="容器虚拟化技术-Docker"><a href="#容器虚拟化技术-Docker" class="headerlink" title="容器虚拟化技术(Docker)"></a><strong><em>容器虚拟化技术(Docker)</em></strong></h5><blockquote>
<p><img style="margin: auto;" src="docker.jpg"><br><code>Docker</code> 几乎就没有什么虚拟化的东西，并且直接复用了 Host 主机的 OS，在 Docker Engine 层面实现了调度和隔离重量一下子就降低了好几个档次。 Docker 的容器利用了 <code>LXC</code>，管理利用了 <code>namespaces</code> 来做权限的控制和隔离， <code>cgroups</code> 来进行资源的配置，并且还通过 <code>aufs</code> 来进一步提高文件系统的资源利用率。<br><code>Docker Container</code> 来说启动和销毁都是秒级的，而且它底层依赖的技术<code>lxc(linux container)</code>完全是内核特性，没有任何中间层开销，对于资源的利用率极高性能接近物理机。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.infoq.com/cn/articles/docker-core-technology-preview" target="_blank" rel="external">Docker核心技术预览</a><br><a href="http://book.51cto.com/art/201301/377685.htm" target="_blank" rel="external">CPU虚拟化</a><br><a href="https://www.docker.com/what-docker" target="_blank" rel="external">what docker</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; 是操作系统级别的轻量级虚拟化技术，也就是实现轻量级的操作系统虚拟化。它能够让应用的分发、部署和管理都变得前所未有的高效和轻松。同时它也是一个用 go 语言实现的开源项目，源代码在 github 上。那么什么是虚拟化？什么又是操作系统虚拟化？&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://aikin.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境 - 如何断点调试容器中的应用</title>
    <link href="http://aikin.github.io/2016/08/28/how-to-debug-app-in-dockerize-dev-env/"/>
    <id>http://aikin.github.io/2016/08/28/how-to-debug-app-in-dockerize-dev-env/</id>
    <published>2016-08-28T15:36:46.000Z</published>
    <updated>2016-10-03T17:27:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇<a href="http://aikin.me/2016/07/20/dockerize-dev-env/#more" target="_blank" rel="external">容器化开发环境</a>已经简单的介绍了如何容器化开发环境。在开发过程中，很多时候都需要通过<code>断点的方式</code>来调试程序或定位<code>BUG</code>，那么如何断点调试运行在容器中的应用呢？？？</p>
<p>容器就像一个虚拟机，就像一个远程的服务器，要断点调试容器中的应用，就像要断点调试虚拟机和远程的服务器上的应用一样。如何配置一个可以远程断点调试的应用，每个语言，每个框架都有不同的方式，接下来介绍的例子使用的技术栈如下：</p>
<a id="more"></a>
<ul>
<li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a></li>
<li><a href="https://gradle.org/" target="_blank" rel="external">Gradle</a></li>
<li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA</a></li>
</ul>
<h4 id="接下来会基于上一篇博客中的DEMO-hello-dockerize-进行扩展。"><a href="#接下来会基于上一篇博客中的DEMO-hello-dockerize-进行扩展。" class="headerlink" title="接下来会基于上一篇博客中的DEMO hello-dockerize 进行扩展。"></a>接下来会基于上一篇博客中的<code>DEMO</code> <a href="https://github.com/aikin/hello-dockerize" target="_blank" rel="external">hello-dockerize</a> 进行扩展。</h4><hr>
<ul>
<li><p><strong>clone code repo</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/aikin/hello-dockerize.git</div></pre></td></tr></table></figure>
</li>
<li><p><strong>更新<code>build.gradle</code>文件，在文件中写入<code>apply plugin: &quot;application&quot;</code> 和</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  remote debug setup</div><div class="line"> */</div><div class="line">applicationDefaultJvmArgs = [</div><div class="line">        <span class="string">"-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"</span></div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p><strong>更新<code>docker-compose.yml</code>文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">web:</div><div class="line">  build: ./dockerize</div><div class="line">  environment:</div><div class="line">    - LANG=C.UTF-8</div><div class="line">    - TERM=xterm</div><div class="line">    - DEBUG=true</div><div class="line">  ports:</div><div class="line">    - &quot;8080:8080&quot;</div><div class="line">    - &quot;5005:5005&quot;</div><div class="line">  volumes:</div><div class="line">    - .:/hello-dockerize</div></pre></td></tr></table></figure>
</li>
<li><p><strong>启动容器</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-compose run --service-ports web</div></pre></td></tr></table></figure>
</li>
<li><p><strong>配置 IntelliJ IDEA</strong></p>
<ul>
<li>打开工具栏<code>Run</code> –&gt; <code>Edit Configurations</code><blockquote>
<p><img src="./open.png" alt="config"></p>
</blockquote>
</li>
<li>添加新配置 点击加号，选择<code>Remote</code>，将 Host <code>localhost</code> 修改为<code>docker-machine ip machine-name</code>获取的<code>IP</code>，在<code>/etc/hosts</code>文件中绑定的本地域名<code>dockerhost</code><blockquote>
<p><img src="./add.png" alt="add"></p>
</blockquote>
</li>
</ul>
<ul>
<li><p><strong>在容器中启动服务：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@b73c06ebe59f:/hello-dockerize<span class="comment"># ./gradlew bootRun --debug-jvm --stacktrace</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>启动 IntelliJ IDEA 的 debugger 模式</strong></p>
<ul>
<li>点击<code>debug</code>按钮<blockquote>
<p><img src="./debugger.png" alt="debugger"></p>
</blockquote>
</li>
<li>打开浏览器访问<code>http://dockerhost:8080/hello-dockerize</code>，如果你也看到下面的画面，恭喜你成功啦。<blockquote>
<p><img src="./debugging.png" alt="debugging">　　</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>　　<br><strong><em>学会断点调试容器中的应用，再也不用为我那乌黑亮丽的头发着急啦！！！</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇&lt;a href=&quot;http://aikin.me/2016/07/20/dockerize-dev-env/#more&quot;&gt;容器化开发环境&lt;/a&gt;已经简单的介绍了如何容器化开发环境。在开发过程中，很多时候都需要通过&lt;code&gt;断点的方式&lt;/code&gt;来调试程序或定位&lt;code&gt;BUG&lt;/code&gt;，那么如何断点调试运行在容器中的应用呢？？？&lt;/p&gt;
&lt;p&gt;容器就像一个虚拟机，就像一个远程的服务器，要断点调试容器中的应用，就像要断点调试虚拟机和远程的服务器上的应用一样。如何配置一个可以远程断点调试的应用，每个语言，每个框架都有不同的方式，接下来介绍的例子使用的技术栈如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="dockerize" scheme="http://aikin.github.io/tags/dockerize/"/>
    
      <category term="debugger" scheme="http://aikin.github.io/tags/debugger/"/>
    
      <category term="break point" scheme="http://aikin.github.io/tags/break-point/"/>
    
  </entry>
  
  <entry>
    <title>容器化开发环境</title>
    <link href="http://aikin.github.io/2016/07/20/dockerize-dev-env/"/>
    <id>http://aikin.github.io/2016/07/20/dockerize-dev-env/</id>
    <published>2016-07-19T18:12:44.000Z</published>
    <updated>2017-06-19T16:54:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>有没有过项目之间各种<code>Java</code>版本开发环境切换的场景；有没有过<code>github</code>上<code>clone</code>回来的代码库，由于各种开发环境依赖无法运行的问题；有没有过进入一个新项目时各种配开发环境到深夜的经历…<code>Come On!</code>为什么会这样，一切都是开发环境问题。为了不让别人痛苦，更不想让自己痛苦，请容器化开发环境吧，让我们享受一键部署开发环境的痛快吧。</p>
<p>用什么容器化呢？当然是<code>Docker</code>啦，轻量级又好用，又流行，最关键点是本人仅<code>Docker</code>比较熟悉，所以就拿它来搞起啦。</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><hr>
<p><strong>接下的例子依赖的<code>Docker</code>环境和<code>MAC</code>，请移步 <a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">Install Docker Engine</a> 自行安装。</strong></p>
<ul>
<li>docker-machine</li>
<li>docker-compose</li>
<li>…</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(dockerize) Unable to get the latest Boot2Docker ISO release version:  Error getting a version tag from the Github API response.</div><div class="line">(dockerize) You may be getting rate limited by Github.</div><div class="line"></div><div class="line">// 如果在安装过程遇到上述类似的问题，可以尝试方式解决：</div><div class="line"></div><div class="line">通过浏览器下载 boot2docker 镜像 https://github.com/boot2docker/boot2docker/releases/download/v1.10.3/boot2docker.iso</div><div class="line">将镜像移动到 ~/.docker/machine/cache/ 目录下</div></pre></td></tr></table></figure>
<h2 id="Setup-Hello-Dockerize"><a href="#Setup-Hello-Dockerize" class="headerlink" title="Setup Hello Dockerize"></a>Setup Hello Dockerize</h2><hr>
<p><strong>使用<code>Gradle</code>初始化一个  <a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">spring-boot</a> DEMO，<a href="https://github.com/aikin/hello-dockerize/blob/master/build.gradle" target="_blank" rel="external">build.gradle</a> 文件如下: </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">group <span class="string">"com.xxx.hello.dockerize"</span></div><div class="line">version <span class="string">"1.0.0"</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123; url <span class="string">"http://repo.spring.io/snapshot"</span> &#125;</div><div class="line">        maven &#123; url <span class="string">"http://repo.spring.io/milestone"</span> &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">"idea"</span></div><div class="line">apply plugin: <span class="string">"java"</span></div><div class="line">apply plugin: <span class="string">"spring-boot"</span></div><div class="line"></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">    maven &#123; url <span class="string">"http://repo.spring.io/snapshot"</span> &#125;</div><div class="line">    maven &#123; url <span class="string">"http://repo.spring.io/milestone"</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ext &#123;</div><div class="line">    junitVersion = <span class="string">"4.11"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"></div><div class="line">    compile <span class="string">"org.springframework.boot:spring-boot-starter-jersey"</span></div><div class="line"></div><div class="line">    testCompile <span class="string">"junit:junit:$junitVersion"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 实现<code>hello-dockerize</code>的API，创建以下文件：</strong></p>
<blockquote>
<p><a href="https://github.com/aikin/hello-dockerize/blob/master/src/main/java/com/ulaijn/hello/dockerize/Application.java" target="_blank" rel="external">Application.java</a><br><a href="https://github.com/aikin/hello-dockerize/blob/master/src/main/java/com/ulaijn/hello/dockerize/config/JerseyConfig.java" target="_blank" rel="external">JerseyConfig.java</a><br><a href="https://github.com/aikin/hello-dockerize/tree/master/src/main/java/com/ulaijn/hello/dockerize/resources" target="_blank" rel="external">HelloDockerizeResource.java</a></p>
</blockquote>
<h2 id="Dockerize"><a href="#Dockerize" class="headerlink" title="Dockerize"></a>Dockerize</h2><hr>
<p><strong>为可以让 DEMO 可以运行容器中，需要一个<a href="https://github.com/aikin/hello-dockerize/blob/master/dockerize/Dockerfile" target="_blank" rel="external">Dockerfile</a>来配置 DEMO 在容器中能正常运行的环境：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu:14.04</div><div class="line">RUN apt-get update</div><div class="line"></div><div class="line">ENV VERSION 8</div><div class="line">ENV UPDATE 66</div><div class="line">ENV BUILD 17</div><div class="line">ENV JAVA_HOME /usr/lib/jvm/java-$&#123;VERSION&#125;-oracle</div><div class="line">ENV JRE_HOME $&#123;JAVA_HOME&#125;/jre</div><div class="line"></div><div class="line">RUN apt-get install ca-certificates curl \</div><div class="line">        gcc libc6-dev libssl-dev make \</div><div class="line">        -y --no-install-recommends</div><div class="line"></div><div class="line">RUN	curl --silent --location --retry 3 --cacert /etc/ssl/certs/GeoTrust_Global_CA.pem \</div><div class="line">	--header &quot;Cookie: oraclelicense=accept-securebackup-cookie;&quot; \</div><div class="line">	http://download.oracle.com/otn-pub/java/jdk/&quot;$&#123;VERSION&#125;&quot;u&quot;$&#123;UPDATE&#125;&quot;-b&quot;$&#123;BUILD&#125;&quot;/server-jre-&quot;$&#123;VERSION&#125;&quot;u&quot;$&#123;UPDATE&#125;&quot;-linux-x64.tar.gz \</div><div class="line">	| tar xz -C /tmp</div><div class="line"></div><div class="line">RUN	mkdir -p /usr/lib/jvm &amp;&amp; mv /tmp/jdk1.$&#123;VERSION&#125;.0_$&#123;UPDATE&#125; &quot;$&#123;JAVA_HOME&#125;&quot;</div><div class="line"></div><div class="line">RUN apt-get install -y openssl</div><div class="line"></div><div class="line">RUN apt-get remove --purge --auto-remove -y \</div><div class="line">        gcc \</div><div class="line">        libc6-dev \</div><div class="line">        libssl-dev \</div><div class="line">        make</div><div class="line"></div><div class="line">RUN	apt-get autoclean &amp;&amp; apt-get --purge -y autoremove</div><div class="line"></div><div class="line">RUN	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</div><div class="line"></div><div class="line">RUN update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;$&#123;JRE_HOME&#125;/bin/java&quot; 1 &amp;&amp; \</div><div class="line">	update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;$&#123;JAVA_HOME&#125;/bin/javac&quot; 1 &amp;&amp; \</div><div class="line">	update-alternatives --set java &quot;$&#123;JRE_HOME&#125;/bin/java&quot; &amp;&amp; \</div><div class="line">	update-alternatives --set javac &quot;$&#123;JAVA_HOME&#125;/bin/javac&quot;</div><div class="line"></div><div class="line">WORKDIR /hello-dockerize</div><div class="line">EXPOSE 8080</div><div class="line">CMD [&quot;bash&quot;]</div></pre></td></tr></table></figure></p>
<p><strong>为了以后可以更好的管理容器的依赖和更新，<a href="https://docs.docker.com/compose/" target="_blank" rel="external">Docker Compose</a>是一个不错的选择。创建配置文件<a href="https://github.com/aikin/hello-dockerize/blob/master/docker-compose.yml" target="_blank" rel="external">docker-compose.yml</a>：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">web:</div><div class="line">  build: ./dockerize</div><div class="line">  environment:</div><div class="line">    - LANG=C.UTF-8</div><div class="line">    - TERM=xterm</div><div class="line">    - DEBUG=true</div><div class="line">  ports:</div><div class="line">    - &quot;8080:8080&quot;</div><div class="line">  volumes:</div><div class="line">    - .:/hello-dockerize</div></pre></td></tr></table></figure></p>
<p><strong>启动容器服务：</strong><br>在 DEMO 目录下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-compose run --service-ports web</div></pre></td></tr></table></figure></p>
<p>上述命令执行成功后，将会进入容器内，显示如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@7b438758ccae:/hello-dockerize<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>在容器中启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@7b438758ccae:/hello-dockerize<span class="comment"># ./gradlew bootRun</span></div></pre></td></tr></table></figure></p>
<p><strong>为了在容器外可以访问容器内部的服务，可以通过<code>docker-machine ip machine-name</code>获取 machine 的 <code>IP</code>，修改<code>/etc/hosts</code>将<code>machine IP</code>绑定上<code>dockerhost</code>的域名，再通过浏览器访问<code>http://dockerhost:8080/hello-dockerize</code>，页面将会出现<code>Hello Dockerize!</code></strong></p>
<p>　　</p>
<blockquote>
<p>DEMO REPO: <a href="https://github.com/aikin/hello-dockerize" target="_blank" rel="external">hello-dockerize</a>，你只需要 clone 到本地，然后执行 <code>docker-compose run --service-ports web</code>， DEMO 开发环境将会快速构建完毕，秒级的体验，不容错过~~~</p>
</blockquote>
<p>　　<br>写在最后： 由于最近打算把写博客的习惯捡回来，才让这篇在草稿箱中沉睡了一年多的<code>Dockerize</code>重返人间，接下继续努力完成<code>如何在容器中使用断点的方式 DEBUG</code>、<code>如何使用 Jenkins 控制测试环境 Docker container 创建和销毁</code>、<code>如何使用 Nginx 控制容器的启动</code>…博文。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有没有过项目之间各种&lt;code&gt;Java&lt;/code&gt;版本开发环境切换的场景；有没有过&lt;code&gt;github&lt;/code&gt;上&lt;code&gt;clone&lt;/code&gt;回来的代码库，由于各种开发环境依赖无法运行的问题；有没有过进入一个新项目时各种配开发环境到深夜的经历…&lt;code&gt;Come On!&lt;/code&gt;为什么会这样，一切都是开发环境问题。为了不让别人痛苦，更不想让自己痛苦，请容器化开发环境吧，让我们享受一键部署开发环境的痛快吧。&lt;/p&gt;
&lt;p&gt;用什么容器化呢？当然是&lt;code&gt;Docker&lt;/code&gt;啦，轻量级又好用，又流行，最关键点是本人仅&lt;code&gt;Docker&lt;/code&gt;比较熟悉，所以就拿它来搞起啦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://aikin.github.io/tags/docker/"/>
    
      <category term="dockerize" scheme="http://aikin.github.io/tags/dockerize/"/>
    
  </entry>
  
  <entry>
    <title>我写过的那几类自动化测试</title>
    <link href="http://aikin.github.io/2015/10/03/auto-test-writed/"/>
    <id>http://aikin.github.io/2015/10/03/auto-test-writed/</id>
    <published>2015-10-03T14:16:25.000Z</published>
    <updated>2016-10-03T17:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是自动化测试？"><a href="#什么是自动化测试？" class="headerlink" title="什么是自动化测试？"></a>什么是自动化测试？</h3><!-- 什么是自动化呢？[顾名思义，就是以机械的动作代替人力操作，自动地完成特定的作业](http://baike.baidu.com/view/16286.htm)。在现代的生活中，很多方面已经使用上这一技术，如：全自动洗衣机、智能红绿灯、智能机器人等。自动化可以带来什么？一定程度上的代替或辅助人的脑力劳动，大大提高了人的工作的效率，生活的质量...... -->
<p>自动化测试是相对于手动化测试存在的，对比于手动测试来说(比如需要测试GUI的时候，测试人员需要用鼠标去手动测试)，自动化测试就是使用程序或脚本来测试相应的功能。 其实就是将一切可以由程序自动完成的测试任务转化为相应的自动化测试框架来自动执行。</p>
<p>实现自动化测试的目的是为了改进软件测试生命周期的效率和有效性，通过重复测试来提高测试效率。同时在我看来自动化测试还可以防止程序出 bug ，可以快速反馈程序功能在预定期望内是否能正常运行，帮助更好的重构代码，提高软件质量。</p>
<a id="more"></a>
<h3 id="那些自动化测试"><a href="#那些自动化测试" class="headerlink" title="那些自动化测试"></a>那些自动化测试</h3><h4 id="单元测试-又称为模块测试-Unit-Testing"><a href="#单元测试-又称为模块测试-Unit-Testing" class="headerlink" title="单元测试 (又称为模块测试, Unit Testing)"></a><strong><em>单元测试 (又称为模块测试, Unit Testing)</em></strong></h4><p>单元测试是指对软件中的最小可测试单元进行检查和验证的方式，然后通过检查和验证的结果来确定最小单元的行为是否与预期的一样。什么是最小可测试单元，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。</p>
<p>在程序中，bug 很多时候都是存在各个独立单元中，而很多时候我们将花费大量的时间在跟踪这些 bug 上。如果有了单元测试，我们将可以快速的定位到 bug 出现的原因，所有说单元测试可以起到预防 bug 和 排除 bug 的作用。对于没有被测试覆盖的代码，没有人能保证它的功能是好的，但是如果有了测试案例测试相应的代码，至少我们可以保证，在这种测试案例下代码功能是能正常运行的。单元测试也是一种文档的记录，因为每个单元测试的描述，都可以反映这个被测单元的功能。</p>
<p>单元测试也属于白盒测试，在编写单个单元测试，需要全面了解这个单元内部的逻辑结构，对所有逻辑的可能性(也就是不同的输入将导致多少种不同输出)进行测试，这个过程需要穷举出所有的逻辑路径，并对所有的逻辑路径进行覆盖测试。所以一般情况下，在系统中单元测试是最多的，因为它要覆盖各个单元内部的逻辑分支，正如测试金字塔显示的，它处于最底层，数量是最多的，为了保证这么多单元测试运行效率，在编写单元测试的时候，<code>不需要访问真实的数据库、不需要访问真实的网络、不需要访问真实的第三方服务...</code>，只关心单元的内部的逻辑，将其它阻碍运行效率的依赖调用，使用<code>stub/mock/fake</code>等模拟技术，模拟单元内部逻辑调用其它依赖的返回。<br><img src="./test-pyramid.jpeg" alt="test-pyramid"></p>
<h4 id="集成测试-Integration-Testing"><a href="#集成测试-Integration-Testing" class="headerlink" title="集成测试 (Integration Testing)"></a><strong><em>集成测试 (Integration Testing)</em></strong></h4><p>集成测试是将程序中的几个模块集成起来测试，通过测试可以验证各个模块之间是否能够正常的协作工作，它能反映模块的接口之间的通信是否正常，而单元测试只是保证了模块中各个单元功能的完整性，有的时候单元测试无法发现的问题，可以通过集成测试发现。</p>
<p>在编写集成测试时，我们需要关注的是接口输出是否能够正确的对应上相应的输入(就是输入经过集成后模块间的处理后是否能输出正确结果)，同时也需要关注模块内部的表现，但是不需要对模块内部功能和运作进行详细的了解，只需要了解模块的接口之间是如何相互作用(协作运行)的，可以说集成测试也属于灰盒测试。</p>
<h4 id="功能测试-Integration-Testing"><a href="#功能测试-Integration-Testing" class="headerlink" title="功能测试 (Integration Testing)"></a><strong><em>功能测试 (Integration Testing)</em></strong></h4><p>功能测试是完成从系统的边界外，不对系统内部做任何假设，就是以用户的方式对系统进行使用测试，来检测系统是否达到用户要求的功能。功能测试也称为黑盒测试，系统就是一个黑盒，在编写功能测试时不考虑系统内部结构和逻辑结构，通过对系统的相应功能的接口进行测试，来检查系统功能是否满足需求卡的功能。功能测试编写和维护都比较困难，而且运行起来的比较慢。测试者选择有效输入和无效输入来验证是否正确的输出。</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.tych.io/tech/2013/07/10/unit-test.html" target="_blank" rel="external">unit test</a><br><a href="https://msdn.microsoft.com/zh-cn/library/aa292197" target="_blank" rel="external">单元测试</a><br><a href="http://www.cnblogs.com/yuyijq/archive/2011/12/14/2287531.html" target="_blank" rel="external">关于自动化测试</a>
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是自动化测试？&quot;&gt;&lt;a href=&quot;#什么是自动化测试？&quot; class=&quot;headerlink&quot; title=&quot;什么是自动化测试？&quot;&gt;&lt;/a&gt;什么是自动化测试？&lt;/h3&gt;&lt;!-- 什么是自动化呢？[顾名思义，就是以机械的动作代替人力操作，自动地完成特定的作业](http://baike.baidu.com/view/16286.htm)。在现代的生活中，很多方面已经使用上这一技术，如：全自动洗衣机、智能红绿灯、智能机器人等。自动化可以带来什么？一定程度上的代替或辅助人的脑力劳动，大大提高了人的工作的效率，生活的质量...... --&gt;
&lt;p&gt;自动化测试是相对于手动化测试存在的，对比于手动测试来说(比如需要测试GUI的时候，测试人员需要用鼠标去手动测试)，自动化测试就是使用程序或脚本来测试相应的功能。 其实就是将一切可以由程序自动完成的测试任务转化为相应的自动化测试框架来自动执行。&lt;/p&gt;
&lt;p&gt;实现自动化测试的目的是为了改进软件测试生命周期的效率和有效性，通过重复测试来提高测试效率。同时在我看来自动化测试还可以防止程序出 bug ，可以快速反馈程序功能在预定期望内是否能正常运行，帮助更好的重构代码，提高软件质量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="automated testing" scheme="http://aikin.github.io/tags/automated-testing/"/>
    
  </entry>
  
  <entry>
    <title>了解 Linux 文件和文件夹的操作权限</title>
    <link href="http://aikin.github.io/2015/04/03/linux-file-permission-ower/"/>
    <id>http://aikin.github.io/2015/04/03/linux-file-permission-ower/</id>
    <published>2015-04-03T03:18:59.000Z</published>
    <updated>2016-10-03T17:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于 linux 是多用户操作系统，所以基于安全的考虑，需要具备保障个人隐私和系统安全的机制。因此在使用 linux 系统的时候，经常会出现权限的问题(比如: 删除文件、安装软件、运行应用等等)，期初遇到这些问题的时候，大部分都使用<code>sudo</code>或者是<code>sudo chmod 777 file</code>(后面会讲解这个命令)来解决的。虽然这种方式可以解决问题，但是这样是不安全的，特别是在服务器上操作的时候，因为不是所有的文件和文件夹都可以被其它用户操作的，不是所有的用户都有<code>root</code>权限的，不是所有的应用都可以用<code>root</code>用户启动的。那么我们要如何正确的处理这些权限问题呢？那就让我们来学习一下 linux 权限相关的知识。</p>
<a id="more"></a>
<h3 id="用户的权限"><a href="#用户的权限" class="headerlink" title="用户的权限"></a>用户的权限</h3><p>要确定一个用户对某个文件或文件夹是否具有相应的操作权限，先要明确该用户与文件或文件夹之间的关系。在 linux 系统中，定义了如下三种关系：</p>
<blockquote>
<ul>
<li><strong> 文件或文件夹的所有者(owner) </strong>: 文件或文件夹的拥有者，开始创建文件或文件夹时为创建者。</li>
<li><strong> 组(group) </strong>: 文件或文件夹所属的组, 开始创建文件或文件夹时为创建者的所属的组。</li>
<li><strong> 其他人(other) </strong>: 除了文件或文件夹的所有者和文件或文件夹所属的组的其他成员，剩下的 linux 的用户。</li>
</ul>
</blockquote>
<p>因为在 linux 下的文件和文件夹都有<code>读取(r)</code>、<code>写入(w)</code>、<code>执行(x)</code>的操作，所以上面描述的每种关系的用户分别都可以赋予这些操作权限。操作权限介绍:</p>
<blockquote>
<table>
<thead>
<tr>
<th>权限</th>
<th>简写</th>
<th>对普通文件的作用</th>
<th>对文件夹的作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>读取</td>
<td>r</td>
<td>查看文件内容</td>
<td>列出文件夹中的文件(ls)</td>
</tr>
<tr>
<td>写入</td>
<td>w</td>
<td>修改文件内容</td>
<td>在文件夹中删除、添加或重命名文件(夹)</td>
</tr>
<tr>
<td>执行</td>
<td>x</td>
<td>文件可以作为程序执行</td>
<td>cd 到文件夹</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="文件或文件夹和用户的三种关系的基础操作权限"><a href="#文件或文件夹和用户的三种关系的基础操作权限" class="headerlink" title="文件或文件夹和用户的三种关系的基础操作权限"></a>文件或文件夹和用户的三种关系的基础操作权限</h3><p>在 linux 使用<code>ls -la</code>命令可以查看文件夹内文件的属性，下面是我电脑上某个文件夹下文件的属性:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ls -la</div><div class="line">drwxr-xr-x 14 root root     4096 Apr  3 18:47 .</div><div class="line">drwxr-xr-x 23 root root     4096 Mar  2 05:48 ..</div><div class="line">drwxr-xr-x  2 root root     4096 Apr  3 07:44 backups</div><div class="line">drwxr-xr-x 17 root root     4096 Jul 22  2014 cache</div><div class="line">drwxr-xr-x  2 root root     4096 Mar  2 04:26 docker-registry</div><div class="line">lrwxrwxrwx  1 root root        9 Feb 25 13:31 lock -&gt; /run/lock</div><div class="line">drwxrwxr-x 15 root syslog   4096 Apr  3 07:44 <span class="built_in">log</span></div><div class="line">-rw-r--r--  1 root root        0 Apr  3 18:47 <span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>上面的有九列数据，第一列数据表示和文件或文件夹相应关系用户的操作权限，第二列表示文件夹内文件和文件夹的总数量(包括文件夹本身)，第三列表示文件夹或文件的拥有者，第四列表示文件或文件夹的所属的组，第五列表示文件或文件夹的大小，第六、七、八列表示文件或文件夹最后被修改的时间，第九列文件或文件夹的名字。</p>
</li>
<li><p>接下主要分析第一列的数据，在上面的信息中倒数第二行<code>drwxrwxr-x</code>，从左到右第一个字母表示文件系统对象的类别，这里<code>d</code>表示为目录(文件夹)。其它文件系统对象:</p>
<blockquote>
<p><code>-</code>(常规文件)、<code>d</code>(目录)、<code>l</code>(符号链接)、<code>c</code>(字符特殊设备)、<code>b</code>(模块特殊设备)、<code>p</code>(FIFO)、<code>s</code>(套接字)</p>
</blockquote>
</li>
<li><p><code>drwxrwxr-x</code>除出去第一个字母<code>d</code>后的<code>rwxrwxr-x</code>表示的是三种用户关系对文件或文件夹的操作权限。从左到右每三个一组，依次表示所有者权限、组权限、其他用户权限。每组的顺序均为<code>rwx</code>，如果用户有相应的操作权限就用相应的字母表示，如果不具有相应的操作权限就用<code>-</code>表示。比如: <code>rwxrwxr-x</code>表示文件或文件夹的所有者具有<code>rwx</code>(可读，可写，可执行)的操作权限，组用户也具有<code>rwx</code>(可读，可写，可执行)的权限，其他用户具有<code>r-x</code>(可读，可执行，没有可读)的操作权限。</p>
</li>
</ul>
<h3 id="特殊权限SUID、SGID、Sticky"><a href="#特殊权限SUID、SGID、Sticky" class="headerlink" title="特殊权限SUID、SGID、Sticky"></a>特殊权限<code>SUID</code>、<code>SGID</code>、<code>Sticky</code></h3><p>在 linux 系统中还有三种与用户身份无关的三个文件权限属性。即<code>SUID、SGID和Sticky</code>。</p>
<ul>
<li><p><strong><em> SUID(Set User ID, 4): </em></strong></p>
<blockquote>
<p>该属性只对有执行权限的文件有效，对目录无效。执行具有<code>SUID</code>权限的程序时，引发的进程的所有者是程序文件的所有者，而不是启动程序的用户（除非二者是同一个人）。比如，如果一个程序的所有者是<code>root</code>且具有<code>SUID</code>属性，一个普通用户执行此程序时，如同<code>root</code>执行此程序一样。（请注意该属性对<code>Shell</code>脚本程序无效）该属性为一些特殊程序（如lpr）的启动带来了方便。但有时也带来了安全隐患：比如一个具有<code>SUID</code>属性的程序如果在执行时运行了一个<code>shell</code>，那么用户可以籍此得到系统的最高权限。<code>SUID</code>可用<code>s</code>表示，如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-l</span> /usr/bin/passwd</div><div class="line">-rwsr-xr-x 1 root root 47032 Feb 16  2014 /usr/bin/passwd</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><strong><em> SGID(Set Group ID, 4): </em></strong></p>
<blockquote>
<p>对于可执行文件，<code>SGID</code>与<code>SUID</code>类似，引发的进程的所有组是程序文件所属的组。对于目录，<code>SGID</code>属性会使目录中新建文件的所属组与该目录相同。<code>SGID</code>也可以用s表示，如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-l</span> /var</div><div class="line">drwxrwsr-x  2 root staff    4096 Apr 10  2014 <span class="built_in">local</span></div><div class="line">drwxrwxr-x 15 root syslog   4096 Apr  4 19:57 <span class="built_in">log</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><strong><em>Sticky, 1 :</em></strong></p>
<blockquote>
<p>仅对目录有效。带<code>sticky</code>属性的目录下的文件或目录可以被其拥有者删除或改名。常利用<code>sticky</code>属性创建这样的目录：组用户可以在此目录中创建新文件、修改文件内容，但只有文件所有者才能对自己的文件进行删除或改名。如系统中的<code>/tmp</code>文件夹。在属性字符串中，通常用t表示。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-l</span> /</div><div class="line">drwxrwxrwt   8 root root  4096 Apr  4 23:57 tmp</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="修改文件或文件夹对应用户的操作权限"><a href="#修改文件或文件夹对应用户的操作权限" class="headerlink" title="修改文件或文件夹对应用户的操作权限"></a>修改文件或文件夹对应用户的操作权限</h3><p>在 linux 系统中，可以使用<code>chmod</code>命令来修改文件或文件夹对应用户的操作权限，<code>chmod</code>命令也有两种方式修改，一种是使用代表相应操作权限的字母简写表示，另一种是使用代表相应操作权限的数字表示。</p>
<ul>
<li><p><strong><em> 使用简写字母 </em></strong></p>
<blockquote>
<p><code>chmod</code>语法参数格式: [ugoa][[+-=][rwxst]<br>第一个字符是u、g、 o 或 a 中的一个（分别表示用户、组、其他人和所有人）。还可以选择添加（+）、删除（-）或设置（=）各种不同权限。</p>
</blockquote>
<ul>
<li><p>给文件或文件夹<code>try</code>的拥有者加可执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod u+x try</div></pre></td></tr></table></figure>
</li>
<li><p>给文件或文件夹<code>try</code>的拥有者和组成员加可读可写权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod ug+rw try</div></pre></td></tr></table></figure>
</li>
<li><p>给文件或文件夹<code>try</code>的拥有者和组成员除去可写权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod ug-r try</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong><em> 使用数字表示(八进制数) </em></strong></p>
<blockquote>
<p>为了简化表述，也可使用八进制数来表示权限。即用一个四位八进制数来表示，其中最高位表示特殊权限，随后的三位依次是所有者权限、组权限和其他人权限。每一个八进制位的权限数值是文件具有的相应权限所对应的数值之后，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0755=rwxr-xr-x=0(4+2+1)(4+0+1)(4+0+1)</div></pre></td></tr></table></figure>
<p>数值权限的算法，比如<code>rw-</code>其实就是<code>110</code>的二进制，也就是<code>0*2^0 + 1*2^1 + 1*2^2 = 6</code>。有相应的权限就用<code>1</code>表示，没有相应的权限就用<code>0</code>表示。不过这种算法特殊权限不包含在内。</p>
</blockquote>
<ul>
<li><p>给文件或文件夹<code>try</code>的拥有者加<code>rwx</code>权限，组用户加<code>r-x</code>权限，其他用户<code>r--</code>权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod 0754 try</div></pre></td></tr></table></figure>
</li>
<li><p><code>chmod</code>命令也可以递归的修改文件夹下所有的文件的权限，如给 try 文件夹下得所有文件加上 0755 权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod -R 0755 try</div></pre></td></tr></table></figure>
</li>
<li><p>批量只修改文件或文件夹权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ find -type d|xargs chmod 745     // 只修改文件夹权限</div><div class="line">$ find -type f|xargs chmod 644     // 只修改文件权限</div><div class="line">// 或者</div><div class="line">$ chmod 745 `find 路径 -type d`     // 只修改文件夹权限</div><div class="line">$ chmod 644 `find 路径 -type f`    // 只修改文件权限</div></pre></td></tr></table></figure>
</li>
<li><p>相应权限的数值:</p>
<blockquote>
<ul>
<li><code>rwx</code>(7)、<code>rw-</code>(6)、<code>r-x</code>(5)、<code>r--</code>(4)、<code>--wx</code>(3)、<code>-w-</code>(2)、<code>--x</code>(1)、<code>---</code>(0)</li>
<li>suid: 符号<code>s</code>(4)</li>
<li>sgid: 符号<code>s</code>(2)</li>
<li>sticky: 符号<code>t</code>(1)</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="修改文件或文件夹的拥有者和所属的组"><a href="#修改文件或文件夹的拥有者和所属的组" class="headerlink" title="修改文件或文件夹的拥有者和所属的组"></a>修改文件或文件夹的拥有者和所属的组</h3><p>使用<code>chown</code>可以修改文件或文件夹的拥有者和所属的组。</p>
<ul>
<li><p>将文件或文件夹<code>try</code>的拥有者修改成<code>aikin</code>，所属的组修改成<code>adm</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chown aikin:adm try</div></pre></td></tr></table></figure>
</li>
<li><p>和<code>chmod</code>一样，<code>-R</code>参数可以起到递归的作用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chown -R aikin:adm try</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建组和用户"><a href="#创建组和用户" class="headerlink" title="创建组和用户"></a>创建组和用户</h3><ul>
<li><p><strong><em>组相关操作: </em></strong></p>
<ul>
<li><p>创建一个<code>try</code>组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo groupadd  try</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>try</code>组的名字为<code>rename-try</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo groupadd -n rename-try try</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>try</code>组的名字为<code>rename-try</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo groupadd -n rename-try try</div></pre></td></tr></table></figure>
</li>
<li><p>删除<code>try2</code>组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo groupdel  try2</div></pre></td></tr></table></figure>
</li>
<li><p>查看所有组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo cat /etc/group</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong><em>用户相关操作: </em></strong></p>
<ul>
<li><p>创建用户<code>test</code></p>
<blockquote>
<p>在 linux 系统上虽然可以使用<code>useradd</code>或<code>adduser</code>来创建用户，但是这两个命令是有区别的。</p>
<ol>
<li>使用<code>useradd</code>时，如果后面不添加任何参数选项，例如：<code>$sudo useradd test</code>创建出来的用户将是默认“三无”用户：一无Home Directory，二无密码，三无系统Shell。</li>
<li>使用<code>adduser</code>时，创建用户的过程更像是一种人机对话，系统会提示你输入各种信息，然后会根据这些信息帮你创建新用户。<br>下面创建用户使用的是<code>adduser</code>命令:<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> $ sudo adduser <span class="built_in">test</span></div><div class="line"> Adding user `<span class="built_in">test</span><span class="string">' ...</span></div><div class="line"> Adding new group `test' (1002) ...</div><div class="line"> Adding new user `<span class="built_in">test</span><span class="string">' (1001) with group `test'</span> ...</div><div class="line"> Creating home directory `/home/<span class="built_in">test</span><span class="string">' ...</span></div><div class="line"> Copying files from `/etc/skel' ...</div><div class="line"> Enter new UNIX password:</div><div class="line"> Retype new UNIX password:</div><div class="line"> passwd: password updated successfully</div><div class="line"> Changing the user information <span class="keyword">for</span> <span class="built_in">test</span></div><div class="line"> Enter the new value, or press ENTER <span class="keyword">for</span> the default</div><div class="line">Full Name []: <span class="built_in">test</span></div><div class="line">Room Number []:</div><div class="line">Work Phone []:</div><div class="line">Home Phone []:</div><div class="line">Other []:</div><div class="line"> Is the information correct? [Y/n] y</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
</li>
<li><p>修改用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo passwd <span class="built_in">test</span>    // 修改用户密码</div><div class="line">$ sudo usermod <span class="_">-d</span> /home/<span class="built_in">test</span> -G try2 <span class="built_in">test</span>   // 将<span class="built_in">test</span>用户的登录目录改成/home/<span class="built_in">test</span>，并加入 try 组，注意这里是大 G。</div><div class="line">$ sudo gpasswd <span class="_">-a</span> <span class="built_in">test</span> try     // 将用户 <span class="built_in">test</span> 加入到 try2 组。</div><div class="line">$ sudo gpasswd <span class="_">-d</span> <span class="built_in">test</span> try2    // 将用户 <span class="built_in">test</span> 从 try 组中移除</div></pre></td></tr></table></figure>
</li>
<li><p>删除用户<code>test</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo userdel <span class="built_in">test</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看所有用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cut <span class="_">-d</span> : <span class="_">-f</span> 1 /etc/passwd</div><div class="line">// 或者</div><div class="line">$ cat /etc/passwd |awk -F \: <span class="string">'&#123;print $1&#125;'</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>　　<strong><em>了解 linux 用户操作权限，安全就掌握在手中。</em></strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-104-5/" target="_blank" rel="external">学习 Linux，101: 管理文件权限和所有权</a></li>
<li><a href="http://linux-wiki.cn/wiki/zh-hans/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90" target="_blank" rel="external">文件权限</a></li>
<li><a href="http://blog.51yip.com/linux/1137.html" target="_blank" rel="external">linux下添加，删除，修改，查看用户和用户组</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 linux 是多用户操作系统，所以基于安全的考虑，需要具备保障个人隐私和系统安全的机制。因此在使用 linux 系统的时候，经常会出现权限的问题(比如: 删除文件、安装软件、运行应用等等)，期初遇到这些问题的时候，大部分都使用&lt;code&gt;sudo&lt;/code&gt;或者是&lt;code&gt;sudo chmod 777 file&lt;/code&gt;(后面会讲解这个命令)来解决的。虽然这种方式可以解决问题，但是这样是不安全的，特别是在服务器上操作的时候，因为不是所有的文件和文件夹都可以被其它用户操作的，不是所有的用户都有&lt;code&gt;root&lt;/code&gt;权限的，不是所有的应用都可以用&lt;code&gt;root&lt;/code&gt;用户启动的。那么我们要如何正确的处理这些权限问题呢？那就让我们来学习一下 linux 权限相关的知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://aikin.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 服务自动启动</title>
    <link href="http://aikin.github.io/2014/12/20/ubuntu-auto-startup/"/>
    <id>http://aikin.github.io/2014/12/20/ubuntu-auto-startup/</id>
    <published>2014-12-20T11:26:25.000Z</published>
    <updated>2016-10-03T17:35:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，我们希望服务器重启后能够自动的把相关的服务启动起来。在了解如何让服务自动启动前，我们需要先了解一下，linux系统的启动步骤。</p>
<h3 id="linux-系统的启动步骤"><a href="#linux-系统的启动步骤" class="headerlink" title="linux 系统的启动步骤"></a>linux 系统的启动步骤</h3><blockquote>
<ol>
<li>读取 MBR 的信息，启动 Boot Manager。</li>
<li>加载系统内核，初始化硬件和设备驱动，启动 init 进程， init 进程是 Linux 的根进程，所有的系统进程都是它的子进程，也就是说 init 进程会根据配置文件继续引导过程，启动其它进程。</li>
<li>init 进程读取 /etc/inittab 文件中的信息，并进入预设的运行级别。通常情况下 /etc/rcS.d/ 目录下的启动脚本首先被执行，然后是/etc/rcN.d/ 目录。</li>
<li>根据 /etc/rcS.d/ 文件夹中对应的脚本启动 Xwindow 服务器 xorg，Xwindow 为 Linux 下的图形用户界面系统。</li>
<li>启动登录管理器，等待用户登录。</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>  Ubuntu中的运行级别</p>
<blockquote>
<p>0（关闭系统）<br>1（单用户模式，只允许root用户对系统进行维护。）<br>2 到 5（多用户模式，其中3为字符界面，5为图形界面。）<br>6（重启系统）</p>
</blockquote>
<h3 id="运行级别目录"><a href="#运行级别目录" class="headerlink" title="运行级别目录"></a>运行级别目录</h3><p>  在 /etc/rc0.d ~ /etc/rc6.d 和 /etc/rcS.d 目录下，这7个目录中，每个目录分别存放着对应运行级别加载时需要关闭或启动的服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-l</span> /etc/rc2.d/</div><div class="line">total 4</div><div class="line">lrwxrwxrwx 1 root root  18 Aug  9  2013 K01ondemand -&gt; ../init.d/ondemand</div><div class="line">lrwxrwxrwx 1 root root  18 Mar 13 09:44 K01pppd-dns -&gt; ../init.d/pppd-dns</div><div class="line">lrwxrwxrwx 1 root root  15 Mar 13 09:44 K01rsync -&gt; ../init.d/rsync</div><div class="line">lrwxrwxrwx 1 root root  14 Mar 13 09:44 S01acct -&gt; ../init.d/acct</div><div class="line">lrwxrwxrwx 1 root root  15 Mar 13 09:44 S01aegis -&gt; ../init.d/aegis</div><div class="line">lrwxrwxrwx 1 root root  14 Mar 13 09:44 S01sudo -&gt; ../init.d/sudo</div><div class="line">...</div></pre></td></tr></table></figure></p>
<ul>
<li>由显示的信息可以知道，其实每个脚本文件都对应着/etc/init.d/目录下具体的服务K开头的脚本文件代表运行级别加载时需要关闭的，S开头的代表需要执行</li>
</ul>
<h3 id="使用软连接设置自动启动"><a href="#使用软连接设置自动启动" class="headerlink" title="使用软连接设置自动启动"></a>使用软连接设置自动启动</h3><p>  由上面的详细信息可以知道，当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在/etc/init.d目录下，然后在 /etc/rc.d/rc*.d 中建立软链接即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln <span class="_">-s</span> /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</div></pre></td></tr></table></figure></p>
<ul>
<li>此处 sshd 是具体服务的脚本文件，S100ssh 是其软链接，S开头代表加载时自启动</li>
<li>如果需要在多个运行级别下设置自启动，则需建立多个软链接</li>
<li>这种方式比较繁琐，适用于自定义的服务脚本</li>
<li>如果系统中已经存在某些服务（比如安装 apache 时就会有 httpd 服务项），可以使用下面的两种方式。</li>
</ul>
<h3 id="使用-update-rc-d-命令设置自动启动项"><a href="#使用-update-rc-d-命令设置自动启动项" class="headerlink" title="使用 update-rc.d 命令设置自动启动项"></a>使用 update-rc.d 命令设置自动启动项</h3><ul>
<li><p>从所有的运行级别中删除指定启动项</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ update-rc.d <span class="_">-f</span> ＜basename＞ remove    // basename 为服务的名称</div></pre></td></tr></table></figure>
</li>
<li><p>按指定顺序、在指定运行级别中启动或关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ update-rc.d ＜basename＞ start|stop ＜order＞ ＜runlevels＞</div><div class="line">// 实例：update-rc.d apachectl start 20 2 3 4 5 . stop 20 0 1 6 .</div></pre></td></tr></table></figure>
</li>
</ul>
<p>解析：表示在2、3、4、5这五个运行级别中，由小到大，第20个开始运行apachectl；在 0 1 6这3个运行级别中，第20个关闭apachectl。这是合并起来的写法，注意它有2个点号，效果等于下面方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ update-rc.d apachectl defaults</div></pre></td></tr></table></figure></p>
<ul>
<li>启动和关闭顺序为90，级别默认<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ update-rc.d ＜basename＞ defaults 90</div></pre></td></tr></table></figure>
</li>
</ul>
<p>A启动后B才能启动，B关闭后A才关闭<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ update-rc.d A defaults 80 20</div><div class="line">$ update-rc.d B defaults 90 10</div></pre></td></tr></table></figure></p>
<h3 id="使用-chkconfig-命令设置自动启动项"><a href="#使用-chkconfig-命令设置自动启动项" class="headerlink" title="使用 chkconfig 命令设置自动启动项"></a>使用 chkconfig 命令设置自动启动项</h3><ul>
<li>查看自动启动项</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ chkconfig --list</div><div class="line">acct                      0:off  1:off  2:on   3:on   4:on   5:on   6:off</div><div class="line">aegis                     0:off  1:off  2:on   3:on   4:on   5:on   6:off</div><div class="line">apparmor                  0:off  1:off  2:off  3:off  4:off  5:off  6:off  S:on</div><div class="line">atd                       0:off  1:off  2:off  3:off  4:off  5:off  6:off</div><div class="line">binfmt-support            0:off  1:off  2:off  3:off  4:off</div></pre></td></tr></table></figure>
<ul>
<li>开启自动启动服务</li>
</ul>
<p>　如果需要自启动某些服务，只需使用chkconfig 服务名 on即可，若想关闭，将on改为off<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chkconfig sshd on</div></pre></td></tr></table></figure></p>
<p>　在默认情况下，chkconfig会自启动2345这四个级别，如果想自定义可以加上 –level 选项。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chkconfig --level 35 sshd on</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://wangyan.org/blog/ubuntu-update-rc-d.html" target="_blank" rel="external">Ubuntu 系统 Update-rc.d 命令</a></li>
<li><a href="http://www.cnblogs.com/nerxious/archive/2013/01/18/2866548.html" target="_blank" rel="external">Linux中设置服务自启动的三种方式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候，我们希望服务器重启后能够自动的把相关的服务启动起来。在了解如何让服务自动启动前，我们需要先了解一下，linux系统的启动步骤。&lt;/p&gt;
&lt;h3 id=&quot;linux-系统的启动步骤&quot;&gt;&lt;a href=&quot;#linux-系统的启动步骤&quot; class=&quot;headerlink&quot; title=&quot;linux 系统的启动步骤&quot;&gt;&lt;/a&gt;linux 系统的启动步骤&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;读取 MBR 的信息，启动 Boot Manager。&lt;/li&gt;
&lt;li&gt;加载系统内核，初始化硬件和设备驱动，启动 init 进程， init 进程是 Linux 的根进程，所有的系统进程都是它的子进程，也就是说 init 进程会根据配置文件继续引导过程，启动其它进程。&lt;/li&gt;
&lt;li&gt;init 进程读取 /etc/inittab 文件中的信息，并进入预设的运行级别。通常情况下 /etc/rcS.d/ 目录下的启动脚本首先被执行，然后是/etc/rcN.d/ 目录。&lt;/li&gt;
&lt;li&gt;根据 /etc/rcS.d/ 文件夹中对应的脚本启动 Xwindow 服务器 xorg，Xwindow 为 Linux 下的图形用户界面系统。&lt;/li&gt;
&lt;li&gt;启动登录管理器，等待用户登录。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://aikin.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>window 对象的“生命周期”事件</title>
    <link href="http://aikin.github.io/2014/12/07/window-life-cycle-events/"/>
    <id>http://aikin.github.io/2014/12/07/window-life-cycle-events/</id>
    <published>2014-12-07T06:42:23.000Z</published>
    <updated>2016-10-03T17:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>“生命周期”事件？什么是”生命周期”事件？好吧，我只是想不到标题，于是就想了个“生命周期”名词，个人觉得比较”高大上” (*^__^*)。其实就是网页加载或关闭时触发的事件。</p>
<p>访问一个网页时，可能会触发 window 对象的一些事件(onload, onbeforeunload, onunload, onfocus, onblur等)。我们可以在这些事件触发时，实现一些功能，也可以根据这些事件来捕获用户的一些本地行为等等。<br><a id="more"></a><br>  <strong><em> 下面这些事件只是在 chrome 上实践过。</em></strong></p>
<h2 id="window-onload"><a href="#window-onload" class="headerlink" title=" window.onload: "></a><strong> window.onload: </strong></h2><p>onload 事件，会在页面内容包括图片的所有元素加载完毕后才能触发。而<code>jqery</code>的  $(document).ready() 事件，是DOM结构绘制完毕后就触发。同时 window.onload 不能同时编写多个，如果有多个 window.onload 方法，只会触发其中一个。$(document).ready() 可以同时编写多个，并且都可以得到执行。</p>
<blockquote>
<p>支持该事件的 HTML 标签：<br><code>&lt;body&gt;, &lt;frame&gt;, &lt;frameset&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;link&gt;, &lt;script&gt;</code></p>
</blockquote>
<p><strong> eg-1: </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"主君，加载已经完毕!"</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="window-onbeforeunload"><a href="#window-onbeforeunload" class="headerlink" title=" window.onbeforeunload: "></a><strong> window.onbeforeunload: </strong></h2><p>onbeforeunload 事件，在页面刷新或关闭前触发。可以用来提示用户，是否要离开当前页面。</p>
<p><strong> eg-2: </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'你舍得离开吗？'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="window-onunload"><a href="#window-onunload" class="headerlink" title=" window.onunload: "></a><strong> window.onunload: </strong></h2><p>onunload 事件，也是在页面刷新或关闭前触发。区别是 onbeforeunload 在 onunload 之前触发，也就是 onbeforeunload 可以阻止 onunload 的触发。不过这个方法在 chrome 时有效时无效。在 safari 正常使用。</p>
<p><strong> eg-3: </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"拜拜啦!"</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="下面比较一下-window-和-jQuery-这些事件执行的顺序"><a href="#下面比较一下-window-和-jQuery-这些事件执行的顺序" class="headerlink" title="下面比较一下 window 和 jQuery 这些事件执行的顺序:"></a>下面比较一下 window 和 jQuery 这些事件执行的顺序:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    post(<span class="string">"document ready!"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="built_in">window</span>).unload(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    post(<span class="string">"jquery unload!"</span>);</div><div class="line">&#125;).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    post(<span class="string">"jquery load!"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    post(<span class="string">"window onload!"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    post(<span class="string">"window onbeforeunload!"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    post(<span class="string">"window onunload!"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        url    : <span class="string">"/events_test"</span>,</div><div class="line">        method : <span class="string">"POST"</span>,</div><div class="line">        data   : &#123; event: event &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 执行顺序:</span></div><div class="line"><span class="comment">// document ready!</span></div><div class="line"><span class="comment">// jquery load!</span></div><div class="line"><span class="comment">// window onload!</span></div><div class="line"><span class="comment">// window onbeforeunload!</span></div><div class="line"><span class="comment">// jquery unload!</span></div><div class="line"><span class="comment">// window unload!</span></div></pre></td></tr></table></figure>
<ul>
<li>jquery doucment ready 先触发，接着是 jquery load，然后是 window onload。</li>
<li>window beforeunload 先触发， 接着是 window onunload，然后 jquery unload。</li>
<li>window onunload 和 jquery unload 事件在 chrome 有时候会触发，有时候不会触发。</li>
</ul>
<p><strong><em> 这些事件还需要在其他浏览器实践一下。</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“生命周期”事件？什么是”生命周期”事件？好吧，我只是想不到标题，于是就想了个“生命周期”名词，个人觉得比较”高大上” (*^__^*)。其实就是网页加载或关闭时触发的事件。&lt;/p&gt;
&lt;p&gt;访问一个网页时，可能会触发 window 对象的一些事件(onload, onbeforeunload, onunload, onfocus, onblur等)。我们可以在这些事件触发时，实现一些功能，也可以根据这些事件来捕获用户的一些本地行为等等。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://aikin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript 模式》养分</title>
    <link href="http://aikin.github.io/2014/11/20/javascript-patterns/"/>
    <id>http://aikin.github.io/2014/11/20/javascript-patterns/</id>
    <published>2014-11-20T13:09:15.000Z</published>
    <updated>2016-03-17T15:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《JavaScript-模式》作者-Stoyan-Stefanov-译-陈新"><a href="#《JavaScript-模式》作者-Stoyan-Stefanov-译-陈新" class="headerlink" title="《JavaScript 模式》作者: Stoyan Stefanov 译: 陈新"></a>《JavaScript 模式》作者: Stoyan Stefanov 译: 陈新</h1><h3 id="养分"><a href="#养分" class="headerlink" title="养分"></a>养分</h3><p><strong><em>1. 自调用构造函数: </em></strong> 实现不使用<code>new</code>关键字，构造出实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Waffle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> ((!<span class="keyword">this</span> <span class="keyword">instanceof</span> Waffle)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Waffle();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">this</span>.tastes = <span class="string">"yummy"</span>;</div><div class="line">&#125;</div><div class="line">Waffle.prototype.wantAnother = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> first   = <span class="keyword">new</span> Waffle(),</div><div class="line">    section = Waffle();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(first.tastes);     <span class="comment">// yummy</span></div><div class="line"><span class="built_in">console</span>.log(section.tastes);   <span class="comment">// yummy</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong><em>2. 备忘模式: </em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cachekey = <span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)),</div><div class="line">    result = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!myFunc.cache[cachekey]) &#123;</div><div class="line">       result = &#123;&#125;;</div><div class="line"></div><div class="line">       <span class="comment">// 开销很大的操作</span></div><div class="line">       myFunc.cache[cachekey] = result;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> myFunc.cache[cachekey];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 缓存存储</span></div><div class="line">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>
<p><strong><em>3. 配置对象模式: </em></strong>将参数列表封装到一个对象内。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPerson</span>(<span class="params">first, last, dob, gender, address</span>) </span>&#123;...&#125;</div><div class="line"></div><div class="line">addPerson(<span class="string">"Bruce"</span>, <span class="string">"Wayne"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"batma"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 配置</span></div><div class="line"><span class="keyword">var</span> conf = &#123;</div><div class="line">    username : <span class="string">"batman"</span>,</div><div class="line">    first    : <span class="string">"Bruce"</span>,</div><div class="line">    last     : <span class="string">"Wayne"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">addPerson(conf);</div></pre></td></tr></table></figure>
<p><strong><em>4. 通用命名空间函数: </em></strong>减少全局变量，避免命名冲突。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MYAPP = MYAPP || &#123;&#125;;</div><div class="line">MYAPP.namespace = <span class="function"><span class="keyword">function</span>(<span class="params">ns_string</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> parts  = ns_string.split(<span class="string">"."</span>),</div><div class="line">        parent = MYAPP;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (parts[<span class="number">0</span>] === <span class="string">"MYAPP"</span>) &#123;</div><div class="line">        parts = parts.splice(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = parts.length; i &lt; max; i += <span class="number">1</span> ) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> parent[parts[i]] === <span class="string">"undefined"</span>) &#123;</div><div class="line">            parent[parts[i]] = &#123;&#125;;</div><div class="line">        &#125;</div><div class="line">        parent = parent[parts[i]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong><em>5. 模块模式: </em></strong>提供了结构化的思想并且有助于组织日益增长的代码。可以根据所编写的软件的需求(千变万化的需求)添加、替换或删除这些模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">MYAPP.namespace(<span class="string">"MYAPP.utilities.array"</span>).utilities.array = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 依赖</span></div><div class="line">    <span class="keyword">var</span> uobj = MYAPP.utilities.object,</div><div class="line">        ulang = MYAPP.utilities.lang,</div><div class="line"></div><div class="line">        <span class="comment">// 私有属性</span></div><div class="line">        array_string = <span class="string">"[object Array]"</span>,</div><div class="line">        ops = <span class="built_in">Object</span>.prototype.toStirng;</div><div class="line"></div><div class="line">        <span class="comment">// 私有方法</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line"></div><div class="line">        <span class="comment">// var变量定义结束</span></div><div class="line"></div><div class="line">    <span class="comment">// 可选的一次性初始化过程</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">// 公有 API</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line"></div><div class="line">        inArray: <span class="function"><span class="keyword">function</span>(<span class="params">needle, haystack</span>) </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = haystack.length; i &lt; mas; i += <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (haystack[i] === needle) &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// 其它操作</span></div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        isArray: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> ops.call(a) === array_string;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// ... 更多方法和属性</span></div><div class="line">    &#125;;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<p><strong><em>6. 创建构造函数的模块: </em></strong>使用模块模式返回一个构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">MYAPP.namespace(<span class="string">"MYAPP.utilities.Array"</span>).utilities.Array = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 依赖</span></div><div class="line">    <span class="keyword">var</span> uobj = MYAPP.utilities.object,</div><div class="line">        ulang = MYAPP.utilities.lang,</div><div class="line"></div><div class="line">        <span class="comment">// 私有属性和方法</span></div><div class="line">        Constr;</div><div class="line"></div><div class="line">        <span class="comment">// var变量定义结束</span></div><div class="line"></div><div class="line">    <span class="comment">// 可选的一次性初始化过程</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">// 公有 API --- 构造函数</span></div><div class="line">    Constr = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elements= <span class="keyword">this</span>.toArray(o);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Constr.prototype = &#123;</div><div class="line">        <span class="keyword">constructor</span>: MYAPP.utilities.Array,</div><div class="line">        version: "2.0",</div><div class="line">        toArray: function(obj) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, a = []; len = obj.length; i &lt; len; i += <span class="number">1</span>) &#123;</div><div class="line">                a[i] = obj[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 返回要分配给新命名空间的构造函数</span></div><div class="line">    <span class="keyword">return</span> Constr;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MYAPP.utilities.Array(obj);</div></pre></td></tr></table></figure>
<p><strong><em>7. 将全局变量导入到模块中: </em></strong>有助于加速即时函数中的全局符号解析的速度，因为这些导入的变量成为了该函数的局部变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MYAPP.utilities.module = (<span class="function"><span class="keyword">function</span>(<span class="params">app, global</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 使用参数</span></div><div class="line">&#125;(MYAPP, <span class="keyword">this</span>));</div></pre></td></tr></table></figure>
<p><strong><em>8. 沙箱模式: </em></strong>提供了一个可用于模块运行的环境，且不会对其他模块和个人沙箱造成任何影响。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Sandbox 构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sandbox</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 将参数转换成一个数组</span></div><div class="line">	<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>),</div><div class="line"></div><div class="line">        <span class="comment">// 最后一个参数是回调函数</span></div><div class="line">    	callback = args.pop(),</div><div class="line"></div><div class="line">        <span class="comment">// 模块可以作为一个数组传递，或作为单独的参数传递</span></div><div class="line">        modules = (args[<span class="number">0</span>] &amp;&amp; <span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">"string"</span>) ? args : args[<span class="number">0</span>],</div><div class="line">        i;</div><div class="line"></div><div class="line">        <span class="comment">// 确保该函数作为构造函数被调用</span></div><div class="line">		<span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Sandbox)) &#123;</div><div class="line">        	<span class="keyword">return</span> <span class="keyword">new</span> Sandbox(modules, callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 需要向 `this` 添加的属性</span></div><div class="line">        <span class="keyword">this</span>.a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">this</span>.b = <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 现在向该核心 `this` 对象添加模块</span></div><div class="line">        <span class="comment">// 不指定模块名称或指定“*”都表示“使用所有模块”</span></div><div class="line">        <span class="keyword">if</span> (!modules || modules === <span class="string">"*"</span>) &#123;</div><div class="line">        	modules = [];</div><div class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> Sandbox.modules) &#123;</div><div class="line">            	<span class="keyword">if</span> (Sandbox.modules.hasOwnProperty(i)) &#123;</div><div class="line">                	modules.push(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 初始化所需的模块</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; modules.length; i += <span class="number">1</span>) &#123;</div><div class="line">			Sandbox.modules[modules[i]](<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        callback(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Sandbox.prototype = &#123;</div><div class="line">	name	: <span class="string">"My Application"</span>,</div><div class="line">    version : <span class="string">"1.0"</span>,</div><div class="line">    getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sandbox.prototype.constructor = Sandbox;</div><div class="line"></div><div class="line"><span class="comment">// 增加模块</span></div><div class="line">Sandbox.modules = &#123;&#125;;</div><div class="line">Sandbox.modules.dom = <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">	box.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    box.getStyle   = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    box.foo 	   = <span class="string">"bar"</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sandbox.modules.event = <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果需要， 就访问 Sandbox 原型，如:</span></div><div class="line">    <span class="comment">// box.constructor.prototype.m = "mmm";</span></div><div class="line">	box.attachEvent  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    box.dettachEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sandbox.modules.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">	box.makeRequest  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	box.makeResponse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"></div><div class="line"><span class="comment">// 使用 ajax 和 event 模块</span></div><div class="line">Sandbox([<span class="string">"ajax"</span>, <span class="string">"event"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">	<span class="comment">//console.log(box);</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用所有可用模块</span></div><div class="line">Sandbox(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">&#125;);</div><div class="line">Sandbox(<span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 模块嵌套</span></div><div class="line">Sandbox(<span class="string">"dom"</span>, <span class="string">"event"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">	Sandbox(<span class="string">"ajax"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong><em>9. 圣杯继承模式</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">C, P</span>) </span>&#123;</div><div class="line">    	F.prototype = P.prototype;</div><div class="line">        C.prototype = <span class="keyword">new</span> F();</div><div class="line">        C.uber = P.prototype;</div><div class="line">        C.prototype.constructor = C;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong><em>10. 浅拷贝对象</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">parent, child</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i;</div><div class="line">    child = child || &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> parent) &#123;</div><div class="line">        <span class="keyword">if</span> (parent.hasOwnProperty(i)) &#123;</div><div class="line">            child[i] = parent[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> child;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> dad = &#123;name: <span class="string">"Adam"</span>&#125;;</div><div class="line"><span class="keyword">var</span> kid = extend(dad);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(kid.name);    <span class="comment">// "Adam"</span></div></pre></td></tr></table></figure></p>
<p><strong><em>11. 深拷贝对象</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendDeep</span>(<span class="params">parent, child</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i,</div><div class="line">    	toStr = <span class="built_in">Object</span>.prototype.toString,</div><div class="line">        astr = <span class="string">"[object Array]"</span>;</div><div class="line"></div><div class="line">    child = child || &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> parent) &#123;</div><div class="line">    	<span class="keyword">if</span> (parent.hasOwnProperty(i)) &#123;</div><div class="line">        	<span class="keyword">if</span> (<span class="keyword">typeof</span> parent[i] === <span class="string">"object"</span>) &#123;</div><div class="line">            	child[i] = (toStr.call(parent[i]) === astr) ? [] : &#123;&#125;;</div><div class="line">                extendDeep(parent[i], child[i]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            	child[i] = parent[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> child;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> dad = &#123;</div><div class="line">	counts: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    reads: &#123;paper: <span class="literal">true</span>&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> kid = extendDeep(dad);</div><div class="line"></div><div class="line">kid.counts.push(<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(kid.counts.toString());    <span class="comment">// "1,2,3,4"</span></div><div class="line"><span class="built_in">console</span>.log(dad.counts.toString());    <span class="comment">// "1,2,3"</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(dad.reads === kid.reads);   <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p><strong><em>12. 混入模式(mix-in)，就是将多个对象组合成一个新的对象。</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> arg,</div><div class="line">    	prop,</div><div class="line">        child = &#123;&#125;;</div><div class="line"></div><div class="line">       	<span class="keyword">for</span> (arg = <span class="number">0</span>; arg &lt; <span class="built_in">arguments</span>.length; arg += <span class="number">1</span>) &#123;</div><div class="line">        	<span class="keyword">for</span> (prop <span class="keyword">in</span> <span class="built_in">arguments</span>[arg]) &#123;</div><div class="line">            	<span class="keyword">if</span> (<span class="built_in">arguments</span>[arg].hasOwnProperty(prop)) &#123;</div><div class="line">                	child[prop] = <span class="built_in">arguments</span>[arg][prop];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	<span class="keyword">return</span> child;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> cake = mix(&#123;</div><div class="line">	&#123;eggs: <span class="number">2</span>, large: <span class="literal">true</span>&#125;,</div><div class="line">    &#123;butter: <span class="number">1</span>, salted: <span class="literal">true</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong><em>13. 单例模式(Singleton)，保证一个特定类仅有一个实例。当第二次使用这个特定类创建对象的时候，应该得到与第一次所创建对象完全相同。</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> instance;</div><div class="line"></div><div class="line">    Universe = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    Universe.prototype = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    instance = <span class="keyword">new</span> Universe();</div><div class="line">    instance.constructor = Universe;</div><div class="line"></div><div class="line">    instance.start_time = <span class="number">0</span>;</div><div class="line">    instance.bang = <span class="string">"Big"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>14. 迭代器模式(Iterator)，提供一个简单的接口，顺序遍历数据集合中的各个元素。</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> agg = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">    data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</div><div class="line">    length = data.length;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> element;</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.hasNext()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125;</div><div class="line">            element = data[index];</div><div class="line">            index = index + <span class="number">2</span>;</div><div class="line">            <span class="keyword">return</span> element;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        hasNext: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> index &lt; length;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 重置指针到初始位置</span></div><div class="line">        rewind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            index = <span class="number">0</span>;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 返回当前元素</span></div><div class="line">        current: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> data[index];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"><span class="keyword">while</span>(agg.hasNext()) &#123;</div><div class="line">	<span class="built_in">console</span>.log(agg.next());   <span class="comment">// 迭代的结果是：1,3,5</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">agg.rewind();   			  <span class="comment">// 重置</span></div><div class="line"><span class="built_in">console</span>.log(agg.current());  <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p><strong><em>15. 装饰者模式，可以在运行时动态添加附加功能到对象中。装饰者模式的一个比较方便的特征在于其预期行为的可定制和可配置特性。可以从仅具有一些基本功能的普通对象开始，然后从可用装饰资源池中选择需要用于增强普通对象的那些功能，并且按照顺序进行装饰，尤其是当装饰顺序很重要的时候。我感觉就是一个普通的材料通过了流水线的加工后产生了一个新的产品。也可说是一个对象进行了升级的过程，改变了自己的功能。</em></strong></p>
<ul>
<li>方法一: 让每个装饰者成为一个对象，并且该对象包含了应该被重载的方法。每个装饰者实际上继承了目前已经被前一个装饰者进行增强后的对象。每个装饰方法在 uber (被继承的对象) 上调用了同样的方法并获取其值，此外它还继续执行了一些其它操作。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.price = price || <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.price;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.decorators = &#123;&#125;;</div><div class="line"></div><div class="line">Sale.decorators.fedtax = &#123;</div><div class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice();</div><div class="line">        price += price * <span class="number">5</span> / <span class="number">100</span>;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.decorators.quebec = &#123;</div><div class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice();</div><div class="line">        price += price * <span class="number">7.5</span> / <span class="number">100</span>;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.decorators.money = &#123;</div><div class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"$"</span> + <span class="keyword">this</span>.uber.getPrice().toFixed(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.decorators.cdn = &#123;</div><div class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"CDN$"</span> + <span class="keyword">this</span>.uber.getPrice().toFixed(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    	overrides = <span class="keyword">this</span>.constructor.decorators[decorate],</div><div class="line">        i, newobj;</div><div class="line"></div><div class="line">	F.prototype = <span class="keyword">this</span>;</div><div class="line">    newobj = <span class="keyword">new</span> F();</div><div class="line">    newobj.uber = F.prototype;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> overrides) &#123;</div><div class="line">    	<span class="keyword">if</span> (overrides.hasOwnProperty(i)) &#123;</div><div class="line">        	newobj[i] = overrides[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newobj;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>);           <span class="comment">// 该价格为 100 美元</span></div><div class="line">sale = sale.decorate(<span class="string">'fedtax'</span>);     <span class="comment">// 增加联邦税</span></div><div class="line">sale = sale.decorate(<span class="string">'quebec'</span>);     <span class="comment">// 增加省级税</span></div><div class="line">sale = sale.decorate(<span class="string">'quebec'</span>);     <span class="comment">// 格式化为美元货币形式</span></div><div class="line">sale.getPrice();                    <span class="comment">// "$112.88"</span></div></pre></td></tr></table></figure>
<ul>
<li>方法二: 使用列表实现，将装饰者放在一个列表中，可以很容易的支持反装饰或撤销装饰(就是对装饰者列表进行 push 和 pop 的过程)。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.price = (price &gt; <span class="number">0</span>) || <span class="number">100</span>;</div><div class="line">    <span class="keyword">this</span>.decorators_list = [];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Sale.decorators = &#123;&#125;;</div><div class="line"></div><div class="line">Sale.decorators.fedtax = &#123;</div><div class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> price + price * <span class="number">5</span> / <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.decorators.quebec = &#123;</div><div class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> price + price * <span class="number">7.5</span> / <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.decorators.money = &#123;</div><div class="line">	getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"$"</span> + price.toFixed(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params">decorator</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.decorators_list.push(decorator);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> price = <span class="keyword">this</span>.price,</div><div class="line">    	i,</div><div class="line">		max = <span class="keyword">this</span>.decorators_list.length,</div><div class="line">		name;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i += <span class="number">1</span>) &#123;</div><div class="line">        name = <span class="keyword">this</span>.decorators_list[i];</div><div class="line">        price = Sale.decorators[name].getPrice(price);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> price;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// usage</span></div><div class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>);      <span class="comment">// 该价格为 100 美元</span></div><div class="line">sale.decorate(<span class="string">'fedtax'</span>);       <span class="comment">// 增加联邦税</span></div><div class="line">sale.decorate(<span class="string">'quebec'</span>);       <span class="comment">// 增加省级税</span></div><div class="line">sale.decorate(<span class="string">'quebec'</span>);       <span class="comment">// 格式化为美元货币形式</span></div><div class="line">sale.getPrice();               <span class="comment">// "$112.88"</span></div></pre></td></tr></table></figure>
<p><strong><em>16. 策略模式，策略模式定义了算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。就是先抽象出相同的处理流程(算法调用的过程，或做的事情)，然后根据在流程中获取到的算法策略不同，从而使流程内具体要做的事就不同。感觉像是<code>框架(流程)，数据(需要处理的数据)，算法(算法策略)</code>模式。</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> validator = &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 所有可用的检查</span></div><div class="line">    types: &#123;&#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 在当前验证会话中的错误信息</span></div><div class="line">    messages: [],</div><div class="line"></div><div class="line">    <span class="comment">// 当前需要使用的验证类型</span></div><div class="line">    config: &#123;&#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 暴露的公开验证方法</span></div><div class="line">    <span class="comment">// 传入的参数是 key =&gt; value，js中的，object类型</span></div><div class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> i, msg, type, checker, result_ok;</div><div class="line"></div><div class="line">        <span class="comment">// 清空所有的错误信息</span></div><div class="line">        <span class="keyword">this</span>.messages = [];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> data) &#123;</div><div class="line">            <span class="keyword">if</span> (data.hasOwnProperty(i)) &#123;</div><div class="line"></div><div class="line">                type = <span class="keyword">this</span>.config[i];         <span class="comment">// 根据key查询是否有存在的验证规则</span></div><div class="line">                checker = <span class="keyword">this</span>.types[type];   <span class="comment">// 获取验证规则的验证类</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> (!type) &#123;</div><div class="line">                    <span class="keyword">continue</span>;                <span class="comment">// 如果验证规则不存在，则不处理</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!checker) &#123;             <span class="comment">// 如果验证规则类不存在，抛出异常</span></div><div class="line">                    <span class="keyword">throw</span> &#123;</div><div class="line">                        name: <span class="string">"ValidationError"</span>,</div><div class="line">                        message: <span class="string">"No handler to validate type "</span> + type</div><div class="line">                    &#125;;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                result_ok = checker.validate(data[i]); <span class="comment">// 使用查到的单个验证类进行验证</span></div><div class="line">                <span class="keyword">if</span> (!result_ok) &#123;</div><div class="line">                    msg = <span class="string">"Invalid value for *"</span> + i + <span class="string">"*, "</span> + checker.instructions;</div><div class="line">                    <span class="keyword">this</span>.messages.push(msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hasErrors();</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// helper</span></div><div class="line">    hasErrors: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.messages.length !== <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>使用</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// usage</span></div><div class="line"><span class="comment">// 定义types里存放的各种验证类</span></div><div class="line"></div><div class="line"><span class="comment">// 验证给定的值是否不为空</span></div><div class="line">validator.types.isNonEmpty = &#123;</div><div class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value !== <span class="string">""</span>;</div><div class="line">    &#125;,</div><div class="line">    instructions: <span class="string">"传入的值不能为空"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 验证给定的值是否是数字</span></div><div class="line">validator.types.isNumber = &#123;</div><div class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> !<span class="built_in">isNaN</span>(value);</div><div class="line">    &#125;,</div><div class="line">    instructions: <span class="string">"传入的值只能是合法的数字，例如：1, 3.14 or 2010"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 验证给定的值是否只是字母或数字</span></div><div class="line">validator.types.isAlphaNum = &#123;</div><div class="line">    validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> !<span class="regexp">/[^a-z0-9]/i</span>.test(value);</div><div class="line">    &#125;,</div><div class="line">    instructions: <span class="string">"传入的值只能保护字母和数字，不能包含特殊字符"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 定义需要验证的数据集合，然后还需要定义每种数据需要验证的规则类型</span></div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    first_name: <span class="string">"Tom"</span>,</div><div class="line">    last_name: <span class="string">"Xu"</span>,</div><div class="line">    age: <span class="string">"unknown"</span>,</div><div class="line">    username: <span class="string">"TomXu"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">validator.config = &#123;</div><div class="line">    first_name: <span class="string">'isNonEmpty'</span>,</div><div class="line">    age: <span class="string">'isNumber'</span>,</div><div class="line">    username: <span class="string">'isAlphaNum'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">validator.validate(data);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (validator.hasErrors()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(validator.messages.join(<span class="string">"\n"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>17. 外观模式，为子系统的<code>一组接口</code>提供一个一致的界面(接口)，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。感觉就是对一些接口的组合(封装)，形成一个高层接口(抽象接口)，以备外界调用。</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myEvent = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    stop: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        e.preventDefault();       <span class="comment">// 终止事件以避免其冒泡上升到父节点</span></div><div class="line">        e.stopPropagation();      <span class="comment">// 阻止浏览器执行默认动作(例如, 阻止下面的链接或提交表单)</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《JavaScript-模式》作者-Stoyan-Stefanov-译-陈新&quot;&gt;&lt;a href=&quot;#《JavaScript-模式》作者-Stoyan-Stefanov-译-陈新&quot; class=&quot;headerlink&quot; title=&quot;《JavaScript 模式》作者: Stoyan Stefanov 译: 陈新&quot;&gt;&lt;/a&gt;《JavaScript 模式》作者: Stoyan Stefanov 译: 陈新&lt;/h1&gt;&lt;h3 id=&quot;养分&quot;&gt;&lt;a href=&quot;#养分&quot; class=&quot;headerlink&quot; title=&quot;养分&quot;&gt;&lt;/a&gt;养分&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;1. 自调用构造函数: &lt;/em&gt;&lt;/strong&gt; 实现不使用&lt;code&gt;new&lt;/code&gt;关键字，构造出实例。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Waffle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Waffle)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Waffle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tastes = &lt;span class=&quot;string&quot;&gt;&quot;yummy&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Waffle.prototype.wantAnother = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; first   = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Waffle(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    section = Waffle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(first.tastes);     &lt;span class=&quot;comment&quot;&gt;// yummy&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(section.tastes);   &lt;span class=&quot;comment&quot;&gt;// yummy&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="reading-notes" scheme="http://aikin.github.io/tags/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title>理解 prototype 和 __proto__</title>
    <link href="http://aikin.github.io/2014/11/10/prototype-proto/"/>
    <id>http://aikin.github.io/2014/11/10/prototype-proto/</id>
    <published>2014-11-10T12:07:10.000Z</published>
    <updated>2016-10-03T17:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解-prototype-和-proto"><a href="#理解-prototype-和-proto" class="headerlink" title="理解 prototype 和 __proto__"></a>理解 prototype 和 __proto__</h2><blockquote>
<p>一个对象的真正原型是被对象内部的<code>[[Prototype]]</code>属性所持有。ECMAScript 引入了标准对象原型访问器<code>Object.getPrototype(object)</code>，到目前为止只有 Firefox 和 Chrome 实现了此访问器。除了IE，其他的浏览器支持非标准的访问器<code>__proto__</code></p>
</blockquote>
<a id="more"></a>
<h3 id="什么是-prototype-和-proto"><a href="#什么是-prototype-和-proto" class="headerlink" title="什么是 prototype 和 __proto__ ?"></a>什么是 <em><code>prototype</code></em> 和 <em><code>__proto__</code></em> ?</h3><p><strong><code>prototype</code></strong> 为构造器(构造函数)的原型，是一个 javascript 的原生对象，它是通过调用构造函数而创建的那个对象实例的原型对象。 其他的对象可以通过他实现属性继承。</p>
<p><strong><code>__proto__</code></strong> 是对象的内部原型，所有对象的<code>__proto__</code>都指向该对象的构造器的<code>prototype</code>。</p>
<p>在调用对象的方法时，会通过该对象<code>__proto__</code>在原型链中查找。而构造器的<code>prototype</code> 会用于创建通过<code>new</code>关键字创建的对象的<code>__proto__</code>。</p>
<ul>
<li><strong><em>所有构造器(函数)的<code>__proto__</code>都指向<code>Function.prototype</code></em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">Boolean</span>.__proto__  === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">String</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">Array</span>.__proto__    === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">RegExp</span>.__proto__   === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">Error</span>.__proto__    === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line"><span class="built_in">Date</span>.__proto__     === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>注意: JavaScript中有内置(build-in)构造器/对象共计12个（ES5中新加了JSON），这里列举了可访问的8个构造器。剩下如<code>Global</code>不能直接访问，<code>Arguments</code>仅在函数调用时由JS引擎创建，<code>Math、JSON</code>是以对象形式存在的，无需<code>new</code>。它们的<code>__proto__</code>是<code>Object.prototype</code>。如下:</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.__proto__ === <span class="built_in">Object</span>.prototype;  <span class="comment">// true</span></div><div class="line"><span class="built_in">JSON</span>.__proto__ === <span class="built_in">Object</span>.prototype;  <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>以上介绍都是原生的 javascript 的构造器(函数)，当然自定义的构造器也满足:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> Man = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">Person.__proto__ === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div><div class="line">Man.__proto__    === <span class="built_in">Function</span>.prototype;   <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p><img src="http://aikin-blog-images.qiniudn.com/js-function-prototype.png" alt="构造函数原型链图"></p>
<ul>
<li><strong><em>所有对象的<code>__proto__</code>都指向其构造函数的<code>prototype</code></em></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj  = &#123;name: <span class="string">'aikin'</span>&#125;;</div><div class="line"><span class="keyword">var</span> arr  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> reg  = <span class="regexp">/hello/g</span>;</div><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line"><span class="keyword">var</span> err  = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'exception'</span>);</div><div class="line">obj.__proto__  === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></div><div class="line">arr.__proto__  === <span class="built_in">Array</span>.prototype;  <span class="comment">// true</span></div><div class="line">reg.__proto__  === <span class="built_in">RegExp</span>.prototype; <span class="comment">// true</span></div><div class="line">date.__proto__ === <span class="built_in">Date</span>.prototype;  <span class="comment">// true</span></div><div class="line">err.__proto__  === <span class="built_in">Error</span>.prototype;  <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>自定义构造函数的实例对象也是如此:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'aikin'</span>);</div><div class="line">person.__proto__ === Person.prototype; <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p><img src="http://aikin-blog-images.qiniudn.com/js-object-prototype.png" alt="对象原型链图"></p>
<h3 id="new-关键字做了什么"><a href="#new-关键字做了什么" class="headerlink" title="new 关键字做了什么?"></a><code>new</code> 关键字做了什么?</h3><blockquote>
<p> new 运算符接受一个函数 F 及其参数：<code>new F(arguments...)</code>。这一过程分为三步：</p>
<ol>
<li>创建类的实例。这步是把一个空的对象的<code>__proto__</code>属性设置为<code>F.prototype</code>。</li>
<li>初始化实例。函数 F 被传入参数并调用，关键字<code>this</code>指向该实例。</li>
<li>返回实例 当然你也可以<code>return</code>自定义的对象。</li>
</ol>
</blockquote>
<ul>
<li>new 函数的伪实现:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">new</span> (<span class="params">f</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ins = &#123; <span class="string">'__proto__'</span>: f.prototype &#125;; <span class="comment">/*第一步*/</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        f.apply(ins, <span class="built_in">arguments</span>);            <span class="comment">/*第二步*/</span></div><div class="line">        <span class="keyword">return</span> ins;                         <span class="comment">/*第三步*/</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="干货呈上-来几道-quiz-吧"><a href="#干货呈上-来几道-quiz-吧" class="headerlink" title="干货呈上(来几道 quiz 吧)"></a>干货呈上(来几道 quiz 吧)</h3><ul>
<li><strong> quiz-1 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'aikin'</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        name: <span class="string">'ulaijn'</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(me.name);  <span class="comment">// ?</span></div></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-2 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'aikin'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'ulaijn'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(me.name);  <span class="comment">// ?</span></div></pre></td></tr></table></figure>
<ul>
<li><code>quiz-1</code>和<code>quiz-2</code>运行结果分别是:<code>ulaijn</code>和<code>aikin</code>。这两个测试题主要考察的是对<code>new</code>关键字的理解。</li>
<li>在<code>quiz-1</code>中，在调用<code>new Person()</code>时，<code>Person</code>构造函数内的<code>this</code>指向是<code>Person</code>的实例，由于<code>Person</code>构造函数返回了一个对象类型的<code>{ name: &#39;ulaijn&#39; }</code>，导致<code>new Person()</code>返回的不是<code>Person</code>构造函数的实例，而是<code>{name: ulaijn}</code>，因为只要当构造函数自定义<code>return</code>的值是对象类型(不为 <em><code>null</code></em>)时，这样将导致使用<code>new</code>关键字调用构造函数后的返回值，替换掉本该返回的构造函数的实例，所以这里的<code>me</code>为<code>{name: &#39;ulaijn&#39;}</code>。</li>
<li>在<code>quiz-2</code>中，<code>Person</code>构造函数内的<code>this</code>，在调用<code>new Person()</code>时和<code>quiz-1</code>一样都是指向<code>Person</code>的实例，但是由于<code>Person</code>构造函数返回了一个不是对象类型，而是字符串类型的<code>ulaijn</code>，导致<code>new Person()</code>生成的实例无法被替换，所以<code>me.name</code>为<code>aikin</code>。</li>
</ul>
<ul>
<li><strong> quiz-3 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="keyword">constructor</span>: Person,</div><div class="line">    name : 'aikin',</div><div class="line">    age : 23</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var aMe = new Person();</div><div class="line">var bMe = new Person();</div><div class="line"></div><div class="line">aMe.name = 'luna';</div><div class="line">bMe.name = 'tom';</div><div class="line"></div><div class="line">console.log(aMe.name);  // ?</div><div class="line">console.log(bMe.name);  // ?</div></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-4 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="keyword">constructor</span>: Person,</div><div class="line">    info : &#123;</div><div class="line">        name : <span class="string">'aikin'</span>,</div><div class="line">        age  : <span class="number">23</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> aMe = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> bMe = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">aMe.info.name = <span class="string">'luna'</span>;</div><div class="line">bMe.info.name = <span class="string">'tom'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(aMe.info.name);  <span class="comment">// ?</span></div><div class="line"><span class="built_in">console</span>.log(bMe.info.name);  <span class="comment">// ?</span></div></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-5 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.info = &#123;</div><div class="line">        name : <span class="string">'aikin'</span>,</div><div class="line">        age  : <span class="number">23</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> aMe = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> bMe = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">aMe.info.name = <span class="string">'luna'</span>;</div><div class="line">bMe.info.name = <span class="string">'tom'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(aMe.info.name);  <span class="comment">// ?</span></div><div class="line"><span class="built_in">console</span>.log(bMe.info.name);  <span class="comment">// ?</span></div></pre></td></tr></table></figure>
<ul>
<li><strong> quiz-6 </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.info = &#123;</div><div class="line">        name : <span class="string">'aikin'</span>,</div><div class="line">        age  : <span class="number">23</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="keyword">constructor</span>: Person,</div><div class="line">    info : &#123;</div><div class="line">        name : <span class="string">'aikin'</span>,</div><div class="line">        age  : <span class="number">23</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> aMe = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> bMe = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">aMe.info.name = <span class="string">'luna'</span>;</div><div class="line">bMe.info.name = <span class="string">'tom'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(aMe.info.name);  <span class="comment">// ?</span></div><div class="line"><span class="built_in">console</span>.log(bMe.info.name);  <span class="comment">// ?</span></div></pre></td></tr></table></figure>
<ul>
<li><em>quiz-3</em>、<em>quiz-5</em> 和 <em>quiz-6</em> 的运行结果是: <code>luna</code>和<code>tom</code>，而 <em>quiz-4</em> 的运行结果是: <code>tom</code>和<code>tom</code>。这四道题主要考察的是对<code>prototype</code>理解。</li>
<li><em>quiz-3</em> 中<code>aMe.name = &#39;luna&#39;</code>是赋值的过程，会在<code>aMe</code>中创建<code>name</code>属性，不会修改<code>aMe.__proto__.name</code>，当然<code>bMe</code>也一样。</li>
<li>对于 <em>quiz-4</em> 来说，<code>aMe.info.name = &#39;luna&#39;</code>是在对<code>aMe.info</code>赋值的过程，所以要先查找出<code>aMe.info</code>对象，因为<code>aMe</code>对象自己没有<code>info</code>属性，所以会从<code>aMe.__proto__</code> 获取到<code>info</code>对象，并修改掉<code>info</code>的<code>name</code>属性。而<code>bMe.info.name = tom</code>也是这个过程，由于<code>aMe.__proto__ === bMe.__proto__</code>，所以<code>bMe.info.name = tom</code>执行后会修改掉<code>bMe.__proto__.info.name</code>，从而导致<code>aMe.info.name</code>也被修改成<code>tom</code>。</li>
<li><em>quiz-5</em> 和 <em>quiz-6</em> 是考察对原型链查找的规则理解。当实例对象自己有相应的属性，就不会去获取原型链上的属性。就像 <em>quiz-6</em> 里面的<code>aMe</code>实例对象，<code>aMe</code>对象拥有<code>info</code>属性，同时在<code>aMe.__proto__</code>也用拥有<code>info</code>属性，但是<code>aMe.info.name</code>，不会获取<code>aMe.__proto__.info.name</code>，因为在原型链获取相应对象或者函数时，会从对象(实例)本身开始沿着原型链向上查找，只要找到了，就好停止继续查找。</li>
</ul>
<p><strong><em> 使用 <code>console.dir(Function)</code> 打印出你的原型链。</em></strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.cnblogs.com/snandy/archive/2012/09/01/2664134.html" target="_blank" rel="external">JavaScript中<strong>proto</strong>与prototype的关系</a></li>
<li><a href="http://blog.jobbole.com/9648/" target="_blank" rel="external">理解JavaScript原型</a></li>
<li><a href="http://www.cnblogs.com/rexy/p/4086186.html" target="_blank" rel="external">这些javascript面试题，你做对了几道？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;理解-prototype-和-proto&quot;&gt;&lt;a href=&quot;#理解-prototype-和-proto&quot; class=&quot;headerlink&quot; title=&quot;理解 prototype 和 __proto__&quot;&gt;&lt;/a&gt;理解 prototype 和 __proto__&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个对象的真正原型是被对象内部的&lt;code&gt;[[Prototype]]&lt;/code&gt;属性所持有。ECMAScript 引入了标准对象原型访问器&lt;code&gt;Object.getPrototype(object)&lt;/code&gt;，到目前为止只有 Firefox 和 Chrome 实现了此访问器。除了IE，其他的浏览器支持非标准的访问器&lt;code&gt;__proto__&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://aikin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Star Repositories On GitHub</title>
    <link href="http://aikin.github.io/2014/11/08/star-repos/"/>
    <id>http://aikin.github.io/2014/11/08/star-repos/</id>
    <published>2014-11-08T12:16:35.000Z</published>
    <updated>2016-10-03T17:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录的是笔者在 <a href="https://github.com/" target="_blank" rel="external">github</a>上 Star 的库，持续更新。</p>
<h2 id="JS-类"><a href="#JS-类" class="headerlink" title="JS 类"></a>JS 类</h2><ul>
<li><a href="https://github.com/getify/LABjs.git" target="_blank" rel="external">LABjs</a></li>
<li><a href="https://github.com/jrburke/requirejs.git" target="_blank" rel="external">requirejs</a></li>
<li><a href="https://github.com/seajs/seajs.git" target="_blank" rel="external">seajs</a><blockquote>
<ul>
<li>LABjs 是一个文件加载器, 核心价值是性能优化</li>
<li>RequireJS 和 SeaJS 则是模块加载器，倡导的是一种模块化开发理念，核心价值是        让 JavaScript 的模块化开发变得更简单自然。</li>
<li>模块加载器一般可降级为文件加载器用，因此使用 RequireJS 和 SeaJS，也可以达        成 LABjs 的性能优化目的。</li>
<li>RequireJS 遵循的是 AMD（异步模块定义）规范，SeaJS 遵循的是 CMD （通用模            块定义）规范。</li>
</ul>
</blockquote>
</li>
</ul>
<a id="more"></a>
<ul>
<li><a href="https://github.com/cujojs/curl.git" target="_blank" rel="external">curl</a> 异步模块加载器，符合AMD规范</li>
<li><a href="https://github.com/ariya/phantomjs.git" target="_blank" rel="external">phantomjs</a><blockquote>
<p>页面自动化测试：希望自动的登陆网站并做一些操作然后检查结果是否正常<br>网页监控：希望定期打开页面，检查网站是否能正常加载，加载结果是否符合预期。加载速度如何等<br>网络爬虫：获取页面中使用js来下载和渲染信息，或者是获取链接处使用js来跳转后的真实地址</p>
</blockquote>
</li>
</ul>
<ul>
<li><a href="https://github.com/cocos2d/cocos2d-html5.git" target="_blank" rel="external">cocos2d-html5</a> cocos2d for Web Browsers</li>
<li><a href="https://github.com/meteor/meteor.git" target="_blank" rel="external">meteor</a> 非常简单的用于构建现代web应用程序的环境。页面操作，直接同步到后台。同时更新其他访问者。</li>
<li><a href="https://github.com/tastejs/todomvc.git" target="_blank" rel="external">todomvc</a> Helping you select an MV* framework</li>
<li><a href="https://github.com/sintaxi/harp.git" target="_blank" rel="external">harp</a> static web server that also serves Jade, Markdown, EJS, Less, Stylus, Sass, and CoffeeScript as HTML, CSS, and JavaScript without any configuration.</li>
</ul>
<ul>
<li><a href="https://github.com/aFarkas/lazysizes.git" target="_blank" rel="external">lazysizes</a> 高性能实现懒加载 images scripts iframes等 从不可见到可见的变化展示</li>
<li><a href="https://github.com/HubSpot/offline.git" target="_blank" rel="external">offline</a> 自动弹出提示框当用户网络连接断开时</li>
<li><a href="https://github.com/evilstreak/markdown-js.git" target="_blank" rel="external">markdown-js</a> 解析 md</li>
<li><a href="https://github.com/coreyti/showdown.git" target="_blank" rel="external">showdown</a> 处理 md</li>
<li><a href="https://github.com/sebmck/6to5.git" target="_blank" rel="external">6to5</a> turns ES6 code into vanilla ES5</li>
<li><a href="https://github.com/madrobby/zepto.git" target="_blank" rel="external">zepto</a> 像 jquery 一样的js库</li>
<li><a href="https://github.com/paulkinzett/toolbar.git" target="_blank" rel="external">toolbar</a> jquery工具箱插件</li>
<li><a href="https://github.com/desandro/masonry.git" target="_blank" rel="external">masonry</a> 瀑布流网格布局</li>
<li><a href="https://github.com/zeroclipboard/zeroclipboard.git" target="_blank" rel="external">zeroclipboard</a> 剪切板</li>
<li><a href="https://github.com/blasten/turn.js.git" target="_blank" rel="external">turn.js</a> HTML5 实现书本的翻页效果</li>
<li><a href="https://github.com/videojs/video.js.git" target="_blank" rel="external">video.js</a> open source  custom HTML5 &amp; Flash video player</li>
<li><a href="https://github.com/hammerjs/hammer.js.git" target="_blank" rel="external">hammer.js</a> 多种手势  multi-touch gestures</li>
<li><a href="https://github.com/hakimel/reveal.js.git" target="_blank" rel="external">reveal.js</a> 多媒体html 展示框架</li>
<li><a href="https://github.com/h5bp/html5-boilerplate.git" target="_blank" rel="external">html5-boilerplate</a> 一个HTML/CSS/JS模板（技巧集合），包含了HTML5以及许多其他最佳实践</li>
<li><a href="https://github.com/mbostock/d3.git" target="_blank" rel="external">d3</a> 针对HTML和SVG的JavaScript可视化库</li>
<li><a href="https://github.com/mrdoob/three.js.git" target="_blank" rel="external">three.js </a> js 3d 库</li>
<li><a href="https://github.com/jquery/jquery-mobile.git" target="_blank" rel="external">jquery-mobile</a> jquery移动版</li>
<li><a href="https://github.com/chriso/validator.js.git" target="_blank" rel="external">validator.js</a> 对数据验证处理， 比例输入的 email 是否规范</li>
<li><a href="https://github.com/isagalaev/highlight.js.git" target="_blank" rel="external">highlight.js</a> 代码高亮</li>
<li><a href="https://github.com/bartaz/impress.js.git" target="_blank" rel="external">impress.js</a> 令人眩目的内容展示效果</li>
<li><a href="https://github.com/Prinzhorn/skrollr.git" target="_blank" rel="external">skrollr</a> 视差滚动js插件,随着滚动来改变Html展示</li>
<li><a href="https://github.com/rsms/node-imagemagick.git" target="_blank" rel="external">imagemagick</a> node第三方库, 关于对图片的处理</li>
<li><a href="https://github.com/shutterstock/rickshaw.git" target="_blank" rel="external">rickshaw</a> 用于创建交互式的实时图形JavaScript工具包</li>
<li><a href="https://github.com/fex-team/fis.git" target="_blank" rel="external">fis</a> FIS是专为解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题的工具框架。</li>
<li><a href="https://github.com/ariya/esprima.git" target="_blank" rel="external">esprima</a> js 语法树分析</li>
<li><a href="https://github.com/globocom/clappr.git" target="_blank" rel="external">clappr</a> 一个可扩展的网页媒体播放器</li>
<li><a href="https://github.com/knsv/mermaid.git" target="_blank" rel="external">mermaid</a> 通过用类似于 markdown 一样的方式，将规定格式的文本内容，生成图表和流程图的工具。</li>
<li><a href="https://github.com/WickyNilliams/headroom.js.git" target="_blank" rel="external">headroom.js</a> 隐藏 Header</li>
<li><a href="https://github.com/wycats/handlebars.js.git" target="_blank" rel="external">handlebars.js</a> JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。</li>
<li><a href="https://github.com/RubaXa/Sortable.git" target="_blank" rel="external">Sortable</a> 可以在现代浏览器和触屏设备上重排列表内容的简约 js 库。</li>
</ul>
<ul>
<li><a href="https://github.com/ciaoca/cxSelect.git" target="_blank" rel="external">jQuery cxSelect</a> 多级联动下拉菜单</li>
<li><a href="https://github.com/nathansearles/Slides.git" target="_blank" rel="external">Slides</a> 图片轮播滑动</li>
<li><a href="https://github.com/ded/klass.git" target="_blank" rel="external">klass</a> 一个实用工具来创建富有表现力的JavaScript类</li>
<li><a href="https://github.com/reworkcss/css.git" target="_blank" rel="external">css</a> css文件解析工具</li>
<li><a href="https://github.com/chjj/term.js.git" target="_blank" rel="external">term.js</a> 一个用JS写的终端</li>
<li><a href="https://github.com/chjj/tty.js.git" target="_blank" rel="external">tty.js</a> 浏览器上的终端， 使用node/express/socket.io</li>
<li><a href="https://github.com/fex-team/webuploader.git" target="_blank" rel="external">webuploader</a> WebUploader是一个简单的以HTML5为主，FLASH为辅的现代文件上传组件。</li>
<li><a href="https://github.com/derobins/wmd.git" target="_blank" rel="external">wmd</a> markdown 编辑器 用于评论</li>
<li><a href="https://github.com/vakata/jstree.git" target="_blank" rel="external">jstree</a> js 生成目录树</li>
<li><a href="https://github.com/codemirror/CodeMirror.git" target="_blank" rel="external">CodeMirror</a> 浏览器代码编辑器</li>
<li><a href="https://github.com/Reactive-Extensions/RxJS.git" target="_blank" rel="external">RxJS</a> 反应性扩展</li>
<li><a href="https://github.com/addyosmani/basket.js.git" target="_blank" rel="external">basket.js</a>  a script and resource loader for caching and loading scripts using localStorage</li>
<li><a href="https://github.com/imakewebthings/deck.js.git" target="_blank" rel="external">deck.js</a> 现代化 html 演示文稿</li>
<li><a href="https://github.com/medialize/URI.js.git" target="_blank" rel="external">URI.js</a> url 处理</li>
<li><a href="https://github.com/defunkt/jquery-pjax.git" target="_blank" rel="external">jquery-pjax</a> 局部刷新页面，同时修改 url</li>
<li><a href="https://github.com/rails/turbolinks.git" target="_blank" rel="external">turbolinks</a> 使加载的 web 的 links 可以缓存。代替让浏览器重新编译每个页面之间的JavaScript和CSS改变,它使当前页面的处于活跃着,只替换 body 和 title。</li>
</ul>
<ul>
<li><a href="https://github.com/tnwinc/htmldiff.js.git" target="_blank" rel="external">htmldiff.js</a> HTML Diffing in JavaScript</li>
<li><a href="https://github.com/HumbleSoftware/js-imagediff.git" target="_blank" rel="external">js-imagediff</a> 比较两张图片的不相同地方。</li>
<li><a href="https://github.com/isaacs/minimatch.git" target="_blank" rel="external">minimatch</a> 小型的匹配器</li>
<li><a href="https://github.com/dominictarr/adiff.git" target="_blank" rel="external">adiff</a> 可以数组进行区别和修补操作</li>
<li><a href="https://github.com/timsavery/node-diff.git" target="_blank" rel="external">node-diff</a> 比较两个字符串的不同</li>
<li><a href="https://github.com/NV/objectDiff.js.git" target="_blank" rel="external">objectDiff.js</a> 判断两个对象的不同</li>
<li><a href="https://github.com/austincheney/jsdifflib.git" target="_blank" rel="external">jsdifflib</a> 判断两个文本的不同，同时生成相应的HTML页面</li>
<li><a href="https://github.com/benjamine/jsondiffpatch.git" target="_blank" rel="external">jsondiffpatch</a> 区别和修补 js 对象</li>
<li><a href="https://github.com/austincheney/Pretty-Diff.git" target="_blank" rel="external">Pretty-Diff</a> 比较代码的不同</li>
<li><a href="https://github.com/substack/difflet.git" target="_blank" rel="external">difflet</a> 比较js对象，展示丰富多彩的结果</li>
<li><a href="https://github.com/kpdecker/firediff.git" target="_blank" rel="external">firediff</a> 追踪 DOM和CSS的改变</li>
<li><a href="https://github.com/kpdecker/jsdiff.git" target="_blank" rel="external">jsdiff</a> 可以比较单词 字母 和行的不同</li>
<li><a href="https://github.com/JexCheng/regulex.git" target="_blank" rel="external">regulex</a> JavaScript正则表达式可视化工具</li>
<li><a href="https://github.com/javallone/regexper.git" target="_blank" rel="external">regexper</a> JavaScript正则表达式可视化工具</li>
</ul>
<h4 id="Node-类"><a href="#Node-类" class="headerlink" title="Node 类"></a><strong><em>Node 类</em></strong></h4><ul>
<li><a href="https://github.com/tj/node-migrate.git" target="_blank" rel="external">node-migrate</a></li>
<li><a href="https://github.com/coolaj86/node-walk.git" target="_blank" rel="external">node-walk</a> 遍历文件夹 返回文件夹下文件的路径</li>
<li><a href="https://github.com/libgit2/node-gitteh.git" target="_blank" rel="external">node-gitteh</a> 使用 github api 获取git repo 的数据</li>
<li><a href="https://github.com/nodegit/nodegit.git" target="_blank" rel="external">nodegit</a> 调用 git api</li>
<li><a href="https://github.com/felixge/node-mysql.git" target="_blank" rel="external">node-mysql</a> 纯 js 实现的 mysql 客户端代理</li>
<li><a href="https://github.com/senchalabs/connect.git" target="_blank" rel="external">connect</a> 一个可以扩展的 HTTP 服务器框架</li>
<li><a href="https://github.com/cujojs/when.git" target="_blank" rel="external">when</a> node promise</li>
<li><a href="https://github.com/caolan/async.git" target="_blank" rel="external">async</a> 异步处理工具</li>
<li><a href="https://github.com/petkaantonov/bluebird.git" target="_blank" rel="external">bluebird</a> 创新的promise</li>
<li><a href="https://github.com/kriskowal/q.git" target="_blank" rel="external">q</a> js  promise</li>
<li><a href="https://github.com/then/promise.git" target="_blank" rel="external">promise</a> 基础 promise 实现</li>
<li><a href="https://github.com/dtao/lazy.js.git" target="_blank" rel="external">lazy.js</a>like underscore lodash</li>
<li><a href="https://github.com/facebook/immutable-js.git" target="_blank" rel="external">immutable-js</a> 不可变数据集合</li>
<li><a href="https://github.com/remy/nodemon.git" target="_blank" rel="external">nodemon</a>  监听node工程下文件，当改动是重启服务器</li>
<li><a href="https://github.com/node-webot/wechat.git" target="_blank" rel="external">wechat</a> 微信公共平台消息接口服务中间件</li>
<li><a href="https://github.com/sindresorhus/pageres.git" target="_blank" rel="external">pageres</a> 响应网站截图</li>
<li><a href="https://github.com/ncb000gt/node.bcrypt.js.git" target="_blank" rel="external">node.bcrypt.js</a> hash 加密密码</li>
<li><a href="https://github.com/Automattic/node-canvas.git" target="_blank" rel="external">node-canvas</a> 将图片转化成 base64. 可加水印，可验证码，可裁剪图片</li>
<li><a href="https://github.com/duojs/duo.git" target="_blank" rel="external">duo</a> 下一代包管理器，混合了 Component, Browserify and Go 。</li>
<li><a href="https://github.com/broofa/node-uuid.git" target="_blank" rel="external">node-uuid</a> Simple, fast generation of RFC4122 UUIDS.</li>
<li><a href="https://github.com/rogerwang/node-webkit.git" target="_blank" rel="external">node-webkit</a><blockquote>
<p>node-webkit是一个基于chromium和node.js实现的应用程序运行时环境，也即是说我们可以通过HTML，CSS，JavaScript实现一个本地化的应用程序。整个项目最具创意的部分就是将node.js整合进来，使得应用开发者能够直接在DOM里使用node.js模块，大大增强了Web端JavaScript的能力。该项目是由Intel开源项目中心开发与维护的。</p>
</blockquote>
</li>
</ul>
<ul>
<li><a href="https://github.com/GitbookIO/gitbook.git" target="_blank" rel="external">gitbook</a> 使用 git/github 和 markdown 来生产books</li>
<li><a href="https://github.com/mcavage/node-restify.git" target="_blank" rel="external">node-restify</a> resetful apis</li>
<li><a href="https://github.com/substack/node-browserify.git" target="_blank" rel="external">node-browserify</a> 将服务器的 node 包转化到浏览器也可以用</li>
<li><a href="https://github.com/mikeal/request.git" target="_blank" rel="external">request</a> http 请求客户端</li>
<li><a href="https://github.com/nodejitsu/forever.git" target="_blank" rel="external">forever</a> node 进程出错终止后，可以自动启动</li>
<li><a href="https://github.com/node-gh/gh.git" target="_blank" rel="external">gh</a> 简化终端 git 命令</li>
<li><a href="https://github.com/michael/github.git" target="_blank" rel="external">github</a> 一个小的更高层次的关于 github api 的封装</li>
<li><a href="https://github.com/shama/gaze.git" target="_blank" rel="external">gaze</a> 用于监听文件变化</li>
<li><a href="https://github.com/isaacs/minimatch.git" target="_blank" rel="external">minimatch</a> 用于RegExp路径的匹配</li>
<li><a href="https://github.com/cheeriojs/cheerio.git" target="_blank" rel="external">cheerio</a> 服务器版的 jQuery</li>
<li><a href="https://github.com/Marak/faker.js.git" target="_blank" rel="external">faker.js</a> 生成大量的 fake 数据</li>
<li><a href="https://github.com/felixge/node-form-data.git" target="_blank" rel="external">node-form-data</a> 上传文件</li>
<li><a href="https://github.com/tj/dox.git" target="_blank" rel="external">dox</a> js 文档生成器</li>
<li><a href="https://github.com/JacksonTian/eventproxy.git" target="_blank" rel="external">eventproxy</a> 事件代理</li>
<li><a href="https://github.com/ciaranj/node-oauth.git" target="_blank" rel="external">node-oauth</a> 验证第三方</li>
<li><a href="https://github.com/Unitech/PM2.git" target="_blank" rel="external">PM2</a> 生成环境下 管理 node application</li>
<li><a href="https://github.com/3rd-Eden/useragent.git" target="_blank" rel="external">useragent</a> high performance user agent parser for Node.js</li>
<li><a href="https://github.com/biggora/express-useragent.git" target="_blank" rel="external">express-useragent</a> nodejs user-agent middleware</li>
<li><a href="https://github.com/tobie/ua-parser.git" target="_blank" rel="external">ua-parser</a> A multi-language port of Browserscope’s user agent parser</li>
<li><a href="https://github.com/pa7/nude.js.git" target="_blank" rel="external">nude.js</a> Nudity detection with JavaScript and HTMLCanvas</li>
<li><a href="https://github.com/node-inspector/node-inspector.git" target="_blank" rel="external">node-inspector</a> Node.js debugger based on Blink Developer Tools</li>
<li><a href="https://github.com/jhnns/rewire.git" target="_blank" rel="external">rewire</a> 单元测试时可以使用它来给 modules 添加 setter和getter 方法，达到 mock功能。</li>
<li><a href="https://github.com/ConradIrwin/async-profile.git" target="_blank" rel="external">async-profile</a> 分析 node 应用所占用的 CPU</li>
<li><a href="https://github.com/gotwarlost/istanbul.git" target="_blank" rel="external">istanbul</a> 计算测试覆盖率</li>
<li><a href="https://github.com/tj/commander.js.git" target="_blank" rel="external">commander.js</a> node.js command-line interfaces made easy</li>
<li><a href="https://github.com/visionmedia/debug.git" target="_blank" rel="external">debug</a> tiny node.js &amp; browser debugging utility for your libraries and applications</li>
<li><a href="https://github.com/harthur/nomnom.git" target="_blank" rel="external">nomnom</a> Option parser for node with generated usage and commands</li>
<li><a href="https://github.com/arturadib/shelljs.git" target="_blank" rel="external">shelljs</a> Portable Unix shell commands for Node.js</li>
</ul>
<h4 id="Node-Web-框架"><a href="#Node-Web-框架" class="headerlink" title="Node Web 框架"></a><strong><em>Node Web 框架</em></strong></h4><ul>
<li><a href="https://github.com/balderdashy/sails.git" target="_blank" rel="external">sails</a> node 实时 MVC框架</li>
<li><a href="https://github.com/jaredhanson/locomotive.git" target="_blank" rel="external">locomotive</a> MVC框架</li>
<li><a href="https://github.com/flatiron/flatiron.git" target="_blank" rel="external">flatiron</a> nodejs和浏览器 框架组件</li>
<li><a href="https://github.com/techpines/express.io.git" target="_blank" rel="external">express.io</a> 实时 web 框架</li>
<li><a href="https://github.com/socketstream/socketstream.git" target="_blank" rel="external">socketstream</a> 一个实时Web应用程序的框架</li>
<li><a href="https://github.com/geddy/geddy.git" target="_blank" rel="external">geddy</a> 一个简单的、结构化的web框架</li>
<li><a href="https://github.com/totaljs/framework.git" target="_blank" rel="external">total.js</a> web应用程序框架,用于创建一个丰富的web网站和web服务。（有很多例子）</li>
<li><a href="https://github.com/koajs/koa.git" target="_blank" rel="external">koa</a> Express 原班人马打造的 koa，致力于成为一个更小、更健壮、更富有表现力的 Web 框架。</li>
<li><a href="https://github.com/krakenjs/kraken-js.git" target="_blank" rel="external">kraken-js</a> express 中间插件 控制安全 周期事件</li>
<li><a href="https://github.com/derbyjs/derby.git" target="_blank" rel="external">derby</a> MVC framework  run in both Node.js and browsers.</li>
<li><a href="https://github.com/robrighter/node-boilerplate.git" target="_blank" rel="external">node-boilerplate</a> nodejs website with express and socket.IO</li>
</ul>
<h4 id="HTML5-web-app-类"><a href="#HTML5-web-app-类" class="headerlink" title="HTML5 web app 类"></a><strong><em>HTML5 web app 类</em></strong></h4><ul>
<li><p><a href="https://github.com/Modernizr/Modernizr.git" target="_blank" rel="external">Modernizr</a>  一个用来检测浏览器功能支持情况的 JavaScript 库</p>
<blockquote>
<p>目前，通过检验浏览器对一系列测试的处理情况，Modernizr 可以检测18项 CSS3 功能以及40多项关于HTML5 的功能。 它比传统检测浏览器名称（浏览器嗅探）的方式更为可靠。 一整套测试的执行时间仅需几微秒。</p>
</blockquote>
</li>
<li><p><a href="https://github.com/brunch/brunch.git" target="_blank" rel="external">brunch</a> 一个超快的HTML5构建工具</p>
<blockquote>
<ul>
<li>编译你的脚本，模板，样式，链接它们，</li>
<li>将脚本和模板封装进common.js/AMD模块里，链接脚本和样式，</li>
<li>为链接文件生成源地图，复制资源和静态文件，</li>
<li>通过缩减代码和优化图片来收缩输出，看管你的文件更改，</li>
<li>并且通过控制台和系统提示通知你错误。</li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li><a href="https://github.com/montagejs/montage.git" target="_blank" rel="external">montage</a> 构建高可扩展性和可维护性的 HTML5 应用</li>
<li><a href="https://github.com/driftyco/ionic.git" target="_blank" rel="external">ionic</a> 手机端的框架，使用HTML5, CSS3(sass)和JavaScript(angular)做出原生应用</li>
<li><a href="https://github.com/verekia/initializr.git" target="_blank" rel="external">initializr</a> HTML5 Boilerplate Custom Builder running on Google App Engine (Java)</li>
<li><a href="https://github.com/sproutcore/sproutcore.git" target="_blank" rel="external">sproutcore</a> JS-MVC framework for building blazing-fast, native-caliber web applications.</li>
</ul>
<h4 id="Angularjs-类"><a href="#Angularjs-类" class="headerlink" title="Angularjs 类"></a><strong><em>Angularjs 类</em></strong></h4><ul>
<li><a href="https://github.com/joshdmiller/angular-placeholders.git" target="_blank" rel="external">angular-placeholders</a> 图片和文字占位符</li>
<li><a href="https://github.com/passy/angular-masonry.git" target="_blank" rel="external">angular-masonry</a> 瀑布流实现</li>
<li><a href="https://github.com/akoenig/angular-deckgrid.git" target="_blank" rel="external">angular-deckgrid</a>轻量级的网格图片布局和瀑布流布局</li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning.git" target="_blank" rel="external">AngularJS-Learning</a>   angularjs 学习资料库</li>
<li><a href="https://github.com/sroze/ngInfiniteScroll.git" target="_blank" rel="external">ngInfiniteScroll</a> angular 下拉加载更多</li>
<li><a href="https://github.com/kamilkp/angular-vs-repeat.git" target="_blank" rel="external">angular-vs-repeat</a> 替换 ng-repeat 减少 digest</li>
<li><a href="https://github.com/davidchang/ngReact.git" target="_blank" rel="external">ngReact</a> 替换 ng-repeat 提高 render 速度</li>
<li><a href="https://github.com/Pasvaz/bindonce.git" target="_blank" rel="external">Bindonce</a> 高性能 angular 数据绑定</li>
</ul>
<h4 id="js-前端框架"><a href="#js-前端框架" class="headerlink" title="js 前端框架"></a><strong><em>js 前端框架</em></strong></h4><ul>
<li><a href="https://github.com/jashkenas/backbone.git" target="_blank" rel="external">backbone</a></li>
<li><a href="https://github.com/emberjs/ember.js.git" target="_blank" rel="external">ember.js</a> 是个js MVC开发框架</li>
<li><a href="https://github.com/knockout/knockout.git" target="_blank" rel="external">knockout</a> 现代多样化的MVC framework</li>
</ul>
<h4 id="yeoman-generator"><a href="#yeoman-generator" class="headerlink" title="yeoman generator"></a><strong><em>yeoman generator</em></strong></h4><ul>
<li><a href="https://github.com/yeoman/generator-ember.git" target="_blank" rel="external">generator-ember</a></li>
<li><a href="https://github.com/yeoman/generator-backbone.git" target="_blank" rel="external">generator-backbone</a></li>
<li><a href="https://github.com/jhipster/generator-jhipster.git" target="_blank" rel="external">generator-jhipster</a></li>
<li><a href="https://github.com/diegonetto/generator-ionic.git" target="_blank" rel="external">generator-ionic</a></li>
</ul>
<h4 id="游戏引擎"><a href="#游戏引擎" class="headerlink" title="游戏引擎"></a><strong><em>游戏引擎</em></strong></h4><ul>
<li><a href="https://github.com/GoodBoyDigital/pixi.js.git" target="_blank" rel="external">pixi.js</a> html5 2d 游戏引擎</li>
<li><a href="https://github.com/photonstorm/phaser.git" target="_blank" rel="external">phaser</a> 2d 游戏框架可以让html5 游戏可以在浏览器 手机浏览器 支持 Canvas and WebGL 渲染。</li>
<li><a href="https://github.com/NetEase/pomelo.git" target="_blank" rel="external">pomelo</a> 网易基于 Nodejs 的网络游戏后台</li>
</ul>
<h2 id="持续集成工具"><a href="#持续集成工具" class="headerlink" title="持续集成工具"></a>持续集成工具</h2><ul>
<li><a href="https://github.com/jenkinsci/jenkins.git" target="_blank" rel="external">jenkins</a> java 持续集成</li>
<li><a href="https://github.com/gocd/gocd.git" target="_blank" rel="external">gocd</a> go 持续集成</li>
</ul>
<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><ul>
<li><a href="https://github.com/mongodb/mongo.git" target="_blank" rel="external">mongo</a></li>
<li><a href="https://github.com/kissjs/node-mongoskin.git" target="_blank" rel="external">node-mongoskin</a> The promise wrapper for node-mongodb-native</li>
<li><a href="https://github.com/edwardhotchkiss/mongoose-paginate.git" target="_blank" rel="external">mongoose-paginate</a> 数据分页</li>
<li><a href="https://github.com/hacksparrow/mongoose-pages.git" target="_blank" rel="external">mongoose-pages</a> 数据分页</li>
<li><a href="https://github.com/florianholzapfel/express-restify-mongoose.git" target="_blank" rel="external">express-restify-mongoose</a> restful interface for mongoose database models</li>
<li><a href="https://github.com/mongodb/node-mongodb-native.git" target="_blank" rel="external">node-mongodb-native</a> Mongo DB Native NodeJS Driver</li>
</ul>
<h4 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a><strong><em>GUI</em></strong></h4><ul>
<li><a href="https://github.com/agirbal/umongo.git" target="_blank" rel="external">umongo</a></li>
<li><a href="https://github.com/hacksparrow/mongoose-pages.git" target="_blank" rel="external">robomongod</a></li>
<li><a href="https://github.com/bobthecow/genghis.git" target="_blank" rel="external">genghis</a> MongoDB admin app</li>
</ul>
<h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a><strong><em>Driver</em></strong></h4><ul>
<li><a href="https://github.com/mongodb/mongo-java-driver.git" target="_blank" rel="external">mongo-java-driver</a></li>
<li><a href="https://github.com/mongodb/mongo-ruby-driver.git" target="_blank" rel="external">mongo-ruby-driver</a></li>
</ul>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><ul>
<li><a href="https://github.com/mhevery/jasmine-node.git" target="_blank" rel="external">jasmine-node</a> node jasmine 集成测试</li>
<li><a href="https://github.com/flatiron/vows.git" target="_blank" rel="external">vows</a> node BDD 异步测试框架</li>
<li><a href="https://github.com/visionmedia/should.js.git" target="_blank" rel="external">should.js</a> node BDD 测试断言</li>
<li><a href="https://github.com/flatiron/api-easy.git" target="_blank" rel="external">api-easy</a> node 测试 RESTful API</li>
<li><a href="https://github.com/vlucas/frisby.git" target="_blank" rel="external">frisby</a> node api 测试框架</li>
<li><a href="https://github.com/chaijs/chai.git" target="_blank" rel="external">chai</a> BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework.</li>
<li><a href="https://github.com/assaf/zombie.git" target="_blank" rel="external">zombie</a> 模拟浏览器行为的测试</li>
<li><a href="https://github.com/winsonwq/viff.git" target="_blank" rel="external">viff</a> 在不同的环境中找到网页视觉差异</li>
<li><a href="https://github.com/karma-runner/karma.git" target="_blank" rel="external">karma</a> 壮观的JavaScript测试运行器</li>
<li><a href="https://github.com/philsquared/Catch.git" target="_blank" rel="external">Catch</a> C++ 和 Obj-C自动化测试框架</li>
<li><a href="https://github.com/gh-unit/gh-unit.git" target="_blank" rel="external">gh-unit</a> object-c 测试框架</li>
<li><a href="https://github.com/kiwi-bdd/Kiwi.git" target="_blank" rel="external">Kiwi</a> BDD for iOS</li>
<li><a href="https://github.com/kif-framework/KIF.git" target="_blank" rel="external">KIF</a> iOS 集成测试框架</li>
<li><a href="https://github.com/cucumber/cucumber.git" target="_blank" rel="external">cucumber</a> BDD that talks to domain experts first and code second</li>
<li><a href="https://github.com/cucumber/cucumber-js.git" target="_blank" rel="external">cucumber-js</a> 纯 js 实现的 cucunber</li>
<li><a href="https://github.com/larrymyers/jasmine-reporters.git" target="_blank" rel="external">jasmine-reporters</a> custom jasmin reporters</li>
<li><a href="https://github.com/velesin/jasmine-jquery.git" target="_blank" rel="external">jasmine-jquery</a> 一组定制匹配器的jQuery框架, 处理HTML、CSS和JSON夹具在你的测试。</li>
<li><a href="https://github.com/cjohansen/Sinon.JS.git" target="_blank" rel="external">Sinon.JS</a> 前端单元测试工具</li>
<li><a href="https://github.com/gatling/gatling.git" target="_blank" rel="external">gatling</a> 并发测试工具</li>
</ul>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul>
<li><a href="https://github.com/creationix/nvm.git" target="_blank" rel="external">nvm</a> node 和 iojs 版本管理工具</li>
<li><a href="https://github.com/visionmedia/n.git" target="_blank" rel="external">n</a> node 版本管理工具</li>
<li><a href="https://github.com/CocoaPods/Specs.git" target="_blank" rel="external">Specs</a> ios 包管理</li>
<li><a href="https://github.com/Homebrew/homebrew.git" target="_blank" rel="external">homebrew</a> mac 软件管理</li>
<li><a href="https://github.com/wayneeseguin/rvm.git" target="_blank" rel="external">rvm</a> ruby 版本管理工具</li>
</ul>
<h2 id="Obj-C-类"><a href="#Obj-C-类" class="headerlink" title="Obj-C 类"></a>Obj-C 类</h2><ul>
<li><a href="https://github.com/TooTallNate/NodObjC.git" target="_blank" rel="external">NodObjC</a> The Node.js ⇆ Objective-C bridge</li>
<li><a href="https://github.com/robb/Underscore.m.git" target="_blank" rel="external">Underscore.m</a> A DSL for Data Manipulation</li>
<li><a href="https://github.com/AFNetworking/AFNetworking.git" target="_blank" rel="external">AFNetworking</a> iOS and OS X networking framework</li>
<li><a href="https://github.com/Grouper/FlatUIKit.git" target="_blank" rel="external">FlatUIKit</a> iOS UI 库</li>
<li><a href="https://github.com/objccn/articles.git" target="_blank" rel="external">articles</a> objc.io 技术进阶网站翻译</li>
<li><a href="https://github.com/BradLarson/GPUImage.git" target="_blank" rel="external">GPUImage</a> GPU-based image and video processing</li>
<li><a href="https://github.com/RestKit/RestKit.git" target="_blank" rel="external">RestKit</a> RestKit是一个Obj-C框架在iOS和Mac OS X实现RESTful风格的Web服务客户端</li>
<li><a href="https://github.com/facebook/facebook-ios-sdk.git" target="_blank" rel="external">facebook-ios-sdk</a></li>
<li><a href="https://github.com/mxcl/PromiseKit.git" target="_blank" rel="external">PromiseKit</a> Promises for iOS and OS X</li>
<li><a href="https://github.com/kevinzhow/PNChart.git" target="_blank" rel="external">PNChart</a></li>
</ul>
<h2 id="CSS-类"><a href="#CSS-类" class="headerlink" title="CSS 类"></a>CSS 类</h2><ul>
<li><a href="https://github.com/FortAwesome/Font-Awesome.git" target="_blank" rel="external">Font-Awesome</a>The iconic font and CSS toolkit</li>
<li><a href="https://github.com/zurb/foundation.git" target="_blank" rel="external">foundation</a>可自定义的前端框架,  移动终端优先的一个前端开发框架, 和 bootstrap 类似</li>
<li><a href="https://github.com/dhg/Skeleton.git" target="_blank" rel="external">Skeleton</a>超小的CSS文件, 快速开发任何尺寸的网站, 无论是17寸的笔记本屏幕或者是iphone</li>
<li><a href="https://github.com/Semantic-Org/Semantic-UI.git" target="_blank" rel="external">Semantic-UI</a>用自然语言使用惯例来组织使得开发过程更加的具有创新</li>
<li><a href="https://github.com/uikit/uikit.git" target="_blank" rel="external">uikit</a> 轻量级 模块化的 UI库</li>
<li><a href="https://github.com/viljamis/responsive-nav.js.git" target="_blank" rel="external">responsive-nav.js</a> 响应式导航栏</li>
<li><a href="https://github.com/daneden/animate.css.git" target="_blank" rel="external">animate.css</a> 动画效果</li>
<li><a href="https://github.com/daniel-lundin/snabbt.js.git" target="_blank" rel="external">snabbt.js</a> Fast animations with javascript and CSS transforms</li>
<li><a href="https://github.com/allmobilize/amazeui.git" target="_blank" rel="external">amazeui</a> 跨屏前端框架</li>
<li><a href="https://github.com/joshuaclayton/blueprint-css.git" target="_blank" rel="external">blueprint-css</a> A CSS framework that aims to cut down on your CSS development time</li>
<li><a href="https://github.com/GumbyFramework/Gumby.git" target="_blank" rel="external">Gumby</a> 灵活的， 响应式的 CSS 框架</li>
<li><a href="https://github.com/ericam/susy.git" target="_blank" rel="external">susy</a> 响应布局Sass的工具包</li>
<li><a href="https://github.com/yahoo/pure.git" target="_blank" rel="external">pure</a> 一系列可以在任意 Web 使用的 小型的，响应式的 CSS 模块</li>
<li><a href="https://github.com/groundworkcss/groundwork.git" target="_blank" rel="external">groundwork</a> Say hello to responsive design made easy.</li>
<li><a href="https://github.com/Semantic-Org/Semantic-UI.git" target="_blank" rel="external">Semantic-UI</a> Semantic is a UI component framework based around useful principles from natural language.</li>
</ul>
<h2 id="Ruby-On-Rails-类"><a href="#Ruby-On-Rails-类" class="headerlink" title="Ruby On Rails 类"></a>Ruby On Rails 类</h2><ul>
<li><a href="https://github.com/rails/rails.git" target="_blank" rel="external">rails</a> Ruby on Rails</li>
<li><a href="https://github.com/mongoid/mongoid.git" target="_blank" rel="external">mongoid</a> Ruby ODM framework for MongoDB</li>
<li><a href="https://github.com/sinatra/sinatra.git" target="_blank" rel="external">sinatra</a> Classy web-development dressed in a DSL</li>
<li><a href="https://github.com/JoeWoo/nlpir.git" target="_blank" rel="external">nlpir</a> 中文分词</li>
<li><a href="https://github.com/louismullie/treat.git" target="_blank" rel="external">treat</a> Natural language processing framework for Ruby.</li>
<li><a href="https://github.com/carrierwaveuploader/carrierwave.git" target="_blank" rel="external">carrierwave</a> rails 文件上传插件</li>
<li><a href="https://github.com/thoughtbot/paperclip.git" target="_blank" rel="external">paperclip</a> rails 文件上传插件</li>
<li><a href="https://github.com/phusion/passenger.git" target="_blank" rel="external">passenger</a>A fast and robust web server and application server for Ruby, Python and Node.js</li>
<li><a href="https://github.com/guard/guard.git" target="_blank" rel="external">guard</a> 一个命令行工具可以轻松地处理文件系统的修改事件。</li>
<li><a href="https://github.com/faye/faye.git" target="_blank" rel="external">faye</a> Simple pub/sub messaging for the web</li>
<li><a href="https://github.com/jch/html-pipeline.git" target="_blank" rel="external">html-pipeline</a> HTML processing filters and utilities</li>
</ul>
<h2 id="Docker-类"><a href="#Docker-类" class="headerlink" title="Docker 类"></a>Docker 类</h2><ul>
<li><a href="https://github.com/phusion/passenger-docker.git" target="_blank" rel="external">passenger-docker</a> A Docker base image for Ruby, Python, Node.js and Meteor web apps</li>
<li><a href="https://github.com/eugeneware/docker-wordpress-nginx.git" target="_blank" rel="external">docker-wordpress-nginx</a> A Dockerfile that installs the latest wordpress, nginx and php-fpm.</li>
<li><a href="https://github.com/yahoojapan/docker-continuous-integration-workflow.git" target="_blank" rel="external">docker-continuous-integration-workflow</a> 使用 docker 做持续集成</li>
<li><a href="https://github.com/rrader/docker-jenkins-slave.git" target="_blank" rel="external">docker-jenkins-slave</a> jenkins-slave dockerfile 生成工具</li>
<li><a href="https://github.com/jwilder/nginx-proxy.git" target="_blank" rel="external">nginx-proxy</a> Automated nginx proxy for Docker containers using docker-gen</li>
<li><a href="https://github.com/jpetazzo/nsenter.git" target="_blank" rel="external">nsenter</a> 进入 docker container 工具</li>
<li><a href="https://github.com/zettio/weave.git" target="_blank" rel="external">weave</a> The Docker Network</li>
<li><a href="https://github.com/docker/fig.git" target="_blank" rel="external">fig</a> Fast, isolated development environments using Docker</li>
<li><a href="https://github.com/google/cadvisor.git" target="_blank" rel="external">cadvisor</a> cAdvisor (Container Advisor) provides container users an understanding of the resource usage and performance characteristics of their running containers.就是用于监测 docker 其他 containers 使用情况</li>
</ul>
<h2 id="Go-类"><a href="#Go-类" class="headerlink" title="Go 类"></a>Go 类</h2><ul>
<li><a href="https://github.com/spf13/hugo.git" target="_blank" rel="external">hugo</a> A Fast and Flexible Static Site Generator built with love by spf13 in GoLang</li>
<li><a href="https://github.com/coreos/rocket.git" target="_blank" rel="external">rocket</a> App Container runtime</li>
<li><a href="https://github.com/go-martini/martini.git" target="_blank" rel="external">martini</a> Martini是一个强大为了编写模块化Web应用而生的GO语言框架.</li>
<li><a href="https://github.com/revel/revel.git" target="_blank" rel="external">revel</a> A high productivity, full-stack web framework for the Go language.</li>
<li><a href="https://github.com/astaxie/beego.git" target="_blank" rel="external">beego</a> 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。</li>
<li><a href="https://github.com/zenazn/goji.git" target="_blank" rel="external">goji</a> 小型 web 框架</li>
</ul>
<h2 id="Java-类"><a href="#Java-类" class="headerlink" title="Java 类"></a>Java 类</h2><ul>
<li><a href="https://github.com/playframework/playframework.git" target="_blank" rel="external">playframework</a></li>
<li><a href="https://github.com/alibaba/druid.git" target="_blank" rel="external">druid</a> Java语言中最好的数据库连接池</li>
<li><a href="https://github.com/alibaba/dubbo.git" target="_blank" rel="external">dubbo</a> 分布式服务架构</li>
<li><a href="https://github.com/alibaba/fastjson.git" target="_blank" rel="external">fastjson</a> 是一个Java语言编写的高性能功能完善的JSON库</li>
</ul>
<h2 id="open-source-project"><a href="#open-source-project" class="headerlink" title="open-source project"></a>open-source project</h2><ul>
<li><a href="https://github.com/spree/spree.git" target="_blank" rel="external">spree</a> 基于Ruby on Rails的开源电子商务解决方案</li>
<li><a href="https://github.com/diaspora/diaspora.git" target="_blank" rel="external">diaspora</a> 分布式社交网络开源项目 (rails</li>
<li><a href="https://github.com/spree/spree.git" target="_blank" rel="external">spree</a> Spree is a complete open source e-commerce solution for Ruby on Rails.</li>
<li><a href="https://github.com/TryGhost/Ghost.git" target="_blank" rel="external">Ghost</a> blog 搭建平台</li>
<li><a href="https://github.com/adobe/brackets.git" target="_blank" rel="external">brackets</a> adobe html css js code editor</li>
<li><a href="https://github.com/cnpm/cnpmjs.org.git" target="_blank" rel="external">cnpmjs.org</a> cnpm</li>
<li><a href="https://github.com/angular-app/angular-app.git" target="_blank" rel="external">angular-app</a> Reference application for AngularJS</li>
<li><a href="https://github.com/gitlabhq/gitlabhq.git" target="_blank" rel="external">gitlabhq</a> 类似于 github 代码合作开发</li>
<li><a href="https://github.com/happypeter/happycasts.git" target="_blank" rel="external">happycasts</a> happycasts 网站 是一个视频网站，讲解 rails 和 web 开发等。</li>
<li><a href="https://github.com/assemblymade/coderwall.git" target="_blank" rel="external">coderwall</a> Professional network for software engineers</li>
<li><a href="https://github.com/ether/etherpad-lite.git" target="_blank" rel="external">etherpad-lite</a> 在线协同同时编辑器。</li>
</ul>
<h2 id="code-style"><a href="#code-style" class="headerlink" title="code style"></a>code style</h2><ul>
<li><a href="https://github.com/felixge/node-style-guide.git" target="_blank" rel="external">node-style-guide</a></li>
<li><a href="https://github.com/bbatsov/ruby-style-guide.git" target="_blank" rel="external">ruby-style-guide</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide.git" target="_blank" rel="external">rails-style-guide</a></li>
<li><a href="https://github.com/airbnb/javascript.git" target="_blank" rel="external">javascript</a></li>
</ul>
<h2 id="study-resouce"><a href="#study-resouce" class="headerlink" title="study-resouce"></a>study-resouce</h2><ul>
<li><a href="https://github.com/dominictarr/stream-spec.git" target="_blank" rel="external">es6features</a> es6</li>
<li><a href="https://github.com/ruanyf/es6tutorial.git" target="_blank" rel="external">es6tutorial</a> 全面介绍ECMAScript 6新增的语法特性。</li>
<li><a href="https://github.com/JacksonTian/fks.git" target="_blank" rel="external">fks</a> 前端技能汇总</li>
<li><a href="https://github.com/shichuan/javascript-patterns.git" target="_blank" rel="external">javascript-patterns</a> javascript 模式</li>
<li><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions.git" target="_blank" rel="external">Front-end-Developer-Interview-Questions</a> 前端工作面试问题</li>
<li><a href="https://github.com/sindresorhus/awesome-nodejs.git" target="_blank" rel="external">awesome-nodejs</a> Node 包列表</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS.git" target="_blank" rel="external">You-Dont-Know-JS</a> js book</li>
<li><a href="https://github.com/yeasy/docker_practice.git" target="_blank" rel="external">docker_practice</a> docker 从入门到实践</li>
<li><a href="https://github.com/geekcompany/ResumeSample.git" target="_blank" rel="external">ResumeSample</a> 程序员简历模板</li>
<li><a href="https://github.com/DeathKing/Learning-SICP.git" target="_blank" rel="external">Learning-SICP</a> 《计算机程序的构造和解释》公开课中文化项目</li>
<li><a href="https://github.com/Aufree/trip-to-iOS.git" target="_blank" rel="external">trip-to-iOS</a> iOS 学习资料整理</li>
<li><a href="https://github.com/sindresorhus/awesome.git" target="_blank" rel="external">awesome</a> A curated list of awesome lists</li>
<li><a href="https://github.com/huangz1990/SICP-answers.git" target="_blank" rel="external">SICP-answers</a> SICP 解题集</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li><a href="https://github.com/gmarik/Vundle.vim.git" target="_blank" rel="external">Vundle.vim</a> vim plugin manager</li>
<li><a href="https://github.com/nbs-system/naxsi.git" target="_blank" rel="external">naxsi</a> nginx 安全维护库</li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh.git" target="_blank" rel="external">oh-my-zh</a>  管理Zsh</li>
<li><a href="https://github.com/dominictarr/JSON.sh.git" target="_blank" rel="external">JSON.sh</a> json shell parse</li>
<li><a href="https://github.com/zettio/weave.git" target="_blank" rel="external">weave</a> 创建一个虚拟网络连接 docker 容器跨多个主机部署。</li>
<li><a href="https://github.com/alibaba/tengine.git" target="_blank" rel="external">tengine</a> 基于 nginx 的 Web 服务器。</li>
<li><a href="https://github.com/cloudwu/skynet.git" target="_blank" rel="external">skynet</a> 轻量级的为在线游戏服务器打造的框架。</li>
<li><a href="https://github.com/Itseez/opencv.git" target="_blank" rel="external">opencv</a> 开源的计算机视觉库</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录的是笔者在 &lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;上 Star 的库，持续更新。&lt;/p&gt;
&lt;h2 id=&quot;JS-类&quot;&gt;&lt;a href=&quot;#JS-类&quot; class=&quot;headerlink&quot; title=&quot;JS 类&quot;&gt;&lt;/a&gt;JS 类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/getify/LABjs.git&quot;&gt;LABjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jrburke/requirejs.git&quot;&gt;requirejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seajs/seajs.git&quot;&gt;seajs&lt;/a&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;LABjs 是一个文件加载器, 核心价值是性能优化&lt;/li&gt;
&lt;li&gt;RequireJS 和 SeaJS 则是模块加载器，倡导的是一种模块化开发理念，核心价值是        让 JavaScript 的模块化开发变得更简单自然。&lt;/li&gt;
&lt;li&gt;模块加载器一般可降级为文件加载器用，因此使用 RequireJS 和 SeaJS，也可以达        成 LABjs 的性能优化目的。&lt;/li&gt;
&lt;li&gt;RequireJS 遵循的是 AMD（异步模块定义）规范，SeaJS 遵循的是 CMD （通用模            块定义）规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://aikin.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Mongoose 之 Population</title>
    <link href="http://aikin.github.io/2014/11/02/mongoose-population/"/>
    <id>http://aikin.github.io/2014/11/02/mongoose-population/</id>
    <published>2014-11-02T13:30:17.000Z</published>
    <updated>2016-10-03T17:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://mongoosejs.com/index.html" target="_blank" rel="external">Mongoose</a> 是 <a href="http://www.mongodb.org/" target="_blank" rel="external">MongoDB</a> 的 <strong>ODM(Object Document Mapper)</strong>。</p>
<p><img src="/images/mongoose.png"></p>
<blockquote>
<ul>
<li>什么是<strong>ODM</strong>? 其实和<strong>ORM(Object Relational Mapper)</strong>是同类型的工具。都是将数据库的数据转化为代码对象的库，使用转化后的对象可以直接对数据库的数据进行<strong><em>CRUD(增删改查)</em></strong>。</li>
<li><code>MongoDB</code> 是文档型数据库(Document Database)，不是关系型数据库(Relational Database)。而<code>Mongoose</code>可以将 <strong>MongonDB</strong> 数据库存储的文档(documents)转化为 javascript 对象，然后可以直接进行数据的增删改查。</li>
</ul>
</blockquote>
<a id="more"></a>
<p>因为<code>MongoDB</code>是文档型数据库，所以它没有关系型数据库<a href="http://zh.wikipedia.org/wiki/%E8%BF%9E%E6%8E%A5_(SQL" target="_blank" rel="external"><code>joins</code></a>(数据库的两张表通过”外键”，建立连接关系。) 特性。也就是在建立数据的关联时会比较麻烦。为了解决这个问题，<code>Mongoose</code>封装了一个<a href="http://mongoosejs.com/docs/populate.html" target="_blank" rel="external"><code>Population</code></a>功能。使用<code>Population</code>可以实现在一个 <strong>document</strong> 中填充其他 <strong>collection(s)</strong>    的 <strong>document(s)</strong>。</p>
<p>在定义<code>Schema</code>的时候，如果设置某个 field 关联另一个<code>Schema</code>，那么在获取 document 的时候就可以使用 Population 功能通过关联<code>Schema</code>的 field 找到关联的另一个 document，并且用被关联 document 的内容替换掉原来关联字段(field)的内容。</p>
<h2 id="接下来分享下-Query-populate-Model-populate-Document-populate的用法"><a href="#接下来分享下-Query-populate-Model-populate-Document-populate的用法" class="headerlink" title="接下来分享下:Query#populate Model#populate Document#populate的用法"></a>接下来分享下:<code>Query#populate</code> <code>Model#populate</code> <code>Document#populate</code>的用法</h2><p><strong><em>先建立三个<code>Schema</code>和<code>Model</code>:</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="keyword">var</span> Schema   = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    name  : &#123; type: <span class="built_in">String</span>, unique: <span class="literal">true</span> &#125;,</div><div class="line">    posts : [&#123; type: Schema.Types.ObjectId, ref: <span class="string">'Post'</span> &#125;]</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>, UserSchema);</div><div class="line"></div><div class="line"><span class="keyword">var</span> PostSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    poster   : &#123; type: Schema.Types.ObjectId, ref: <span class="string">'User'</span> &#125;,</div><div class="line">    comments : [&#123; type: Schema.Types.ObjectId, ref: <span class="string">'Comment'</span> &#125;],</div><div class="line">    title    : <span class="built_in">String</span>,</div><div class="line">    content  : <span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> Post = mongoose.model(<span class="string">'Post'</span>, PostSchema);</div><div class="line"></div><div class="line"><span class="keyword">var</span> CommentSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    post      : &#123; type: Schema.Types.ObjectId, ref: <span class="string">"Post"</span> &#125;,</div><div class="line">    commenter : &#123; type: Schema.Types.ObjectId, ref: <span class="string">'User'</span> &#125;,</div><div class="line">    content   : <span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> Comment = mongoose.model(<span class="string">'Comment'</span>, CommentSchema);</div></pre></td></tr></table></figure>
<ul>
<li>在上述的例子中，创建了三个 Models:<code>User</code>，<code>Post</code>，<code>Comment</code>。</li>
<li><code>User</code> 的属性 <strong><em>posts</em></strong>，对应是一个 <strong><em>ObjectId</em></strong> 的数组。<code>ref</code>表示关联<code>Post</code>(注意: 被关联的<strong><em>model</em></strong>的 type 必须是 <code>ObjectId, Number, String, 和 Buffer</code> 才有效)。</li>
<li><code>Post</code>的属性 <strong><em>poster</em></strong> 和 <strong><em>comments</em></strong> 分别关联<code>User</code>和<code>Comment</code>。</li>
<li><code>Comment</code>的属性 <strong><em>post</em></strong> 和 <strong><em>commenter</em></strong> 分别关联<code>Post</code>和<code>User</code>。</li>
<li>三个 Models 的关系:一个 user–<strong>has many</strong>–&gt;post。一个 post–<strong>has one</strong>–&gt;user，<strong>has many</strong>–&gt;comment。一个 comment–<strong>has one</strong>–&gt;post 和 user。</li>
</ul>
<p><strong><em>创建一些数据到数据库:</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 连接数据库</span></div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/population-test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">    createData();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createData</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> userIds    = [<span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId];</div><div class="line">    <span class="keyword">var</span> postIds    = [<span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId];</div><div class="line">    <span class="keyword">var</span> commentIds = [<span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId, <span class="keyword">new</span> ObjectId];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> users    = [];</div><div class="line">    <span class="keyword">var</span> posts    = [];</div><div class="line">    <span class="keyword">var</span> comments = [];</div><div class="line"></div><div class="line">    users.push(&#123;</div><div class="line">        _id   : userIds[<span class="number">0</span>],</div><div class="line">        name  : <span class="string">'aikin'</span>,</div><div class="line">        posts : [postIds[<span class="number">0</span>]]</div><div class="line">    &#125;);</div><div class="line">    users.push(&#123;</div><div class="line">        _id   : userIds[<span class="number">1</span>],</div><div class="line">        name  : <span class="string">'luna'</span>,</div><div class="line">        posts : [postIds[<span class="number">1</span>]]</div><div class="line">    &#125;);</div><div class="line">    users.push(&#123;</div><div class="line">        _id   : userIds[<span class="number">2</span>],</div><div class="line">        name  : <span class="string">'luajin'</span>,</div><div class="line">        posts : [postIds[<span class="number">2</span>]]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    posts.push(&#123;</div><div class="line">        _id      : postIds[<span class="number">0</span>],</div><div class="line">        title    : <span class="string">'post-by-aikin'</span>,</div><div class="line">        poster   : userIds[<span class="number">0</span>],</div><div class="line">        comments : [commentIds[<span class="number">0</span>]]</div><div class="line">    &#125;);</div><div class="line">    posts.push(&#123;</div><div class="line">        _id      : postIds[<span class="number">1</span>],</div><div class="line">        title    : <span class="string">'post-by-luna'</span>,</div><div class="line">        poster   : userIds[<span class="number">1</span>],</div><div class="line">        comments : [commentIds[<span class="number">1</span>]]</div><div class="line">    &#125;);</div><div class="line">    posts.push(&#123;</div><div class="line">        _id      : postIds[<span class="number">2</span>],</div><div class="line">        title    : <span class="string">'post-by-luajin'</span>,</div><div class="line">        poster   : userIds[<span class="number">2</span>],</div><div class="line">        comments : [commentIds[<span class="number">2</span>]]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    comments.push(&#123;</div><div class="line">        _id       : commentIds[<span class="number">0</span>],</div><div class="line">        content   : <span class="string">'comment-by-luna'</span>,</div><div class="line">        commenter : userIds[<span class="number">1</span>],</div><div class="line">        post      : postIds[<span class="number">0</span>]</div><div class="line">    &#125;);</div><div class="line">    comments.push(&#123;</div><div class="line">        _id       : commentIds[<span class="number">1</span>],</div><div class="line">        content   : <span class="string">'comment-by-luajin'</span>,</div><div class="line">        commenter : userIds[<span class="number">2</span>],</div><div class="line">        post      : postIds[<span class="number">1</span>]</div><div class="line">    &#125;);</div><div class="line">    comments.push(&#123;</div><div class="line">        _id       : commentIds[<span class="number">2</span>],</div><div class="line">        content   : <span class="string">'comment-by-aikin'</span>,</div><div class="line">        commenter : userIds[<span class="number">1</span>],</div><div class="line">        post      : postIds[<span class="number">2</span>]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    User.create(users, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</div><div class="line">        Post.create(posts, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</div><div class="line">            Comment.create(comments, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>数据的准备就绪后，接下来就是探索<code>populate</code>方法:</em></strong></p>
<h2 id="1-Query-populate"><a href="#1-Query-populate" class="headerlink" title="1. Query#populate"></a><a href="http://mongoosejs.com/docs/api.html#query_Query-populate" target="_blank" rel="external">1. Query#populate</a></h2><p>什么Query? Query(查询)，可以快速和简单的从<strong>MongooDB</strong>查找出相应的 document(s)。 Mongoose 封装了很多查询的方法，使得对数据库的操作变得简单啦。这里分享一下<code>populate</code>方法用法。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>Query.populate(path, [select], [model], [match], [options])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>path</code></strong><br>　　类型：<code>String</code>或<code>Object</code>。<br>　　<code>String</code>类型的时， 指定要填充的关联字段，要填充多个关联字段可以以空格分隔。<br>　　<code>Object</code>类型的时，就是把 <strong>populate</strong> 的参数封装到一个对象里。当然也可以是个数组。下面的例子中将会实现。</p>
<p><strong><code>select</code></strong><br>　　类型：<code>Object</code>或<code>String</code>，可选，指定填充 document 中的哪些字段。<br>　　<code>Object</code>类型的时，格式如:<code>{name: 1, _id: 0}</code>,为<strong>0</strong>表示不填充，为<strong>1</strong>时表示填充。<br>　　<code>String</code>类型的时，格式如:<code>&quot;name -_id&quot;</code>，用空格分隔字段，在字段名前加上<code>-</code>表示不填充。详细语法介绍 <a href="http://mongoosejs.com/docs/api.html#query_Query-select" target="_blank" rel="external">query-select</a></p>
<p><strong><code>model</code></strong><br>　　类型：<code>Model</code>，可选，指定关联字段的 model，如果没有指定就会使用<code>Schema</code>的<code>ref</code>。</p>
<p><strong><code>match</code></strong><br>　　类型：<code>Object</code>，可选，指定附加的查询条件。</p>
<p><strong><code>options</code></strong><br>　　类型：<code>Object</code>，可选，指定附加的其他查询选项，如排序以及条数限制等等。</p>
</blockquote>
<ul>
<li><h3 id="填充User的posts字段"><a href="#填充User的posts字段" class="headerlink" title="填充User的posts字段:"></a><strong>填充<code>User</code>的<code>posts</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//填充所有 users 的 posts</span></div><div class="line">User.find()</div><div class="line">    .populate(<span class="string">'posts'</span>, <span class="string">'title'</span>, <span class="literal">null</span>, &#123;sort: &#123; title: <span class="number">-1</span> &#125;&#125;)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(docs[<span class="number">0</span>].posts[<span class="number">0</span>].title); <span class="comment">// post-by-aikin</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="comment">//填充 user 'luajin'的 posts</span></div><div class="line">User.findOne(&#123;name: <span class="string">'luajin'</span>&#125;)</div><div class="line">    .populate(&#123;path: <span class="string">'posts'</span>, select: &#123; title: <span class="number">1</span> &#125;, options: &#123;sort: &#123; title: <span class="number">-1</span> &#125;&#125;&#125;)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(doc.posts[<span class="number">0</span>].title);  <span class="comment">// post-by-luajin</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="comment">//这里的 populate 方法传入的参数形式不同，其实实现的功能是一样的，只是表示形式不一样。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="填充Post的poster和comments字段"><a href="#填充Post的poster和comments字段" class="headerlink" title="填充Post的poster和comments字段:"></a><strong>填充<code>Post</code>的<code>poster</code>和<code>comments</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</div><div class="line">    .populate(<span class="string">'poster comments'</span>, <span class="string">'-_id'</span>)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(doc.poster.name);           <span class="comment">// aikin</span></div><div class="line">        <span class="built_in">console</span>.log(doc.poster._id);            <span class="comment">// undefined</span></div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// comment-by-luna</span></div><div class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>]._id);      <span class="comment">// undefined</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</div><div class="line">    .populate(&#123;path: <span class="string">'poster comments'</span>, select: <span class="string">'-_id'</span>&#125;)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(doc.poster.name);           <span class="comment">// aikin</span></div><div class="line">        <span class="built_in">console</span>.log(doc.poster._id);            <span class="comment">// undefined</span></div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// comment-by-luna</span></div><div class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>]._id);      <span class="comment">// undefined</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="comment">//上两种填充的方式实现的功能是一样的。就是给 populate 方法的参数不同。</span></div><div class="line"><span class="comment">//这里要注意，当两个关联的字段同时在一个 path 里面时， select 必须是 document(s)</span></div><div class="line"><span class="comment">//具有的相同字段。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//如果想要给单个关联的字段指定 select，可以传入数组的参数。如下：</span></div><div class="line"></div><div class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</div><div class="line">    .populate([<span class="string">'poster'</span>, <span class="string">'comments'</span>])</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(doc.poster.name);          <span class="comment">// aikin</span></div><div class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// comment-by-luna</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">Post.findOne(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</div><div class="line">    .populate([</div><div class="line">        &#123;path:<span class="string">'poster'</span>,   select: <span class="string">'-_id'</span>&#125;,</div><div class="line">        &#123;path:<span class="string">'comments'</span>, select: <span class="string">'-content'</span>&#125;</div><div class="line">    ])</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(doc.poster.name);          <span class="comment">// aikin</span></div><div class="line">        <span class="built_in">console</span>.log(doc.poster._id);           <span class="comment">// undefined</span></div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>]._id);      <span class="comment">// 会打印出对应的 comment id</span></div><div class="line">        <span class="built_in">console</span>.log(doc.comments[<span class="number">0</span>].content);  <span class="comment">// undefined</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="2-Model-populate"><a href="#2-Model-populate" class="headerlink" title="2. Model#populate"></a><a href="http://mongoosejs.com/docs/api.html#model_Model.populate" target="_blank" rel="external">2. Model#populate</a></h2><p>Model(模型)，是根据定义的 Schema 编译成的抽象的构造函数。models 的实例 documents，可以在数据库中被保存和检索。数据库所有 document 的创建和检索，都通过 models 处理。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>Model.populate(docs, options, [cb(err,doc)])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>docs</code></strong><br>　　类型：<code>Document</code>或<code>Array</code>。单个需要被填充的 doucment 或者 document 的数组。</p>
<p><strong><code>options</code></strong><br>　　类型：<code>Object</code>。以键值对的形式表示。<br>　　keys：<code>path</code> <code>select</code> <code>match</code> <code>model</code> <code>options</code>，这些键对应值的类型和功能，与上述<code>Query#populate</code>方法的参数相同。</p>
<p><strong><code>[cb(err,doc)]</code></strong><br>　　类型：<code>Function</code>，回调函数，接收两个参数，错误<code>err</code>和填充完的<code>doc(s)</code>。</p>
</blockquote>
<ul>
<li><h3 id="填充Post的poster和comments字段以及comments的commenter字段"><a href="#填充Post的poster和comments字段以及comments的commenter字段" class="headerlink" title="填充Post的poster和comments字段以及comments的commenter字段:"></a><strong>填充<code>Post</code>的<code>poster</code>和<code>comments</code>字段以及<code>comments</code>的<code>commenter</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Post.find(&#123;title: <span class="string">'post-by-aikin'</span>&#125;)</div><div class="line">    .populate(<span class="string">'poster comments'</span>)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> opts = [&#123;</div><div class="line">            path   : <span class="string">'comments.commenter'</span>,</div><div class="line">            select : <span class="string">'name'</span>,</div><div class="line">            model  : <span class="string">'User'</span></div><div class="line">        &#125;];</div><div class="line"></div><div class="line">        Post.populate(docs, opts, <span class="function"><span class="keyword">function</span>(<span class="params">err, populatedDocs</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(populatedDocs[<span class="number">0</span>].poster.name);                  <span class="comment">// aikin</span></div><div class="line">            <span class="built_in">console</span>.log(populatedDocs[<span class="number">0</span>].comments[<span class="number">0</span>].commenter.name);  <span class="comment">// luna</span></div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="3-Document-populate"><a href="#3-Document-populate" class="headerlink" title="3. Document#populate"></a><a href="http://mongoosejs.com/docs/api.html#document_Document-populate" target="_blank" rel="external">3. Document#populate</a></h2><p>Document，每个 document 都是其 Model 的一个实例，一对一的映射着 MongoDB 的 document。</p>
<blockquote>
<p><strong><em>语法：</em></strong><br>    <strong><code>Document.populate([path], [callback])</code></strong></p>
<p><strong><em>参数：</em></strong></p>
<p><strong><code>path</code></strong><br>　　类型：<code>String</code>或<code>Object。与上述</code>Query#populate`方法的 <strong>path</strong> 参数相同。</p>
<p><strong><code>callback</code></strong><br>　　类型：<code>Function</code>。回调函数，接收两个参数，错误<code>err</code>和填充完的<code>doc(s)</code>。</p>
</blockquote>
<ul>
<li><h3 id="填充User的posts字段-1"><a href="#填充User的posts字段-1" class="headerlink" title="填充User的posts字段:"></a><strong>填充<code>User</code>的<code>posts</code>字段:</strong></h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">User.findOne(&#123;name: <span class="string">'aikin'</span>&#125;)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> opts = [&#123;</div><div class="line">            path   : <span class="string">'posts'</span>,</div><div class="line">            select : <span class="string">'title'</span></div><div class="line">        &#125;];</div><div class="line"></div><div class="line">        doc.populate(opts, <span class="function"><span class="keyword">function</span>(<span class="params">err, populatedDoc</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(populatedDoc.posts[<span class="number">0</span>].title);  <span class="comment">// post-by-aikin</span></div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<script src="//gist.github.com/534fae3c95039b7dee09.js?file=population-try"></script>
<p><strong><em>博文涉及的完整例子在 <a href="https://gist.github.com/aikin/534fae3c95039b7dee09" target="_blank" rel="external">gist</a> 上。(ps: 貌似 gist 今天被墙了。)</em></strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://mongoosejs.com/docs/populate.html" target="_blank" rel="external">mongoose-api-docs</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/07/database_implementation.html" target="_blank" rel="external">数据库的最简单实现</a></li>
<li><a href="http://my.oschina.net/calvinchen/blog/137932" target="_blank" rel="external">Mongoose 使用之 Population</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://mongoosejs.com/index.html&quot;&gt;Mongoose&lt;/a&gt; 是 &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; 的 &lt;strong&gt;ODM(Object Document Mapper)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#39;/images/mongoose.png&#39; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;什么是&lt;strong&gt;ODM&lt;/strong&gt;? 其实和&lt;strong&gt;ORM(Object Relational Mapper)&lt;/strong&gt;是同类型的工具。都是将数据库的数据转化为代码对象的库，使用转化后的对象可以直接对数据库的数据进行&lt;strong&gt;&lt;em&gt;CRUD(增删改查)&lt;/em&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MongoDB&lt;/code&gt; 是文档型数据库(Document Database)，不是关系型数据库(Relational Database)。而&lt;code&gt;Mongoose&lt;/code&gt;可以将 &lt;strong&gt;MongonDB&lt;/strong&gt; 数据库存储的文档(documents)转化为 javascript 对象，然后可以直接进行数据的增删改查。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mongoose" scheme="http://aikin.github.io/tags/mongoose/"/>
    
      <category term="nodejs" scheme="http://aikin.github.io/tags/nodejs/"/>
    
  </entry>
  
</feed>
